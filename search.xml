<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker로 React-Node를 이미지로 만들어 컨터이너화 하기</title>
      <link href="/2020/04/25/docker-20200425-docker-react-node/"/>
      <url>/2020/04/25/docker-20200425-docker-react-node/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Docker를 사용해서 React와 Node를 묶어 이미지를 만들고 그 이미지를 이용해서 컨테이너를 생성하고 실행하는 예제이다.</p><h2 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h2><ul><li>windows10</li><li>visual studo code</li><li>docker desktop</li></ul><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><p>일단 create-react-app 으로 사용할 react 프로젝트를 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-docker-example1</span><br></pre></td></tr></table></figure><p>프로젝트 명은 react-docker-example1로 지정했다.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled.png" alt="Docker%20React%20Node/Untitled.png"></p><p>프로젝트가 생성되면 정상동작하는지 확인 해 보자.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%201.png" alt="Docker%20React%20Node/Untitled%201.png"></p><p>잘 동작하는 것을 확인 할 수 있다.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%202.png" alt="Docker%20React%20Node/Untitled%202.png"></p><p>프로젝트 경로로 진입해서 VisualStudoCode를 실행하자</p><p>아래 명령으로 현재경로에서 VisualStudoCode를 실행 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%203.png" alt="Docker%20React%20Node/Untitled%203.png"></p><p>프로젝트 최상위 경로에 <strong>DockerFile</strong>을 생성하고 내용을 아래처럼 채우자.</p><p><strong>node 이미지 버전의 경우 자신에 맞게 설정해주자.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM node:12.16.2 as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 작업 폴더를 만들고 npm 설치</span></span><br><span class="line">RUN mkdir /usr/src/app</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">ENV PATH /usr/src/app/node_modules/.bin:<span class="variable">$PATH</span></span><br><span class="line">COPY package.json /usr/src/app/package.json</span><br><span class="line">RUN npm install --silent</span><br><span class="line">RUN npm install react-scripts@2.1.3 -g --silent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 소스를 작업폴더로 복사하고 앱 실행</span></span><br><span class="line">COPY . /usr/src/app</span><br><span class="line">CMD [<span class="string">"npm"</span>, <span class="string">"start"</span>]</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%204.png" alt="Docker%20React%20Node/Untitled%204.png"></p><p>DockerFile을 만들었다면, 이제 이 DockerFile을 이용해서 image를 생성하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t react-docker-example1</span><br></pre></td></tr></table></figure><p>난 프로젝트명과 이미지명을 동일하게 지정했다.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%205.png" alt="Docker%20React%20Node/Untitled%205.png"></p><p>난 DockerFile에 설정한 node 버전의 이미지가 없어서 다운받는데 좀 시간이 걸렸다.</p><p>node 이미지가 받아지면 DockerFile을 기반해서 새로운 이미지가 생성될 것이다.</p><p>아래 명령어로 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%206.png" alt="Docker%20React%20Node/Untitled%206.png"></p><p>DockerFile에서 참조하고 있는 node 이미지와 그 기반으로 만들어진 react-docker-example1 이미지가 보인다.</p><p>아래 명령어로 생성한 react-docker-example1 이미지를 컨테이너화 하고 실행해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 3000:3000 --rm 이미지명또는아이디</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%207.png" alt="Docker%20React%20Node/Untitled%207.png"></p><p>docker run 옵션중 -it 로 인해 아래처럼 컨테이너 실행시 react 컨테이너에서 출력하는 콘솔이 터미널로 출력된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**--rm** 옵션은 컨테이너가 종료될때 해당 컨테이너를 자동으로 지워준다.</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%208.png" alt="Docker%20React%20Node/Untitled%208.png"></p><p>정상적으로 컨테이너가 동작하는 것을 확인 할 수 있다.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%209.png" alt="Docker%20React%20Node/Untitled%209.png"></p><p>새로운 터미널에서 아래 명령어로 실행중인 컨테이너를 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Docker%20React%20Node/Untitled%2010.png" alt="Docker%20React%20Node/Untitled%2010.png"></p><p>이제 해당 컨테니어를 종료해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 컨테이너id</span><br></pre></td></tr></table></figure><p>일반적으로 위 명령어로 docker 컨테이너를 종료한다.</p><p>하지만 docker run 옵션으로 -it 사용했기에, docker run을 실행중인 터미널에서 ctrl+c 를 입력해도 docker 컨테이너가 종료된다.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%2011.png" alt="Docker%20React%20Node/Untitled%2011.png"></p><p>다시 docker ps로 해당 컨테이너가 자동으로 삭제되었는지 확인해보자.</p><p><img src="/images/2020/Docker%20React%20Node/Untitled%2012.png" alt="Docker%20React%20Node/Untitled%2012.png"></p><p>끝!!!</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="/images/2020/https://codechacha.com/ko/dockerizing-react-with-nginx/">https://codechacha.com/ko/dockerizing-react-with-nginx/</a></p><p>[<a href="https://blog.leedoing.com/171]" target="_blank" rel="external nofollow noopener noreferrer">https://blog.leedoing.com/171]</a>(/images/2020/</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> react </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker에서 테스트용도의 mongodb 실행하기</title>
      <link href="/2020/04/18/docker-20200418-docker-mongodb-start/"/>
      <url>/2020/04/18/docker-20200418-docker-mongodb-start/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>docker로 간단하게 테스트용 mongodb 서버를 실행하는 예제이다.</p><p>이글은 컨테이너 생성과 접근정도만 다룬다.</p><p>관리자 계정생성등은 구글링 ㄱㄱ</p><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>windows10</li><li>docker desktop</li></ul><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><p>콘솔에서 아래 명령어로 mongodb 이미지를 검색하자.</p><pre><code>docker search mongo</code></pre><p><img src="/images/2020/Docker%20mongodb/Untitled.png" alt="Docker%20mongodb/Untitled.png"></p><p>아래 명령어로 해당 이미지를 다운받자.</p><pre><code>docker pull mongo</code></pre><p><img src="/images/2020/Docker%20mongodb/Untitled%201.png" alt="Docker%20mongodb/Untitled%201.png"></p><p>아래 명령어로 다움받은 mongo 이미지를 컨테이너화 하고 실행하자.</p><pre><code>docker run -name mongodb_test -d -p 27017:27017 mongo</code></pre><p><strong>옵션설명</strong></p><ul><li>-name mongodb_test : 컨테이너 이름을 mongodb_test로 지정</li><li>-d : 데몬으로 실행 설정</li><li>-p 27017:27017 : 호스트 포트 27017로 접슨시 해당 컨테이너의 27017로 포트포워딩</li></ul><p><strong>주의</strong></p><p>위에서 생성한 mongodb_test 는 테스트용 db로 사용할 목적이라서 로그인없이 db에 접근이 가능하다.</p><p>만약 몽고 컨테이너 생성시 로그인 기능을 활성화 시키려면 아래 명령어로 컨테이너를 실행시키자.</p><pre><code>docker run -name mongodb_test -d -p 27017:27017 mongo –auth</code></pre><p>마지막에 <strong>-auth</strong>를 추가해주면 된다. 나느 테스트 용이므로 -auth 옵션은 생략한다.</p><p><img src="/images/2020/Docker%20mongodb/Untitled%202.png" alt="Docker%20mongodb/Untitled%202.png"></p><p>mysql는 이전에 테스트용으로 생성한 것이다. mongodb_test 컨테이너가 생성된 것을 확인 할 수 있다.</p><p>이제 컨테이너에 bash로 붙어보자.</p><pre><code>docker exec -it mongodb_test /bin/bash</code></pre><p>위 명령어로 컨테이너에 진입하게 되면 다시 아래 명령어로 mongodb에 붙어보자.</p><pre><code>mongo</code></pre><p><img src="/images/2020/Docker%20mongodb/Untitled%203.png" alt="Docker%20mongodb/Untitled%203.png"></p><p>위처럼 정상 접근이 되는 것을 확인 할 수 있다.</p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github에 push, pull을 위한 ssh키 생성 및 등록(windows10)</title>
      <link href="/2020/04/16/git-20200416-git-ssh-key-generate/"/>
      <url>/2020/04/16/git-20200416-git-ssh-key-generate/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이 블로그는 hexo라는 정적 웹 생성기로 만들어져 있고, hexo로 만들어진 정적웹을 github 페이지에 배포하여 운영하고 있다.</p><p>여기서 gitpage로 hexo블로그를 배포하기 위해서는 hexo 블로그를 작성하고 배포하는 pc에서 ssh키를 생성하고, 이 생성된 ssh키의 공개키를 github 계정에 등록해 줘야 한다. </p><p>이번에는 그 과정을 정리해본다. (간단한 거지만 이따금 하는 일이라 자주 까먹는다.)</p><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>windows10</li><li>git bash</li></ul><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><h2 id="1-개발PC에서-ssh-키-생성하기"><a href="#1-개발PC에서-ssh-키-생성하기" class="headerlink" title="1.개발PC에서 ssh 키 생성하기"></a>1.개발PC에서 ssh 키 생성하기</h2><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled.png"></p><p>일단 git bash를 열자. (cmd, power shell 등을 사용해도 상관 없으나 윈도우 커맨드를 별로 안좋아해서 git bash를 사용했다.)</p><p><strong>git bash 명령어</strong></p><pre><code>pwdcd ~/.ssh</code></pre><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%201.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%201.png"></p><p>현재 사용자 계정의 폴더에 .ssh라는 폴더 가 있는지 확인해보자.</p><p>난 현재 OS를 초기화 한 상태라서 위처럼 폴더 자체가 없다.</p><p>해당 폴더를 만들고 내부로 진입하자.</p><p><strong>git bash 명령어</strong></p><pre><code>cd ~/.sshmkdir ./sshls -al</code></pre><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%202.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%202.png"></p><p>이제 .ssh 폴더 내부에서 ssh를 생성하자.</p><p><strong>git bash 명령어</strong></p><pre><code>ssh-keygen -t rsa -b 4096 -C &quot;example@email.com&quot;</code></pre><p>위 명령어는 ssh 비대칭 키를 생성하는 명령어 이다.</p><ul><li>ssh-keygen : ssh 비대칭키 생성 명령어</li><li>-t rsa : 암호화 타입을 rsa 방식을 사용</li><li>-b 4096 : 생성할 키의 비트수 4096으로 지정, rsa 타입을 위해선 최소 768 비트가 필요하며 default로 2048 비트이다. 4096으로 더 난독화된 키를 생성한다.</li><li>-C  “<a href="mailto:example@email.com" rel="external nofollow noopener noreferrer" target="_blank">example@email.com</a>“ : 코멘트로 일종의 주석이다. 보통 이메일 계정이나 아이디등을 입력한다.</li></ul><p>위명령어를 입력하면 다음처럼 공개키, 비밀키를 생성을 한다.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%203.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%203.png"></p><p><strong>Enter</strong>를 눌러서 현재위치인 .ssh/id_rsa 파일을 생성하게 하자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%204.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%204.png"></p><p>그 다음에는 암호를 입력하라고 한다. 이 ssh를 사용할 때 암호 입력으로 한번더 검증을 하기 위해서는 여기에 암호를 넣어주어야 한다.</p><p>그냥 enter를 누를경우 ssh키 사용시 암호입력 없이 사용이 된다.</p><p>난 암호 입력을 사용하고 싶으니 <strong>암호를 입력한다</strong>.</p><p>암호 확인을 위해서 두번 입력해 주어야 한다.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%205.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%205.png"></p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%206.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%206.png"></p><p>위처럼 ssh 가 생성이 완료 되었다.</p><p>id_rsa는 비밀키이고, id_rsa.pub는 공개키이다. </p><p>이 <strong>id_rsa.pub 공개키</strong>가 github에 등록해야 할 대상이다. </p><p>해당 파일을 문서 편집기로 열어서 내용을 클립보드에 복사하자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%207.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%207.png"></p><h2 id="2-github에-ssh-공개키를-등록하자"><a href="#2-github에-ssh-공개키를-등록하자" class="headerlink" title="2. github에 ssh 공개키를 등록하자."></a>2. github에 ssh 공개키를 등록하자.</h2><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%208.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%208.png"></p><p>github페이지에서 계정의 <strong>Settings</strong>로 들어가자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%209.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%209.png"></p><p>왼쪽 메뉴에서 <strong>SSH and GPG keys</strong>를 클릭하자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%2010.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%2010.png"></p><p><strong>New SSH key</strong> 를 클릭하자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%2011.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%2011.png"></p><p>Title에는 ssh를 설명하는 내용을 적어주고.</p><p>key에는 아까 생성하고 클립보드에 복사한 ssh 공개키를 붙여넣자.</p><p>그리고 <strong>Add SSH key</strong> 버튼을 누르면 끝!</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%2012.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%2012.png"></p><p>위처럼 등록이 된다.</p><p>hexo 블로그를 github에 배포해서 동작이 되나 확인해보자.</p><p><img src="/images/2020/Github%20push%20pull%20ssh%20windows10/Untitled%2013.png" alt="Github%20push%20pull%20ssh%20windows10/Untitled%2013.png"></p><p>잘 동작이 된다.</p><p>끝!!!</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>개발 pc에서 ssh키를 생성하고 github에 계정에 등록하면, github에 push, pull등을 할때 github 계정으로 push, pull하는 것이 아니라 이 ssh 키로 push, pull을 할 수 있다.</p><p>혹시 github push, pull 할 때 비밀번호 입력등이 귀찮은 경우, ssh 키 생성시 passphrase를 생략할 경우, 비밀번호를 생략해서 push, pull을 할 수 있다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://storycompiler.tistory.com/112" target="_blank" rel="external nofollow noopener noreferrer">[Ubuntu/Linux] ssh 공개키의 모든 것</a></p><p><a href="https://nickjoit.tistory.com/94" target="_blank" rel="external nofollow noopener noreferrer">GitHub SSH 키 생성 및 등록하여 사용하기</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven의 local repository설정으로 jar 추가하기</title>
      <link href="/2020/01/24/maven-20200124-java-maven-local-repository/"/>
      <url>/2020/01/24/maven-20200124-java-maven-local-repository/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>얼마 전 Maven 프로젝트에 custom jar를 local  repository에 등록해서 사용해야하는 경우가 있었는데, 구체적인 방법을 몰라서 상당히 애를 먹었었다.</p><p>평소 대충 되면 되나보다 하고 넘어가며 딱히 Maven에 대한 공부를 게을리 한게 이렇게 고생하게 만들 줄이야.</p><p>Maven 프로젝트로 A 프로젝트를 만들어 a.jar를 만들고, 별도의 B 프로젝트에서 앞서 만든 a.jar를 local repository로 주입받아 사용하는 예제를 만들어 보겠다.</p><p>예제를 만들고 테스트하며 그 내용을 시간의 흐름대로 작성한 글이라 두서가 없다는 점을 미리 알린다.</p><h1 id="a-jar를-만들-Maven-프로젝트-만들기"><a href="#a-jar를-만들-Maven-프로젝트-만들기" class="headerlink" title="a.jar를 만들 Maven 프로젝트 만들기"></a>a.jar를 만들 Maven 프로젝트 만들기</h1><p>일단 intelliJ 에서 Maven 프로젝트를 만들어 보자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled.png" alt="Maven%20local%20repository%20jar/Untitled.png"></p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%201.png" alt="Maven%20local%20repository%20jar/Untitled%201.png"></p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%202.png" alt="Maven%20local%20repository%20jar/Untitled%202.png"></p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%203.png" alt="Maven%20local%20repository%20jar/Untitled%203.png"></p><p>위 화면들 처럼 Aproject라는 Maven 프로젝트를 만들었다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%204.png" alt="Maven%20local%20repository%20jar/Untitled%204.png"></p><p>생성된 프로젝트에서 App 클래스에 main 메소드에서 이 프로젝트가 A project 임을 명시했다.</p><p>실행해보니 콘솔에 System.out.println이 정상적으로 동작하는 것을 확인 할 수 있다.</p><p>지금 Aproject에는 App클래스와 그 안에 main 메소드만 덩그러니 있다.</p><p>나중에 생성할 Bproject에서 사용할 service 클래스를 추가하자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%205.png" alt="Maven%20local%20repository%20jar/Untitled%205.png"></p><p>위처럼 문자열을 리턴하는 service 클래스를 추가했다.</p><p>위 프로젝트를 Maven package 명령으로 jar를 만들고, 그 jar를 실행시키면 아래처럼 오류가 발생 할 것이다..</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%206.png" alt="Maven%20local%20repository%20jar/Untitled%206.png"></p><p>위처럼 Maven clean 성공.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%207.png" alt="Maven%20local%20repository%20jar/Untitled%207.png"></p><p>그리고 Maven package 명령으로 Aproject의 jar를 생성했다.</p><p>생성된 jar를 java 명령으로 실행시키면 정작 아래처럼 메세지와 동작하지 않는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">메세지: 기본 Manifest 속성이 없습니다.</span><br></pre></td></tr></table></figure><p><img src="/images/2020/Maven-local-repository-jar/Untitled%208.png" alt="Maven%20local%20repository%20jar/Untitled%208.png"></p><p>실행 가능한 jar를 만들기 위해서는, 해당 jar파일을 실행하기위한 일종의 명세서 파일이 필요하다.</p><p>이 파일은 jar 파일 내부에 존재 해야 한다.</p><p>지금 Maven 프로젝트 build 설정에서는 그 명세서 파일(MANIFEST.MF)을 Maven package 명령시 자동으로 만들어주지 않아서 위처럼 jar가 실행되지 않는 것이다.</p><h2 id="실행가능한-Maven-jar-설정-추가하기"><a href="#실행가능한-Maven-jar-설정-추가하기" class="headerlink" title="실행가능한 Maven jar 설정 추가하기"></a>실행가능한 Maven jar 설정 추가하기</h2><p>이제 위 프로젝트를 실행가능한 jar 프로젝트로 만들어 보자.</p><p>일단 pom.xml파일에 아래처럼 packaging을 jar로 하겠다고 명시한다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%209.png" alt="Maven%20local%20repository%20jar/Untitled%209.png"></p><p>그리고 기존의 build 부분을 아래처럼 수정해주자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2010.png" alt="Maven%20local%20repository%20jar/Untitled%2010.png"></p><p>중요한 부분은 mainClass태그 내부에 해당 프로젝트의 앤트리 포인트가 되는 클래스의 경로를 넣어주어야 한다. </p><p><strong>pom.xml 전체소스</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Aproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Aproject<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                org.example.App</span><br><span class="line">              <span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 다시 maven clean 후 maven package 를 실행시켜 새로 jar파일을 생성하고 실행해보자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2011.png" alt="Maven%20local%20repository%20jar/Untitled%2011.png"></p><p>위처럼 jar파일을 직접 실행시켰을때, 정상동작하는 것을 확인 할 수 있다.</p><p>내가 개발한 일종의 커스텀 jar파일을 생성했다.</p><p>그럼 이제 새로운 B 프로젝트를 생성하고 이 jar 파일을 사용하려면 어떻게 해야 할까?</p><p>경우의 수는 다음과 같을 것이다.</p><ol><li>만약 당신이 오픈소스를 개발한다면, 그냥 maven repository에 올려서 사용하면 될 것이다.</li><li>만약 당신이 인터넷망이 아닌, 일종의 사내망에서 개발중이고 사내망에 nexus와 같은 사설 maven 저장소가 존재한다면 그곳에 올려서 사용 할 수도 있을 것이다.</li><li><strong>다 귀찮다. 그냥 해당 a. jar파일을 새로운 프로젝트B에 직접 주입해서 사용할 것이고, B프로젝트를 pakcage 했을때, 일종의 외부 라이브러리인 a.jar 가 같이 패키징이 되어야 한다.</strong></li></ol><p>내가 지금 할 방법은 3번이다. </p><h1 id="Maven-local-repository를-사용해서-특정-jar파일을-프로젝트에-포함시키기"><a href="#Maven-local-repository를-사용해서-특정-jar파일을-프로젝트에-포함시키기" class="headerlink" title="Maven local repository를 사용해서 특정 jar파일을 프로젝트에 포함시키기"></a>Maven local repository를 사용해서 특정 jar파일을 프로젝트에 포함시키기</h1><p>Maven local repository를 강조하는 이유는, 내가 이 글을 쓰는 목적이기도 한다.</p><p>Eclipce나 IntelliJ와 같은 툴에서는 자체적으로 외부라이브러리를 추가하는 설정이 존재한다.</p><p>Eclipce의 경우 External library 같은 설정으로 있었던 기억이 있다.</p><p>위와 같이 개발도구의 설정으로 jar를 추가할 경우, 개발할때는 문제가 없지만, 정작 프로젝트를 package 했을때, 내가 임이로 추가한 jar라 같이 패키징이 안되는 경우가 있다.</p><p>따라서 내가 임의로 jar등을 외부 라이브러리로 추가할 때는 개발도구의 설정을 사용하기보다는, 개발 중인 프로젝트의 build 도구(Maven, gradle)의 설정으로 jar 외부 라이브러리를 추가하는 것이 깔끔하다.</p><p>새로운 Maven 프로젝트를 생성하겠다. </p><p>프로젝트명은 Bproject이다. 생성방법은 위 Aproject와 동일하기 때문에, 그 과정은 생략하겠다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2012.png" alt="Maven%20local%20repository%20jar/Untitled%2012.png"></p><p>위처럼 이름만 다른 Bproject를 생성했다. </p><p>그 다음에 Bproject의 pom.xml을 다음과 같이 수정해주자.</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Bproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Bproject<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>localrepository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/lib<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Aproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                org.example.App</span><br><span class="line">              <span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                $&#123;project.build.directory&#125;/lib</span><br><span class="line">              <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2013.png" alt="Maven%20local%20repository%20jar/Untitled%2013.png"></p><p>Aproject와 마찬가지로 jar 설정을 해준다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2014.png" alt="Maven%20local%20repository%20jar/Untitled%2014.png"></p><p>역시 Aproject와 마찬가지로 실행가능한 jar 생성을 위한 build plugin 설정도 추가해준다.</p><p>아래 부분이 실제 Maven에서 local repository를 설정하는 부분이다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2015.png" alt="Maven%20local%20repository%20jar/Untitled%2015.png"></p><p>id는 본인이 편한 고유값을 주면 된다.</p><p>url은 maven local repository의 jar 파일들이 있을 경로를 설정하는 부분이다.</p><p>관리하기 쉽게 위 처럼 basedir이라는 변수를 사용해서, 현재 프로젝트 root 경로에 lib 폴더를 설정했다.</p><p>이제 해야할 일은 Aproject에서 jar 파일과 pom 파일을 추출해야 한다.</p><p>Aproject로 돌아가서 jar파일과 pom파일을 추출하자.</p><h2 id="Maven-local-repository를-위한-jar-추출하기"><a href="#Maven-local-repository를-위한-jar-추출하기" class="headerlink" title="Maven local repository를 위한 jar 추출하기"></a>Maven local repository를 위한 jar 추출하기</h2><p><strong>Aproject</strong>에서 maven clean 후 maven install 을 하자.</p><p>maven install을 하면 해당 프로젝트를 빌드해서 현재 pc의 전역 메이븐 저장소에 저장하게 된다. </p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2016.png" alt="Maven%20local%20repository%20jar/Untitled%2016.png"></p><p>설치가 잘 되었는지 현재 pc의 메이븐 전역 저장소를 확인해보자.</p><p>윈도우 탐색기로 C:\Users\계정명.m2\repository 가면 메이븐 전역 저장소를 확인 할수 있다.</p><p>Aproject의 경로는 groupId와 artifactId 그리고 version 으로 경로가 조합되어 생선된다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2017.png" alt="Maven%20local%20repository%20jar/Untitled%2017.png"></p><p>해당 경로에 가보면 jar파일과 pom 파일이 생성된 것을 확인 할 수 있다.</p><p>위 Aproject 폴더를 통째로 복사하자.</p><p>그리고 Bproject 폴더로 이동해서 프로젝트 root 경로에 lib 폴더를 만들고 아래처럼 붙여넣자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2018.png" alt="Maven%20local%20repository%20jar/Untitled%2018.png"></p><p>그리고 Bproject의 pom.xml 에 아래처럼 해당 jar를 디펜던시로 추가해주자.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2019.png" alt="Maven%20local%20repository%20jar/Untitled%2019.png"></p><p>lib 폴더의 경로와 pom.xml의 dependency groupId, artifactId, version을 잘 맞쳐주어야 오류가 나지 않는다.</p><p>Bproject의 main 메소드에서 추가한 자르의 Aservice클래스를 가져와서 호출하는 코드를 추가하고 실행하면 아래처럼 정상 동작을 확인 할 수 있다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2020.png" alt="Maven%20local%20repository%20jar/Untitled%2020.png"></p><p>여기까지 해서 된다고 안심 하면 안된다. </p><p>사실 maven local repository 설정 없이, 전역 maven 저장소에 maven install 로 설치되어 있다면 위처럼 개발툴에서 코드상에서 해당 jar를 가져와서 호출이 가능하다.</p><p>하지만 maven local repository 설정이 없다면 Bproject를 maven package해서 생성한 jar를 실행할 경우, 해당 jar를 찾지 못하고 오류가 날 것이다.</p><p>아래가 maven local repository 설정없이 maven package했을때, 라이브러리를 찾지 못하고 오류가 난 상황이다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2021.png" alt="Maven%20local%20repository%20jar/Untitled%2021.png"></p><p>하지만 우리는 앞서</p><p>pom.xml에 서 아래처럼 maven local repository 경로를 설정했고</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2015.png" alt="Maven%20local%20repository%20jar/Untitled%2015.png"></p><p>또 아래처럼 Aproject의 install 결과물을 해당 경로에 이동 시켰으며</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2018.png" alt="Maven%20local%20repository%20jar/Untitled%2018.png"></p><p>pom.xml 에 아래처럼 해당 라이브러리를 추가했기 때문에</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2019.png" alt="Maven%20local%20repository%20jar/Untitled%2019.png"></p><p>Bproject를 maven package하여 생성한 jar를 실행 시켰을때, 아래처럼 정상동작하는 것을 확인 할수 있다.</p><p><img src="/images/2020/Maven-local-repository-jar/Untitled%2022.png" alt="Maven%20local%20repository%20jar/Untitled%2022.png"></p><p>끝!!!</p><h2 id="예제-github-경로"><a href="#예제-github-경로" class="headerlink" title="예제 github 경로"></a>예제 github 경로</h2><p><a href="https://github.com/hanumoka/20200124blog-maven-local-repository" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/hanumoka/20200124blog-maven-local-repository</a></p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://stackoverflow.com/questions/5692256/maven-best-way-of-linking-custom-external-jar-to-my-project" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/5692256/maven-best-way-of-linking-custom-external-jar-to-my-project</a></p><p><a href="https://okjsp.tistory.com/1165644118" target="_blank" rel="external nofollow noopener noreferrer">https://okjsp.tistory.com/1165644118</a></p><p><a href="https://denodo1.tistory.com/282" target="_blank" rel="external nofollow noopener noreferrer">https://denodo1.tistory.com/282</a></p><p><a href="https://blog.seotory.com/post/2016/03/maven-local-repository-setting" target="_blank" rel="external nofollow noopener noreferrer">https://blog.seotory.com/post/2016/03/maven-local-repository-setting</a></p><p><a href="https://yujuwon.tistory.com/entry/maven%EC%97%90-custom-jar%EB%A5%BC-%EC%A7%91%EC%96%B4%EB%84%A3%EC%96%B4-%EB%B3%B4%EC%9E%90" target="_blank" rel="external nofollow noopener noreferrer">https://yujuwon.tistory.com/entry/maven에-custom-jar를-집어넣어-보자</a></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> java </tag>
            
            <tag> local repository </tag>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React를 Nginx웹 서버에 배포하기</title>
      <link href="/2019/12/29/react-20191229-react-nginx-deploy/"/>
      <url>/2019/12/29/react-20191229-react-nginx-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>Create React App으로 배포 테스트용 React 프로젝트를 만들고, 빌드하여 배포하는 실습을 진행해보도록 하겠다.</p><p>실습 환경은 ubuntu 18.04 가상머신에서 진행하였으며, 기본적으로 nvm, node, npm(npx사용 가능한 버전)이 설치되어 있는 환경이다.</p><h1 id="Ubuntu에-설치된-Nginx에-React-배포"><a href="#Ubuntu에-설치된-Nginx에-React-배포" class="headerlink" title="Ubuntu에 설치된 Nginx에 React 배포"></a>Ubuntu에 설치된 Nginx에 React 배포</h1><p>ubuntu 18.04에 직접 설치된 Nginx 서버에 React를 배포해보자.</p><p>일단 현재 계정의 home 디렉토리에 examples 폴더를 만들고, 그 내부에서 create-react-app을 이용해서 배포할 리액트 프로젝트를 생성해보자.</p><h2 id="create-react-app으로-배포할-react-프로젝트-생성"><a href="#create-react-app으로-배포할-react-프로젝트-생성" class="headerlink" title="create-react-app으로 배포할 react 프로젝트 생성"></a>create-react-app으로 배포할 react 프로젝트 생성</h2><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled.png" alt="React%20Nginx/Untitled.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app myapp</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%201.png" alt="React%20Nginx/Untitled%201.png"></p><p>위처럼 원하는 경로에 배포 태스트할 react 프로젝트를 생성하자.</p><p>create-react-app으로 프로젝트 생성이 완료되면 다음 명령어로 동작을 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%202.png" alt="React%20Nginx/Untitled%202.png"></p><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%203.png" alt="React%20Nginx/Untitled%203.png"></p><p>위처럼 localhost:3000으로 접속해서 방금 생성한 react 프로젝트 실행을 확인 했다.</p><h2 id="react-프로젝트-build-하기"><a href="#react-프로젝트-build-하기" class="headerlink" title="react 프로젝트 build 하기"></a>react 프로젝트 build 하기</h2><p>생성된 react 프로젝트를 build 해보자.</p><p>create-react-app 으로 생성한 react 프로젝트는 기본적으로 webpack이라는 번들러를 통해서 빌드 결과물을 생성한다.</p><p>프로젝트 경로에서 아래 명령어를 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%204.png" alt="React%20Nginx/Untitled%204.png"></p><p>위처럼 react build가 진행되며 프로젝트 디렉토리 내부의 build 라는 폴더에 빌드 결과물이 생성된다.</p><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%205.png" alt="React%20Nginx/Untitled%205.png"></p><p>우리는 이 빌드 결과물이 있는 경로를 나중에 설정할 nginx라는 웹서버에게 알려줘야 한다.</p><p>정적인 웹을 위한 리소스를 번들링해주는 웹팩이라는 녀석은 정말 신기방기 한것 같다.</p><h2 id="ubuntu18-04에-nginx-설치하기"><a href="#ubuntu18-04에-nginx-설치하기" class="headerlink" title="ubuntu18.04에 nginx 설치하기"></a>ubuntu18.04에 nginx 설치하기</h2><p>이제 웹서비스를 위한 웹서버를 설치해보자. </p><p>다음 명령어로 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>설치가 완료되면 /etc/nginx 경로에 방금 설치된 nginx웹서버의 설정파일들이 생긴다. </p><h3 id="참고-Nginx-기본파일과-폴더들"><a href="#참고-Nginx-기본파일과-폴더들" class="headerlink" title="참고:Nginx 기본파일과 폴더들"></a>참고:Nginx 기본파일과 폴더들</h3><ul><li>sites-available : 가상 서버 환경들에 대한 설정 파일들이 위치하는 부분입니다. 가상 서버를 사용하거나 사용하지 않던간에 그에 대한 설정 파일들이 위치하는 곳이다.</li><li>sites-enabled : sites-available 에 있는 가상 서버 파일들중에서 실행시키고 싶은 파일을 symlink로 연결한 폴더입니다. 실제로 이 폴더에 위치한 가상서버 환경 파일들을 읽어서 서버를 세팅합니다.</li><li>nginx.conf  :  Nginx에 관한 설정파일로 Nginx 설정에 관한 블록들이 작성되어 있으며 이 파일에서 sites-enabled 폴더에 있는 파일들을 가져옵니다.</li></ul><p>그중 아래처럼 sites-available, sites-enabled 폴더를 수정하게 된다.</p><p>혹시 모르니 이 폴더들을 미리 백업해 놓자.</p><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%206.png" alt="React%20Nginx/Untitled%206.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F; &#x2F;etc&#x2F;nginx&#x2F;sites-available-origin</span><br><span class="line">sudo cp -r &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F; &#x2F;etc&#x2F;nginx&#x2F;sites-enabled-origin</span><br></pre></td></tr></table></figure><p>그 다음에 sites-available, sites-enabled 폴더 내부의 default 설정 파일들을 아래 명령어로 제거해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br><span class="line">sudo rm &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%207.png" alt="React%20Nginx/Untitled%207.png"></p><p>그리고 앞서 생성한 react 프로젝트의 build 결과물을 배포할 설정 파일을 생성하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myapp.conf</span><br></pre></td></tr></table></figure><p>그리고 내용을 아래처럼 채워준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    root   &#x2F;home&#x2F;hanumoka&#x2F;examples&#x2F;myapp&#x2F;build;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    try_files $uri &#x2F;index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 설정을 보면 해당 설정은 80포트로 서비스 한다는 것을 보여준다.</p><p>location /  이부분은 루트 진입시 설정이다.</p><p>root 설정은 앞서 생성한 react 프로젝트의 build 폴더 경로를 설정한다.</p><p>index 설정은 해당 폴더에서 redirect 할  index html 파일에 대한 설정이다. 앞 부터 우선순위가 있다.</p><p><strong>try_files  설정은 좀 중요해보인다.</strong> </p><p>nginx를 잘 써보지 않아 이번에 찾아 봤는데, react 프로젝트의 경우 페이지 라우팅을 react-router가 보통 하게 될것이다. </p><p>즉 index.html 자체에서 페이지 라우팅을 하는 것이다.</p><p>try_files  설정은 일종의 nginx 자체의 라우팅 설정이다. 보통 이 부분에서 특정 패턴의 url에 특정 파일등을 redirct 하는 설정을 한다. 만약 페이지를 못 찾을 경우 404 not found 설정등도 이곳에서 한다.</p><p>하지만 react 프로젝트인 경우, 웹서버에서 먼저 리퀘스트 url 을 가로채면 react-router의 기능을 사용할수 없게 된다.(vue등도 마찬가지일 것이다.)</p><p>따라서 위처럼 모든 request를 index.html로 곧장 가게 설정해 줘야 한다.</p><p>sites-available 폴더에 가상호스트 설정을 끝냈다. </p><p>하지만 이 설정만으로는 서비스가 동작하지 않는다. 방금 생성한 설정파일을 sites-enabled 폴더로 symlink해야 해당서비스가 활성화 되며 실제 서비스가 가능한 상태가 된다.</p><p>아래 명령어를 입력해서 site-enabled 폴더에 심볼릭 링크를 만들자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myapp.conf &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;myapp.conf</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%208.png" alt="React%20Nginx/Untitled%208.png"></p><p>위처럼 심볼릭 링크를 생성했다.</p><h2 id="Nginx를-재기동하고-동작을-확인보자"><a href="#Nginx를-재기동하고-동작을-확인보자" class="headerlink" title="Nginx를 재기동하고 동작을 확인보자."></a>Nginx를 재기동하고 동작을 확인보자.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%209.png" alt="React%20Nginx/Untitled%209.png"></p><p>위처럼 nginx를 재기동하고 동작을 확인했다.</p><p>(주의: ubuntu 방화벽에서 80포트를 허가 해야 외부에서 접근이 가능하다. 아래 명령어로 포트를 방화벽에서 허용 시킬수 있다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT 1 -p tcp --dport 80-j ACCEPT</span><br></pre></td></tr></table></figure><p>아래처럼 nginx에 react가 정상적으로 배포된 것을 알 수 있다.</p><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%2010.png" alt="React%20Nginx/Untitled%2010.png"></p><p>만약 아래처럼 nginx가 500 Internal Server Error 에러를 던진다면 /etc/nginx/sites-available/myapp.conf 파일에 문제가 있을 가능성이 있다.</p><p>내 경우 build 경로에 오타가 있을경우 500에러가 발생했다.</p><p><img src="/images/2019/20191229ReactNginxDeploy/Untitled%2011.png" alt="React%20Nginx/Untitled%2011.png"></p><p>해당 설정파일을 다시 확인하고, nginx 를 재부팅하니 정상동작했다.</p><p>끝!!!</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><strong>ubuntu에 create react app을 nginx로 배포하기</strong></p><p><a href="https://codechacha.com/ko/deploy-react-with-nginx/" target="_blank" rel="external nofollow noopener noreferrer">https://codechacha.com/ko/deploy-react-with-nginx/</a></p><p><strong>create react app을 nginx 도커나이즈 배포하기</strong></p><p><a href="https://codechacha.com/ko/dockerizing-react-with-nginx/" target="_blank" rel="external nofollow noopener noreferrer">https://codechacha.com/ko/dockerizing-react-with-nginx/</a></p><p><strong>nginx에러 로그 확인</strong></p><p><a href="https://annajinee.tistory.com/17" target="_blank" rel="external nofollow noopener noreferrer">https://annajinee.tistory.com/17</a></p><p><strong>nginx try_files 설정</strong></p><p><a href="https://stackoverflow.com/questions/43951720/react-router-and-nginx" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/43951720/react-router-and-nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
            <tag> nginx </tag>
            
            <tag> ubuntu </tag>
            
            <tag> react </tag>
            
            <tag> react-create-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04 포트 확인 및 열기</title>
      <link href="/2019/12/28/ubuntu-20191228-ubuntu-open-port/"/>
      <url>/2019/12/28/ubuntu-20191228-ubuntu-open-port/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>ubuntu 에서 열려 있는 포트를 확인하고, 원하는 포트를 열어보자.</p><h1 id="포트열기"><a href="#포트열기" class="headerlink" title="포트열기"></a>포트열기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면,  열려 있는 모든 포트를 확인 한다.</p><p><img src="/images/2019/20191228ubuntu1804openport/Untitled.png" alt="ubuntu18%2004/Untitled.png"></p><p>상당히 많은 정보를 보여준다. </p><p>뭔가 시스템에서 내부적으로 점유하고 있는 포트가 많은것 같다.</p><p>리스트 최 상단 부분에 현재 22포트가 열려 있는 것을 확인 할 수 있다.</p><p>아래 명령어로 현재 LISTEN 중인 포트만 추려서 볼 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap | grep LISTEN</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191228ubuntu1804openport/Untitled%201.png" alt="ubuntu18%2004/Untitled%201.png"></p><p>인터넷을 찾아보면 아래처럼 특정 포트의 상태를 확인하라고 나오는데, 사실 불필요한 정보가 너무 많이 보이기는 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap | grep 22</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191228ubuntu1804openport/Untitled%202.png" alt="ubuntu18%2004/Untitled%202.png"></p><p>이번에는 원하는 포트를 방화벽에서 열어보자.</p><p>3000, 4000 번 포트를 다음과 같이 열었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT 1 -p tcp --dport 3000 -j ACCEPT</span><br><span class="line">sudo iptables -I INPUT 1 -p tcp --dport 4000 -j ACCEPT</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191228ubuntu1804openport/Untitled%203.png" alt="ubuntu18%2004/Untitled%203.png"></p><p>포트가 재대로 열렸는지 확인을 위해, 3000포트를 사용하는 react 프로젝트를 돌렸다.</p><p>아래처럼 정상적으로 포트가 열려서, 외부에서 접근이 가능한 것을 확인 할 수 있다. (로컬 버추얼박스 우분투를 사용한 것이라 브라우저에서 localhost로 접근했지만, 외부에서 접근한 것이다.)</p><p><img src="/images/2019/20191228ubuntu1804openport/Untitled%204.png" alt="ubuntu18%2004/Untitled%204.png"></p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://server-engineer.tistory.com/418" target="_blank" rel="external nofollow noopener noreferrer">https://server-engineer.tistory.com/418</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> port </tag>
            
            <tag> ubuntu </tag>
            
            <tag> iptables </tag>
            
            <tag> netstat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04 Create react app 개발 환경</title>
      <link href="/2019/12/28/ubuntu-20191228-ubuntu-create-react-app/"/>
      <url>/2019/12/28/ubuntu-20191228-ubuntu-create-react-app/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>ubuntu 18.04 에 NVM, node, npm 을 설치하고 react 를 개발할수 있는 create react app을 설치해보자.</p><h1 id="NVM-설치하기"><a href="#NVM-설치하기" class="headerlink" title="NVM 설치하기"></a>NVM 설치하기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.11&#x2F;install.sh -o install_nvm.sh</span><br></pre></td></tr></table></figure><p>위 명령어를 이용해서 nvm 설치스크립트를 다운로드 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install_nvm.sh</span><br></pre></td></tr></table></figure><p>위 명령어를 이용해서 다운로드한 nvm 설치 스크립트를 실행 시킨다.</p><p>설치 스크립트가 실행되면서 export명령이 자동으로 동작하여 nvm에 필요한 환경변수를 설정해 준다. </p><p>아래 명령어로 os 가 리부트 되도 환경변수가 유지되게 설정하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.profile</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191218Ubuntu1804Createreactapp/Untitled.png" alt></p><p>아래 명령어를 사용하면 이제 nvm으로 사용가능한 node 버전이 리스트로 출력된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><p><img src="/images/2019/20191218Ubuntu1804Createreactapp/Untitled%201.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 12.14.0</span><br></pre></td></tr></table></figure><p>2019.12.28 기준으로 node 12.14.0이 최신 LTS라고 나온다.</p><p>위 명령으로 원하는 버전의 node를 설치하자.</p><p>아래처럼 node와 npm이 설치된 것을 확인할 수 있다.</p><p><img src="/images/2019/20191218Ubuntu1804Createreactapp/Untitled%202.png" alt></p><h1 id="Create-react-app-설치"><a href="#Create-react-app-설치" class="headerlink" title="Create react app 설치"></a>Create react app 설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app test-react-project</span><br></pre></td></tr></table></figure><p>위 명령어를 이용해서 create-react-app을 전역에 설치하고 react 프로젝트를 생성 할수 있지만, 아래의 npx 명령으로 create-react-app을 이용해서 react 프로젝트를 만들기를 추천한다.</p><p>NPM 5.2 버전 이후 NPX라는 node.js package 메니저를 이용해서 create-react-app을 실행할 수도 있다.</p><p>npx 명령어는 npm의 진화형태라고 보면된다. </p><p>속도도 npm보다 빠르다고 하며, 필요한 패키지를 전역에 설치하지 않고 필요할때 최신 패키지를 임시로 받아와서 설치해서 사용하게 된다.</p><p>npm 을 사용할 경우 글로벌 모듈이 혼잡해지는 것을 npx로 해결한다고 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app test-react-project</span><br></pre></td></tr></table></figure><p>생성된 프로젝트에 진입해서 react를 실행시키자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd test-react-project</span><br><span class="line">npm</span><br></pre></td></tr></table></figure><p>프로젝트가 실행되면 <a href="http://localhost:3000/" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/</a> 로 접속해서 확인해 볼 수 있다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><strong>ubuntu create-react-app 설치</strong></p><p><a href="https://www.techomoro.com/how-to-install-and-setup-a-react-app-on-ubuntu-18-04-1/" target="_blank" rel="external nofollow noopener noreferrer">https://www.techomoro.com/how-to-install-and-setup-a-react-app-on-ubuntu-18-04-1/</a></p><p><strong>npx 설명</strong></p><p>[<a href="https://ljh86029926.gitbook.io/coding-apple-react/undefined/npm-npx]" target="_blank" rel="external nofollow noopener noreferrer">https://ljh86029926.gitbook.io/coding-apple-react/undefined/npm-npx]</a>(</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> node </tag>
            
            <tag> nvm </tag>
            
            <tag> create-react-app </tag>
            
            <tag> npx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04 NVM으로 NODE 설치하기</title>
      <link href="/2019/12/28/ubuntu-20191228-ubuntu-install-nvm/"/>
      <url>/2019/12/28/ubuntu-20191228-ubuntu-install-nvm/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>ubuntu18.04에 NVM으로 Node를 설치해보겠다.</p><p>ubuntu에 node를 설치해보신 분들을 알겠지만, 이게 여간 귀찮은 것이 아니다.</p><p>ubuntu에 패키지 메니저인 apt로 node를 설치할경우 2019.12.28 현재 기준으로 node 8버전을 설치시켜준다. ㅡㅡ;;;;;</p><p>물론 최신 버전을 설치할 수 있지만, 리눅스에서는 NVM(Node Versioin Manager)를 이용해서, 동시에 여러개의 node를 설치하고 상황에 따라서 원하는 버전을 선택해서 사용할 수 있다.</p><h1 id="NVM-설치하기"><a href="#NVM-설치하기" class="headerlink" title="NVM 설치하기"></a>NVM 설치하기</h1><pre><code>curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh -o install_nvm.sh</code></pre><p>위 명령어를 이용해서 nvm 설치스크립트를 다운로드 한다.</p><pre><code>bash install_nvm.sh</code></pre><p>위 명령어를 이용해서 다운로드한 nvm 설치 스크립트를 실행 시킨다.</p><p>설치 스크립트가 실행되면서 export명령이 자동으로 동작하여 nvm에 필요한 환경변수를 설정해 준다. </p><p>아래 명령어로 os 가 리부트 되도 환경변수가 유지되게 설정하자.</p><pre><code>source ~/.profile</code></pre><p><img src="/images/2019/20191228Ubuntu1804NVMNODE/Untitled.png" alt="Ubuntu18%2004%20NVM%20NODE/Untitled.png"></p><p>아래 명령어를 사용하면 이제 nvm으로 사용가능한 node 버전이 리스트로 출력된다.</p><pre><code>nvm ls-remote</code></pre><p><img src="/images/2019/20191228Ubuntu1804NVMNODE/Untitled%201.png" alt="Ubuntu18%2004%20NVM%20NODE/Untitled%201.png"></p><pre><code>nvm install 12.14.0</code></pre><p>2019.12.28 기준으로 node 12.14.0이 최신 LTS라고 나온다.</p><p>위 명령으로 원하는 버전의 node를 설치하자.</p><p>아래처럼 node와 npm이 설치된 것을 확인할 수 있다.</p><p><img src="/images/2019/20191228Ubuntu1804NVMNODE/Untitled%202.png" alt="Ubuntu18%2004%20NVM%20NODE/Untitled%202.png"></p><p>끝!!!</p><p>NVM에 더 자세한 사용법등을 알고 싶다면, 아래 참고자료를 살피길 바란다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04" target="_blank" rel="external nofollow noopener noreferrer">https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> node </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OBS Studio 디스플레이 캡쳐 검은화면 설정</title>
      <link href="/2019/12/28/obsStudio-20191228-OBSstudio-nvidia-setting/"/>
      <url>/2019/12/28/obsStudio-20191228-OBSstudio-nvidia-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="문제발생"><a href="#문제발생" class="headerlink" title="문제발생"></a>문제발생</h1><p>나는 코딩 테스트나 개발환경 셋팅을 할때, 그것들을 기록하고 싶은경우 OBS Studio 라는 화면 녹화 프로그램을 사용한다.</p><p>노트북에서 OBS Studio를 잘 쓰다가, 뭔가 업데이트(Windows인지, Nvidia인지 모르겠지만)된 뒤로 갑작이 OBS Studio의 디스플레이 캡쳐가 검은 화면으로 나오면서, 녹화시에 검은 화면만 녹화가 되었다.</p><p>참고로 특정 Window 화면 녹화는 정상적으로 되었다.</p><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p>내 경우에는 다음과 같은 방법으로 문제를 해결 했다.</p><p>만약 OBS studio가 실행중이라면 일단 종료를 시킨다.</p><p>그리고 바탕화면에서 마우스 우클릭으로 NVIDIA 제어판으로 들어간다.</p><p><img src="/images/2019/20191228OBSStudio/Untitled.png" alt="설정1"></p><p>열린 NVIDIA 제어판에서 3D 설정 - 3D설정 관리로 화면 진입후 프로그램 설정 탭을 선택한다.</p><p>내 경우에는 1.사용자 정의할 프로그램 선택에 OBS Studio가 이미 등록이 되어 있었으나, 만약 없다면 추가 버튼으로 OBS Studio를 추가해 준다.</p><p>그리고 2.이 프로그램에 대한 기본 그래픽 프로세서 선택에서 통합 그래픽을 선택하고 적용버튼을 클릭해서 설정을 저장한다.</p><p>이 설정으로 나는 문제를 해결 했다.</p><p><img src="/images/2019/20191228OBSStudio/Untitled%201.png" alt="설정2"></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> OBSstudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OBSstudio </tag>
            
            <tag> 디스플레이캡쳐 </tag>
            
            <tag> 검은화면 </tag>
            
            <tag> 검은색 </tag>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch-hello-Elasticsearch</title>
      <link href="/2019/12/25/elasticsearch-20191225-Elasticsearch-hello-Elasticsearch/"/>
      <url>/2019/12/25/elasticsearch-20191225-Elasticsearch-hello-Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="엘라스틱서치-입문과-활용"><a href="#엘라스틱서치-입문과-활용" class="headerlink" title="엘라스틱서치 입문과 활용"></a>엘라스틱서치 입문과 활용</h1><h2 id="1-엘라스틱-서치-개요"><a href="#1-엘라스틱-서치-개요" class="headerlink" title="1.엘라스틱 서치 개요"></a>1.엘라스틱 서치 개요</h2><h3 id="1-1-엘라스틱-서치란"><a href="#1-1-엘라스틱-서치란" class="headerlink" title="1-1.엘라스틱 서치란"></a>1-1.엘라스틱 서치란</h3><p>우리는 지금 정보의 홍수 속에 살고 있다. 매일 매초 인터넷에 연결된 수없이 많은 시스템으로부터 헤아릴 수 없을 만큼 많은 데이터가 쏟아져 나오고 있으며, 이 데이터로부터 의미 있고 가치 있는 정보를 뽑아내기 위한 시스템 또한 수도 없이 개발되고 있다. </p><p>특히 SNS와 각종 포털 사이트에서 사용자의 활동 정보 등에 대한 대용량 데이터의 실시간 분석 기술은 <strong>빅데이터</strong>라는 이름의 트렌드로 자리 잡으며 수많은 업체와 정부 기관에 데이터 활용의 새 지평을 열었다.</p><p>이와 같은 정보의 홍수속에서 필요로 하는 정확한 데이터를 검색하여 찾는 기술은 무엇보다 중요해 졌다. 데이터를 검색하는데 있어 전 세계적으로 가장 널리 사용되고 있는 기술중 하나가 바로 아파치 루씬(Apache Lucene)이다. </p><p>자바로 개발된 루씬은 오픈소스로 현재 아파치 Top 레벨 프로젝트로 등록돼 있다.</p><p>루씬은 강력한 검색 기능이 있지만, 완전한 솔루션이 아닌 라이브러리로 제공되기 대문에 개인이나 기업에서 실제로 사용혀려면 루씬 라이브러리를 이용해 검색 솔루션을 스스로 개발해야 한다.</p><p>아파치 루씬 라이브러리를 실무에 사용하기 위해 티카(Tica), 솔라(Solr)등의 솔루션이 개발되어 있는데 가장 <strong>최근에 개발돼 선풍적인 인기를 끌고 있는 솔루션이 바로 엘라스틱 서치이다.</strong></p><p>엘라스틱서치는 샤이 배논(Shay Bannon)이 개발했으며 현재 오픈소스 프로젝트로 진행되고 있다. </p><p>엘라스틱 서치를 이용하여 분산환경에서의 병렬 처리와 실시간 검색을 지원하고, 확장성이 뛰어난 대규모 시스템을 쉽게 구축할 수 있다.</p><p><strong>엘라스틱 서치를 요약하자면, 빅데이터(비정형데이터)로부터 원하는 데이터를 검색하기 위한 검색엔진 솔루션이라고 할수 있다.</strong></p><h3 id="1-2-용어-정리를-통한-엘라스틱서치의-이해"><a href="#1-2-용어-정리를-통한-엘라스틱서치의-이해" class="headerlink" title="1-2. 용어 정리를 통한 엘라스틱서치의 이해"></a>1-2. 용어 정리를 통한 엘라스틱서치의 이해</h3><p>네이버나 구글에서 제공하는 다양한 서비스는 일상에서 빼놓을 수 없는 서비스로 자리매김했다.</p><p>그중에서도 사용자가 원하는 검색어에 대한 결과를 제공하는 검색 서비스가 가장 많이 사용되고 있다.</p><p>그리고 이러한 검색 서비스를 부르는 용어도 다양하다.</p><p><strong>검색엔진</strong>, <strong>검색시스템</strong>, <strong>검색서비스</strong> 등의 용어가 대표적인데 무언가 비슷하면서도 다른 듯한 알쏭달쏭한 느낌이 든다. </p><p>먼저 <strong>검색엔진(Search engine)</strong>은 광활한 데이터에서 원하는 검색결과는 제공하는 프로그램이다.</p><p>검색엔진은 검색 결과로 제공되는 데이터의 특성에 따라 구현 형태가 각각 달라진다.</p><p>검색 역사에 한 획을 그은 야후(Yahoo)는 디렉터리 기반의 검색 결과를 세계 최초로 제공했다.</p><p>이를 바탕으로 요즘에는 뉴스, 블로그, 카페 등 대범주에 따른 카테고리별 검색결과를 대부분의 검색 업체에서 제공하고 있다.</p><p><strong>검색 시스템(Search system)</strong>은 대용량 데이터를 기반으로 신뢰성 있는 검색 결과를 제공하기 위해 검색엔진을 기반으로 구축된 시스템을 통칭하는 용어다.</p><p>수집기를 이용해 방대한 데이터를 수집하고 이를 다수의 검색엔진을 이용해 색인하고 검색결과를 UI로 제공한다. </p><p>시스템 내부의 정책에 따라 관련도가 다수 높은 문서를 검색 결과의 상위에 배치할 수 있을뿐더러 특정 필드나 문서에 가중치를 둬서 검색의 정확도를 높일 수도 있다.</p><p><strong>검색 서비스(search service)</strong>는 검색엔진을 기반으로 구축한 검색 시스템을 활용해 검색 결과를 서비스로 제공한다.</p><p>엄밀히 말하자면 <strong>엘라스틱서치는 검색엔진</strong>으로 분류 할 수 있다.</p><p>그리고 <strong>ELK스택을 활용하여 검색엔진보다 더 큰 검색시스템</strong>을 구성 할수 있다.</p><pre><code>검색 서비스(ex:google, naver ) &gt; 검색 시스템(ex: ELK스택) &gt; 검색엔진(ex: 엘라스틱 서치)</code></pre><h3 id="1-3-검색-시스템의-구성-요소"><a href="#1-3-검색-시스템의-구성-요소" class="headerlink" title="1-3. 검색 시스템의 구성 요소"></a>1-3. 검색 시스템의 구성 요소</h3><p>이번에는 검색시스템의 구성요소를 통해 엘라스틱서치를 알아보자.</p><p>검색 시스템의 기본 구조는 개발사에 따라 서로 조금씩 다르지만 기본 구조는 같다. </p><p>일반적으로 정보를 수집하는 수집기, 수집한 데이터를 저장하는 스토리지, 수집한 데이터를 검색에 적절한 형태로 변환하는 색인기, 색인된 데이터에서 일치하는 문서를 찾는 검색기로 구성된다.</p><p><strong>수집기</strong></p><p>수집기는 웹사이트, 블로그, 카페 등 웹에서 필요한 정보를 수집하는 프로그램이다.</p><p>크롤러(Crawler), 스파이더(Spider), 웜(Worms), 웹 로봇(Web Robot) 등으로도 불린다.</p><p>파일, 데이터베이스, 웹페이지 등 웹상의 대부분의 정보가 수집대상이다.</p><p>파일의 경우 수집기가 파일명, 파일 내용, 파일 경로 등의 정보를 수집하고 저장하면 검색엔진이 저장된 정보를 검색하고, 사용자 질의에 답한다.</p><p><strong>스토리지</strong></p><p>데이터베이스에서 데이터를 저장하는 물리적인 저장소다. 검색엔진은 색인한 데이터를 스토리지에 보관한다.</p><p><strong>색인기</strong></p><p>검색엔진이 수집한 정보에서 사용자 질의와 일치하는 정보를 찾으려면 수집된 데이터를 검색 가능한 구조로 가공하고 저장해야 한다.</p><p>그 역할을 하는 것이 색인기다.</p><p>색인기는 다양한 형태로 분석을 조합해 정보에서 의미가 있는 용어를 추출하고 검색에 유리한 역색인 구조로 데이터를 저장한다.</p><p><strong>검색기</strong></p><p>검색기는 사용자 질의를 입력받아 색인기에서 저장한 역색인 구조에서 일치하는 문서를 찾아 결과로 반환한다.</p><p>질의와 문서가 일치하는지 유사도 기반의 검색 순위 알고리즘으로 판단한다.</p><p>검색기 또한 색인기와 마찬가지로 현태로 분석기를 이용해 사용자 질의에서 유의미한 용어를 추출해 검색한다.</p><p>따라서 사용하는 형태로 분석기에 따라 검색 품질이 달라진다.</p><p><img src="/images/2019/Hello%20ElasticSearch/1.png" alt="Hello%20ElasticSearch/1.png"></p><p>엘라스틱서치는 위 검색시스템 구성요소 중 색인기, 스토리지, 검색기를 포함하고 있다.</p><h3 id="1-4-관계형-데이터베이스와-엘라스틱서치의-차이점"><a href="#1-4-관계형-데이터베이스와-엘라스틱서치의-차이점" class="headerlink" title="1-4. 관계형 데이터베이스와 엘라스틱서치의 차이점"></a>1-4. 관계형 데이터베이스와 엘라스틱서치의 차이점</h3><p>검색엔진을 설명할 때 항상 비교되는 것이 관계형 데이터베이스(RDMBS)다.</p><p>두 가지 모두 질의와 일치하는 데이터를 찾아 사용자에게 제공한다는 점에서 유사점이 많이 때문이다.</p><p>하지만 관계형 데이터베이스로 검색 기능을 제공하는 데는 많은 문제점이 있다.</p><p>관계형 데이터베이스의 어떠한 한계 때문에 검색엔진이 등장하게 됐는지, 그리고 이 둘은 어떤 점에서 차이점이 있는지 살펴보자.</p><p>데이터베이스는 데이터를 통합 관리하는 데이터의 집합이다. 저장방식에 따라 크게 관계형 또는 계층형 데이터베이스로 나뉜다.</p><p>모든 데이터는 중복을 제거하고 정형 데이터로 구조화해 행과 열로 구성된 테이블에 저장된다.</p><p>SQL문을 이용해 원하는 정보의 검색이 가능한데 텍스트 매칭을 통한 단순한 검색만 가능하다.</p><p>텍스트를 여러 단어로 변형하거나 여러 개의 동의어나 유의어를 활용한 검색은 불가능하다.</p><p>반면 검색엔진은 데이터베이스에서 불가능한 비정형 데이터를 색인하고 검색할 수 있다.</p><p>형태소 분석을 통해 사람이 구사하는 자연어의 처리가 가능해지고 역색인 구조를 바탕으로 빠른 검색 속도를 보장한다.</p><p><strong>엘라스틱서치와 관계평 데이터베이스 비교</strong></p><table><thead><tr><th align="left">엘라스틱서치</th><th align="left">관계형 데이터베이스</th></tr></thead><tbody><tr><td align="left">인덱스(Index)</td><td align="left">데이터베이스(Database)</td></tr><tr><td align="left">샤드(Shard</td><td align="left">파티션(Partition)</td></tr><tr><td align="left">타입(Type)</td><td align="left">테이블(Table)</td></tr><tr><td align="left">문서(Document)</td><td align="left">행(Row)</td></tr><tr><td align="left">필드(Field)</td><td align="left">열(Column)</td></tr><tr><td align="left">매핑(Mapping)</td><td align="left">스키마(Schema)</td></tr><tr><td align="left">Query DSL</td><td align="left">SQL</td></tr></tbody></table><p>위 표는 검색엔진의 대표 자자격인 엘라스틱서치와 관계형 데이터베이스의 주요 개념을 비교해 보여준다.</p><p>엘라스틱서치의 인덱스는 관계형 데이터베이스의 데이터베이스와 비슷한 문서의 모음을 뜻한다.</p><p>엘라스틱서치의 타입은 데이터베이스의 테이블과 같은 역을 한다. </p><p>6.0 이하 버전에서는 하나의 인덱스 내부에 기능에 따라 데이터를 분류하고 여러 개의 타입을 만들어 사용했지만 현재(7버전)는 하나의 인덱스에 하나의 타입만을 구성하도록 바뀌었다.</p><p>엘라스틱서치는 하나의 행을 문서라고 부르며, 해당 문서는 데이터베이스 테이블의 한 행을 의미한다.</p><p>또한 엘라스틱서치의 매핑은 필드의 구조와 제약조건에 대한 명세를 말하며 이에 대응하는 관계형 데이터베이스의 개념을 스키마라 한다.</p><p>관계형 데이터베이스와 엘라스틱서치는 인덱스라는 개념을 다르게 사용한다.</p><p>엘라스틱서치의 인덱스는 Database, 앞에 설명했지만 관계형 데이터베이스에서의 인데스는 WHERE 절의 쿼리와 JOIN을 빠르게 만드는 보조 데이터 도구로 사용된다.</p><p>엘라스틱서치와 데이터베이스는 데이터의 추가, 수정, 삭제 방식에도 차이가 있다. </p><p>엘라스틱서치는 기본적으로 HTTP를 통해 JSON 형식의 RESTful API를 이용한다.</p><p>엘라스틱서치는 자바로 개발 됐지만 여러 가지 프로그래밍 언어를 통해 사용할 수도 있다.</p><p><strong>Copy of 추가, 검색, 삭제, 수정 기능 비교</strong></p><table><thead><tr><th align="left">엘라스틱서치에서 사용하는 HTTP 메소드</th><th align="left">기능</th><th align="left">데이터베이스 질의 문법</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">데이터조회</td><td align="left">SELECT</td></tr><tr><td align="left">PUT</td><td align="left">데이터생성</td><td align="left">INSERT</td></tr><tr><td align="left">POST</td><td align="left">인덱스 업데이트, 데이터조회</td><td align="left">UPDATE, SELECT</td></tr><tr><td align="left">DELETE</td><td align="left">데이터삭제</td><td align="left">DELETE</td></tr><tr><td align="left">HEAD</td><td align="left">인덱스정보확인</td><td align="left">-</td></tr></tbody></table><h3 id="1-5-엘라스틱서치의-특징"><a href="#1-5-엘라스틱서치의-특징" class="headerlink" title="1-5. 엘라스틱서치의 특징"></a>1-5. 엘라스틱서치의 특징</h3><p>요즘에는 대량의 데이터를 빠르게 검색하기 위해 NoSQL(No Structured Query Language)를 많이 사용한다.</p><p>엘라스틱서치 NoSQL의 일종으로서 분류가 가능하고 부산 처리를 통해 실시간에 준하는 빠른 검색이 가능하다.</p><p>기존 데이터베이스로는 처리하기 어려운 대량의 비정형 데이터도 검색할 수 있으며, 전문검색(Full Text)과 구조 검색 모두를 지원한다. </p><p>기본적으로는 검색엔진이지만 MongoDB나 Hbase처럼 대용량 스토리지로도 활용할 수 있다.</p><h3 id="1-5-1-엘라스틱서치의-강점"><a href="#1-5-1-엘라스틱서치의-강점" class="headerlink" title="1-5-1. 엘라스틱서치의 강점"></a>1-5-1. 엘라스틱서치의 강점</h3><p><strong>오픈소스 검색엔진</strong></p><p>엘라스틱서치는 아파치 재단의 루씬(Lucene)을 기반으로 개발된 오픈소스 검색엔진이다.</p><p>따라서 전 세계에서 수많은 사람들이 사용하고 있으며, 버그가 발생할 경우에도 대부분 빠르게 해결된다.</p><p>현재 약 2억 5천만 번 이상 다운로드됐는데, 이 수치만 보더라도 얼마나 많은 사람들이 사용하고 있는지 알 수 있다.</p><p>다운로드가 많이 일어난다는 것은 프로젝트가 많이 활성화돼 있다는 것을 의미한다.</p><p><strong>전문검색</strong></p><p>PostgreSQL, MongoDB 같은 대부분의 데이터베이스는 기본 쿼리 및 색인 구조의 한계로 인해 기본적인 텍스트 검색 기능만 제공한다.</p><p>하지만 엘라스틱서치는 좀 더 고차원적인 전문검색(Full Text)이 가능하다.</p><p>전문검색이란 내용 전체를 색인해서 특정 단어가 포함된 문서를 검색하는 것을 말한다.</p><p>기존 관계형 데이터베이스는 전문 검색에 적합하지 않지만 엘라스틱서치는 다양한 기능별, 언어별 플러그인을 조합해 빠르게 검색할 수 있다.</p><p><strong>통계분석</strong></p><p>비정형 로그 데이터를 수집하고 한곳에 모아 통계 분석을 할 수 있다.</p><p>엘라스틱서치와 키바나(Kibana)를 연결하면 실시간으로 쌓이는 로그를 시각화하고 분석할 수 있다.</p><p><strong>스키마리스(Schemaless)</strong></p><p>데이터베이스는 스키마라는 구조에 따라 데이터를 적합한 형태로 변경해서 저장하고 관리한다.</p><p>반면 엘라스틱서치는 정형화되지 않은 다양한 형태의 문서도 자동으로 색인하고 검색할 수 있다.</p><p><strong>RESTful API</strong></p><p>엘라스틱서치는 HTTP 기반의 RESTful API를 지원하고 요청뿐 아니라 응답에도 JSON 형식을 사용해 개발 언어, 운영체제, 시스템에 관계없이 이기종 플랫폼에서도 이용 가능하다.</p><p><strong>멀티테넌시(Multi-tenancy)</strong></p><p>서로 상이한 인덱스일지라도 검색할 필드명만 같으면 여러 개의 인덱스를 한번에 조회할 수 있다.</p><p>이를 이용해 멀티테넌시 기능을 제공할 수 있다.</p><p><strong>Document-Oriented</strong></p><p>여러 계층의 데이터를 JSON 형식의 구조화된 문서로 인덱스에 저장할 수 있다.</p><p>계층 구조로 문서도 한번의 쿼리로 쉽게 조회할 수 있다.</p><p><strong>역색인(Inverted Index)</strong></p><p>앞서 언급했듯이 엘라스틱서치는 루씬 기반의 검색엔진이다. 따라서 엘라스틱서치 또한 역색인을 지원한다.</p><p>반면 MongoDB, 카산드라(Cassandra)같은 일반적인 NoSQL은 역색인을 지원하지 않는다.</p><p>이는 다른 NoSQL 대비 엘라스틱서치의 매우 큰 장점이라 할 수 있다. </p><p><img src="/images/2019/Hello%20ElasticSearch/KakaoTalk_20191204_215703353.png" alt="Hello%20ElasticSearch/KakaoTalk_20191204_215703353.png"></p><p>색인:책의 목차와 같다.</p><p><img src="/images/2019/Hello%20ElasticSearch/KakaoTalk_20191204_215708663.png" alt="Hello%20ElasticSearch/KakaoTalk_20191204_215708663.png"></p><p>역색인:책의 뒷부분에 중요한 키워드로 페이지를 찾을수 있다.</p><p><strong>확장성과 가용성</strong></p><p>10억 개의 문서를 색인한다고 가정해보자. 모든 문서를 색인하는 데 막대한 비용과 시간이 드는 것은 불보듯 뻔하나.</p><p>하지만 엘라스틱서치를 분산 구성해서 확장한다면 대량의 문서를 좀 더 효율적으로 처리할 수 있다.</p><p>분산 환경에서 데이터는 샤드(Shard)라는 작은 단위로 나뉘어 제공되며, 인덱스를 만들 때마다 샤드의 수를 조절할 수 있다.</p><p>이를 통해 데이터의 종류와 성격에 따라 데이터를 분선해서 빠르게 처리할 수 있다.</p><h3 id="1-5-2-엘라스틱서치의-약점"><a href="#1-5-2-엘라스틱서치의-약점" class="headerlink" title="1-5-2. 엘라스틱서치의 약점"></a>1-5-2. 엘라스틱서치의 약점</h3><p>마법주문처럼 보이는 엘라스틱서치도 약점이 있다.</p><p>첫째, <strong>실시간</strong>이 아니다. 일반적으로 색인된 데이터는 통상적으로 1초 뒤에나 검색이 가능해진다.</p><p>색인된 데이터는 내부적으로 커밋(Commit)과 플러쉬(Flush)같은 복잡한 과정을 거치기 때문에 실시간이 아니다.</p><p>엄밀히 따지자면 준 실시간(Near Realtime)이라고 할 수 있다.</p><p>둘째, 트랜잭션과 롤백 기능을 제공하지 않는다. 엘라스틱서치는 기본적으로 분산 시스템으로 구성된다. 전체적인 클러스터의 성능 향상을 위해 시스템적 비용 소모가 큰 롤백(Rollback)과 트랜젝션(Transaction)을 지원하지 않기 때문에 최악의 경우 데이터 손실의 위험이 있다.</p><p>셋째, 데이터의 업데이트를 제공하지 않는다. 엄밀히 말하자면 엘라스틱서치는 업데이트 명령이 요청될 경우 기존 문서를 삭제하고 변경된 내용으로 새로운 문서를 생성하는 방식을 사용한다.</p><p>이러한 이유로 단순 업데이트에 비해서는 상대적으로 많은 비용이 발생한다.</p><p>하지만 이것은 큰 단점은 아니다. 이를 통해 불변적(Immutable)이라는 이점을 취할 수 있기 때문이다.</p><h3 id="1-6-엘라스틱서치-사용사례"><a href="#1-6-엘라스틱서치-사용사례" class="headerlink" title="1-6.엘라스틱서치 사용사례"></a>1-6.엘라스틱서치 사용사례</h3><ul><li>위키피디아(Wikipedia)는 엘라스틱서치를 이용해 전문검색(Full Text Search)를 수행하고 실시간 타이핑 검색, 추천검색어 기능등에 활용 중이다.</li><li>더 가디언(The Guardian)지는 방문객의 로그 분석을 통한 소셜 데이터를 생성해 실시간 응대와 기사에 대한 반응 분석등에 엘라스틱서치를 사용하고 있다.</li><li>스택오버플로어(StackOverflow)에서는 검색 내용과 결과를 통합해 유사한 질문과 해답을 연결하는 데 엘라스틱서치를 활용하고 있다.</li><li>깃허브(Github)에서는 1,300억 줄이 넘는 소스코드를 검색하는 데 엘라스틱서치를 사용중이다.</li><li>골드만 삭스(Goldman Sachs)에서는 매일 5TB가 넘는 데이터를 저장하고 있으며, 엘라스틱서치를 이용해 이 데이터를 주식 시장의 변동을 분석하는데 사용한다.</li></ul><h2 id="2-엘라스틱서치-검색원리-분석과-역색인"><a href="#2-엘라스틱서치-검색원리-분석과-역색인" class="headerlink" title="2.엘라스틱서치 검색원리(분석과 역색인)"></a>2.엘라스틱서치 검색원리(분석과 역색인)</h2><p>엘라스틱서치에서 입력된 데이터를 통해 검색어를 추출하기 위한 프로세스를 거치는데 이 과정을 분석(Analysis)이라고 한다. </p><p>이때 분석 과정에서 사용하는 프로그램을 분석기-애널라이저(Analyzer)라고 하며 분석기는 하나의 토크나이저(Tokenizer)와 0개 또는 1개 이상의 토큰필터(Token Filter)로 구성돼 있다.</p><p>토크나이저는 입력 데이터를 토크나이저에 설정된 기준에 따라 검색어 토큰으로 분리하는 작업을 한다.</p><p>토큰 필터는 토크나이저로 분리된 토큰들에 다시 필터를 적용해서 실제로 검색에 쓰이는 검색어들로 최종 변환하는 작업을 한다.</p><p>엘라스틱 서치에서는 내부적으로 다양한 분석기를 가지고 있으며, 자신만의 분석기를 생성해서 적용할 수도 있다.</p><h3 id="2-1-분석과정"><a href="#2-1-분석과정" class="headerlink" title="2-1. 분석과정"></a>2-1. 분석과정</h3><p>엘라스틱서치에서 데이터를 색인할 때 문사가 분석되는 가정을 한번 살펴보자.</p><p>데이터는 색인될 때 인덱스에 설정된 분석기의 종류에 따라 토크나이저 → 토큰필터 순으로 분석과정을 거친다.</p><p>예제로 문자열 “Around the World in Eighty Days”에 whitespace 토크나이저와 lowercase그리고 stop 토큰필터를 적용시켜 가면서 분석 과정을 차례대로 확인해보자.</p><p>먼저 이 문자열에 whitespace 토크나이저를 적용시켜서 분석을 진행하면 문자열이 다음과 같이 분리된다.</p><p><img src="/images/2019/Hello%20ElasticSearch/1-Page-2_(1).png" alt="Hello%20ElasticSearch/1-Page-2_(1).png"></p><p>whitespace 토크나이저는 공백 또는 줄바꿈을 기준으로 단어를 불리하는 토크나이저다.</p><p>위에서 처럼 withespace토크나이저를 거친 문자열 “Around the Wrold in Eighty Days”는 각 Around, the, World, in, Eighty, Days라는 검색어 토큰으로 색인된다.</p><p>이제 이 검색어 토큰에 lowercase 토큰필터를 적용하면 각 검색어 토큰은 다음과 같이 변경된다.</p><p><img src="/images/2019/Hello%20ElasticSearch/1-Page-3.png" alt="Hello%20ElasticSearch/1-Page-3.png"></p><p>lowercase 토큰필터를 거친 검색어 토큰은 모두 소문자로변환된다. lowercase 토큰필터를 거친 검색어 토큰에 마지막으로 stop 토큰필터를 한번 더 적용하면 검색어 토큰은 다음과 같이 된다.</p><p><img src="/images/2019/Hello%20ElasticSearch/1-Page-4_(1).png" alt="Hello%20ElasticSearch/1-Page-4_(1).png"></p><p>stop 토큰필터는 검색어 토큰 중 불용어(stopwords)에 해당하는 토큰을 검색어 토큰 목록에서 제외시키는 역할을 한다.</p><p>일반적으로 영어 단어 중 the, end, is와 같이 거의 대부분의 문장에 빠지지 않고 들어있는 대명사 또는 전치사 등의 단어를 실제로 검색어로 사용하기에는 문제가 있기 때문에 이러한 단어는 불용어에 해당된다. </p><p>위 내용을 실제 엘라스틱서치에 _analyze API를 통해 확인해 볼 수 있다.</p><p>아래는 whitespace 토크나이저만 적용하여 “Around the Wrold in Eighty Days” 텍스트의 분석을 요청하는 화면이다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled.png" alt="Hello%20ElasticSearch/Untitled.png"></p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%201.png" alt="Hello%20ElasticSearch/Untitled%201.png"></p><p>위처럼 공백 단위로 잘려진 토큰을 확인 할 수 있다.</p><p>filter로 lowercase를 적용한 결과 아래처럼 분석된 토큰들이 소문자로 변환된 것을 확인 할 수 있다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%202.png" alt="Hello%20ElasticSearch/Untitled%202.png"></p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%203.png" alt="Hello%20ElasticSearch/Untitled%203.png"></p><p>이제 여기서 추가로 stop 토큰필터를 적용해보자. </p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%204.png" alt="Hello%20ElasticSearch/Untitled%204.png"></p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%205.png" alt="Hello%20ElasticSearch/Untitled%205.png"></p><p>the, in 이 삭제된 것을 확인할 수 있다.</p><p>분석기(Analyzer)는 데이터의 분석에 사용할 토크나이저와 토큰 필터를 저장하고 있는 일종의 배치 프로그램으로 이해할 수 있다. </p><p>엘라스틱서치에서 기본적으로 제공하는 분석기 역시 모두 토크나이저와 토큰필터를 가지고 있으며, 이 외에 추가로 사용자가 임의의 토크나이저와 토큰필터를 선택해서 사용자 정의 분석기를 생성할 수 있다.</p><p>사용자 정의 분석기는 인덱스 단위로저장되며 해당 인덱스에 데이터 색인할 때 분석기를 명시해서 사용할 수 있다.</p><p>다음은 실제 인덱스를 생성하면서 분석기를 설정하는 화면이다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%206.png" alt="Hello%20ElasticSearch/Untitled%206.png"></p><p>inca_index라는 인덱스를 생성하며 settings에 분석기를 설정했다.</p><p>아래는 맵핑정보로서 RDB의 테이블 정의라고 생각하면 된다. title이라는 프로퍼티에 위에서 생성한 my_analyzer를 설정했다.</p><p>인덱스를 생성한뒤 해당 인덱스에 아래처럼 데이터를 입력하게 되면, title이라는 프로퍼티는 자동으로 index생성시 설정한 my_analyzer를 통해 역색인 과정을 거쳐 해당 역색인 데이터를 엘라스틱서치 내부에 따로 저장하게 된다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%207.png" alt="Hello%20ElasticSearch/Untitled%207.png"></p><p><img src="/images/2019/Hello%20ElasticSearch/1-Page-5.png" alt="Hello%20ElasticSearch/1-Page-5.png"></p><h2 id="3-엘라스틱-서치의-활용예시"><a href="#3-엘라스틱-서치의-활용예시" class="headerlink" title="3.엘라스틱 서치의 활용예시"></a>3.엘라스틱 서치의 활용예시</h2><h3 id="3-1-ELK-스택"><a href="#3-1-ELK-스택" class="headerlink" title="3-1. ELK 스택"></a>3-1. ELK 스택</h3><p>엘라스틱서치는 뛰어난 검색엔진이지만 실무에서 사용하려면 입력할 데이터를 JSON형태로 가공 해야 하고, 검색된 데이터를 시각화하려면 별도의 차트 프로그램이나 라이브러리를 사용해야 하는등 부가적인 작업을 거쳐야 한다.</p><p>이를 위해 엘라스틱서치에서는 데이터 입력을 다양한 방식으로 간편하게 할 수 있는 프로그램인 로그스태시(Logstash)와 검색 데이터를 편리하게 시각화할 수 있는 도구인 키바나(Kibana)를 홈페이지에서 함께 제공하고 있다.</p><p>엘라스틱서치(Elasticsearch), 로그스테이시(Logstash), 키바나(Kibana)를 연동해서 구성한 시스템을 ELK 스택(ELK Stack)이라 한다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%208.png" alt="Hello%20ElasticSearch/Untitled%208.png"></p><p>ELK 스택와 더불어 ELK 스택에 경량 데이터수집 플랫폼인 Beats를 통해 다양한 환경에서 다양한 데이터를 수집, 가공, 저장, 시각화 하는 구조를 구성할 수 있다.</p><p><img src="/images/2019/Hello%20ElasticSearch/beats-platform.png" alt="Hello%20ElasticSearch/beats-platform.png"></p><h3 id="3-2-한글-형태소-분석기"><a href="#3-2-한글-형태소-분석기" class="headerlink" title="3-2. 한글 형태소 분석기"></a>3-2. 한글 형태소 분석기</h3><p>엘라스틱서치에서는 여러종류의 분석기와 토크나이저, 토큰필터를 내장하고 있다.</p><p>하지만 영어가 아닌 우리말(한글)로 된 문장을 분석하려면 내장된 분석기로 만족할 만한 결과를 얻기가 쉽지 않다.</p><p>예를 들어 “동해물과 백두산이 마르고 닳도록”과 같은 문장을 분석하면 보통은 “동해물과”, “백두산이”와 같이 공백 정도로만 토큰을 구분하거나 CJK 알고리즘을 사용한 경우에도 “동해”, “해물”과 같이 2음절의 토큰을 생성하는 정도로만 분석된다. </p><p>이 문장에서 “동해”, “백두산” 같은 검색어 토큰을 분석하려면 한글을 의미로 해석해서 분리할 수 있는 별도의 한글 형태소 분석기가 필요하다.</p><p>엘라스틱서치나 아파치 루씬에서는 한글을 위한 별도의 분석기 또는 사전을 제공하지 않고 있다.</p><p>하지만 정확한 한글 분석을 위해 국내 개발자들에 의해 별도로 개발되어 있는 한글 형태소 분석기들이 있다.</p><p>잘 알려진 분석기로는 아리랑 한글 분석기 프로젝트, 은전한잎 한글 분석기 프로젝트 등이 있으며 대부분 오픈소스로 개발되고 있으므로 해당 프로젝트 페이지에서 소스코드와 다양한 정보를 구할 수 있다.</p><p><img src="/images/2019/Hello%20ElasticSearch/Untitled%209.png" alt="Hello%20ElasticSearch/Untitled%209.png"></p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p>시작하세요! 엘라스틱서치(책)</p><p>엘라스틱서치 실무 가이드(책)</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> basic </tag>
            
            <tag> 기본개념 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 블로그 만들기</title>
      <link href="/2019/12/19/hexo-20191219-hello-hexo/"/>
      <url>/2019/12/19/hexo-20191219-hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>hexo는 jekyll과 같은 정적 블로그 생성 프레임 워크이다. </p><p>다만 hexo는 루비가 아닌 javascript, node등을 기반으로한 정적 블로그 생성기이다.</p><p>hexo도 markdown으로 글을 작성하며, github page와 연동해서 로컬에서 생성한 hexo 블로그를 웹에 공개 할수도 있다.</p><p>hexo의 자세한 설명은 아래 공식 페이지에서 확인 할 수 있다.</p><p><a href="https://hexo.io/ko/index.html" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a></p><p>Hexo 블로그를 만들기 전에, 로컬에 미리 node가 설치 되어 있어야 한다.</p><p>설치가 되어있지 않다면, 구글링해서 설치하길 바란다.</p><p><img src="/images/Hexo20191219/Untitled.png" alt="/images/Hexo20191219/Untitled.png"></p><p>블로그를 생성한 경로로 이동해서 터미널을 열고 아래 명령어를 순차적으로 입력하면된다.</p><pre><code>npm install hexo-cli -g    #hexo cli를 글로벌로 설치hexo init hexoblog         #hexoblog라는 폴더로 hexo 블로그 생성     cd blog                    #생성된 폴더로 진입npm install                #의존성 설치hexo server                #hexo 블로그 기동</code></pre><p>아래 hexo init명령으로 hexoblog라는 hexo blog 폴더를 생성한다.</p><p>요즘에는 자동으로 기본 디펜던시를 다운로드 해주는것 같다.</p><p><img src="/images/Hexo20191219/Untitled%201.png" alt="/images/Hexo20191219/Untitled%201.png"></p><p>아래처럼 폴더가 생성 된다.</p><p><img src="/images/Hexo20191219/Untitled%202.png" alt="/images/Hexo20191219/Untitled%202.png"></p><p><img src="/images/Hexo20191219/Untitled%203.png" alt="/images/Hexo20191219/Untitled%203.png"></p><p>위 이미지에서 hexo-deployer-git 을 추가로 설치했다. </p><p>해당 모듈은 나중에 gitpage에 hexo로 빌드한 정적 웹을 배포하는 용도의 모듈이다.</p><p>마지막으로 hexo s 또는 hexo server 를 입력하면 hexo가 동작중이라는 문구와 url 이 나온다.</p><p><img src="/images/Hexo20191219/Untitled%204.png" alt="/images/Hexo20191219/Untitled%204.png"></p><p>브라우저로 hexo 블로그가 동작하는 것을 확인 할 수 있다.</p><p>아래 블로그의 테마는 hexo의 기본 테마인 landscape 테마이다. </p><p>다음글에서는 이 테마를 Next 테마로 변경하는 내용을 다뤄 보도록 하겠다.</p><p><img src="/images/Hexo20191219/Untitled%205.png" alt="/images/Hexo20191219/Untitled%205.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 블로그 </tag>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 드래그 modal 예제</title>
      <link href="/2019/10/26/react-20191026-react-modal-draggable/"/>
      <url>/2019/10/26/react-20191026-react-modal-draggable/</url>
      
        <content type="html"><![CDATA[<p>windows에서 create-react-app으로 예제 프로젝트를 준비했다.</p><p><img src="/images/2019/Untitled-15d005bb-ceac-4a63-8045-4b64d65db61a.png" alt></p><p><a href="https://reactstrap.github.io/" target="_blank" rel="external nofollow noopener noreferrer">https://reactstrap.github.io/</a></p><p>react에서 bootstrap을 컴포넌트를 제공하는 라이브러리가 있다. reactstrap이라는 라이브러리이다.</p><p>설치하자. 이 라이브러리에 있는 모달을 사용할 예정이다.</p><pre><code>npm install --save reactstrap react react-dom</code></pre><p><a href="https://www.npmjs.com/package/react-draggable" target="_blank" rel="external nofollow noopener noreferrer">https://www.npmjs.com/package/react-draggable</a></p><p>react에서 마우스 드래그 기능을 제공하는 라이브러리이다 설치하자.</p><p>해당 라이브러리는 modal에만 해당하는것이 아니라 감싼 컴포넌트 모두를 지원한다.</p><pre><code>npm install react-draggable</code></pre><p><img src="/images/2019/Untitled-f41dddcb-82d9-4253-a436-bd45624d6924.png" alt></p><p>ModalExample.js 라는 파일을 만들자. 이 파일이 마우스 드래그가 가능한 모달 컴포넌트이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123; Button, Modal, ModalHeader, ModalBody, ModalFooter &#125; <span class="keyword">from</span> <span class="string">'reactstrap'</span>;</span><br><span class="line">    <span class="keyword">import</span> Draggable <span class="keyword">from</span> <span class="string">'react-draggable'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ModalExample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">          modal: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">this</span>.toggle = <span class="keyword">this</span>.toggle.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      toggle() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">          modal: !prevState.modal</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;Button color=<span class="string">"danger"</span> onClick=&#123;<span class="keyword">this</span>.toggle&#125;&gt;&#123;<span class="keyword">this</span>.props.buttonLabel&#125;&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Draggable</span></span><br><span class="line"><span class="regexp">            axis="both"</span></span><br><span class="line"><span class="regexp">            handle=".handle"</span></span><br><span class="line"><span class="regexp">            defaultPosition=&#123;&#123;x: 0, y: 0&#125;&#125;</span></span><br><span class="line"><span class="regexp">            position=&#123;null&#125;</span></span><br><span class="line"><span class="regexp">            grid=&#123;[25, 25]&#125;</span></span><br><span class="line"><span class="regexp">            scale=&#123;1&#125;</span></span><br><span class="line"><span class="regexp">            onStart=&#123;this.handleStart&#125;</span></span><br><span class="line"><span class="regexp">            onDrag=&#123;this.handleDrag&#125;</span></span><br><span class="line"><span class="regexp">            onStop=&#123;this.handleStop&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Modal isOpen=&#123;this.state.modal&#125; toggle=&#123;this.toggle&#125; className=&#123;this.props.className&#125;&gt;</span></span><br><span class="line"><span class="regexp">              &lt;ModalHeader toggle=&#123;this.toggle&#125; className="handle"&gt;Modal title&lt;/</span>ModalHeader&gt;</span><br><span class="line">              &lt;ModalBody&gt;</span><br><span class="line">                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed <span class="keyword">do</span> eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor <span class="keyword">in</span> reprehenderit <span class="keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt <span class="keyword">in</span> culpa qui officia deserunt mollit anim id est laborum.</span><br><span class="line">              &lt;<span class="regexp">/ModalBody&gt;</span></span><br><span class="line"><span class="regexp">              &lt;ModalFooter&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Button color="primary" onClick=&#123;this.toggle&#125;&gt;Do Something&lt;/</span>Button&gt;&#123;<span class="string">' '</span>&#125;</span><br><span class="line">                &lt;Button color=<span class="string">"secondary"</span> onClick=&#123;<span class="keyword">this</span>.toggle&#125;&gt;Cancel&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>ModalFooter&gt;</span><br><span class="line">            &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Draggable&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    export default ModalExample;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">App.js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    import React from 'react';</span></span><br><span class="line"><span class="regexp">    import './</span>App.css<span class="string">';</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    import ModalExample from '</span>./ModalExample<span class="string">';</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    function App() &#123;</span></span><br><span class="line"><span class="string">      return (</span></span><br><span class="line"><span class="string">        &lt;div className="App"&gt;</span></span><br><span class="line"><span class="string">          &lt;ModalExample buttonLabel=&#123;"모달 테스트"&#125;&gt;&lt;/ModalExample&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    export default App;</span></span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-aad57dc8-6977-4dd3-a7aa-2f429b61b1c3.png" alt></p><p>npm run start 로 실행해보자.</p><p>모달창을 열고 모달의 제목을 마우스로 드래그 하면 드래그가 가능한 것을 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-17358c2c-8fd5-4fab-8949-e21e5cd6f3d3.png" alt></p><p>현재 드래그가 좀 버벅이는 것 처럼 보이는데, 그것은 react-draggable의 옵션으로 부드러움 정도를 설정 할수 있다.</p><p>해당 예제는 아래 github에 올려놓았다.</p><p><a href="https://github.com/hanumoka/react-modal-draggable.git" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/hanumoka/react-modal-draggable.git</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> modal </tag>
            
            <tag> draggable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins에서 Gitlab연동하기(Gitlab계정사용)</title>
      <link href="/2019/10/23/jenkins-20191023-jenkins-connect-gitlab/"/>
      <url>/2019/10/23/jenkins-20191023-jenkins-connect-gitlab/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이번은 로컬에 docker로 올린 jenkins를 사용해서 Gitlab(online)에 연동하는 방법을 알아보겠다.</p><h1 id="실습전-준비"><a href="#실습전-준비" class="headerlink" title="실습전 준비"></a>실습전 준비</h1><p><img src="/images/2019/Untitled-096ae800-7d1d-4496-8d86-6fb46e597b19.png" alt></p><p>위 처럼 gitlab에 테스트할 리파지토리를 하나 준비했다.</p><p><img src="/images/2019/Untitled-4bb0ed17-41b4-4ad9-8477-5299bfb6a62d.png" alt></p><p>위처럼 젠킨스에서는 Git plugin, GitLab Plugin을 설치해주자. </p><p>Git plugin은 기본적으로 설치되어 있지만, GitLab Plugin은 추가로 설치해 주어야 할 것이다.</p><p> Git, GitLab관련 다양한 기능을 제공하는 플러그인들이 추가로 있으니, 필요기능별로 찾아 사용하면 된다.</p><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><p>구글링 해보면, Gitlab에 accesstoken을 사용해서 jenkins와 연동하는 예제는 많이 있다.</p><p>하지만 내가 셋팅한 jenkins에 뭔가 문제가 있는지, Gitlab accesstoken을 저장까지는 되지만 막상 Project에서 Gitlab accesstoken credential을 불러오지 못했다.</p><p>따라서 차선책으로 Gitlab의 accesstoken대신 Gitlab의 계정을 사용하여, jenkins에 연동을 해볼것이다.</p><h2 id="jenkins에-github-계정-Credential-추가하기"><a href="#jenkins에-github-계정-Credential-추가하기" class="headerlink" title="jenkins에 github 계정 Credential 추가하기"></a>jenkins에 github 계정 Credential 추가하기</h2><p>jenkins에서 Credentilas로 이동 → global 클릭</p><p><img src="/images/2019/Untitled-60c9c996-c12a-40b7-a0da-2c7d61c7c349.png" alt></p><p>Add Credentials클릭</p><p><img src="/images/2019/Untitled-f458cdc9-43bb-4559-a605-f5eb08806eef.png" alt></p><p>이 화면에서 Credential을 저장하고 젠킨스의 project에서 필요한 Credential을 불러와서 사용한다.</p><p><strong>Username</strong>에 gitlab 계정아이디(필수 값)</p><p><strong>Password</strong>에 gitlba 계정비밀번호(필수 값)</p><p><strong>ID</strong>에는 Credential을 식별하는 아이디(필수 값)</p><p>Description은 이 Credential에 대한 설명을 입력하자.</p><p><img src="/images/2019/Untitled-cf60f55a-733d-4979-9b43-8f6a9f0f5179.png" alt></p><p>Credential저장이 완료되었다면, 이제 새로운 Item을 생성하자.</p><p><img src="/images/2019/Untitled-201c3e62-c6e8-4914-b966-c6004c565ccd.png" alt></p><p>아이템 이름을 입력하고, Freestyle project 를 선택하고 OK 를 클릭하자.</p><p><img src="/images/2019/Untitled-6ca71e3a-fad5-43b6-81af-d11977a20d70.png" alt></p><p>GitLab의 특정 프로젝트로 가서 리파지토리 URL을 클립보드로 복사하자.</p><p><img src="/images/2019/Untitled-24719915-f835-4208-9f20-58f5872ca493.png" alt></p><p>다시 jenkins로 이동해서 </p><p>앞서 생성한 Item의 소스코드 관리로 이동후 Git 선택.</p><p>그리고 Repository URL에 앞서 복사한 Gitlab 프로젝트 URL을 붙여넣자.</p><p>처음에는 Credential이 none이므로 아래처럼 빨란 경고문그로 접근할수 없다고 나온다.</p><p><img src="/images/2019/Untitled-f513ed0a-8af3-4c70-9a4a-5a776329c08a.png" alt></p><p>Credentials 셀렉트박스를 눌러서 앞서 입력한, Credential을 선택하자.</p><p>아래 그림에서는 내가 테스트로 여러개를 입력해서 여러개가 나오는 것 뿐이다.</p><p><img src="/images/2019/Untitled-1bfdbbcf-fdb0-4f60-b0ba-464af4f44477.png" alt></p><p>선택한 뒤 조금 지나면, 아래처럼 빨간 문구가 사라진 것을 확인 할 수 있다. 이것으로 연동이 된 것이다.</p><p><img src="/images/2019/Untitled-2119f085-d987-4604-beda-d8cb62d481ea.png" alt></p><p>실제 연동이 됬는지 확인하기 위해 item에 build로 가서 Execute shell을 클릭한뒤 ls -al 명령어를 입력하자.</p><p><img src="/images/2019/Untitled-08e205a1-9276-4284-9753-f59c156d6f25.png" alt></p><p>아래처럼 ls -al을 입력해서 gitlab 리파지토리에서 소스를 받아오는지 출력해보자.</p><p>저장을 눌러서 jenkins item을 저장하자.</p><p><img src="/images/2019/Untitled-7374ca61-189c-482b-bb09-22f7d63c89b0.png" alt></p><p>아래처럼 저장이 완료 되었다.</p><p><img src="/images/2019/Untitled-eefc218c-fab5-40f1-a68a-993609dca21d.png" alt></p><p>Build Now를 눌러서 Jenkins item을 동작 시키자.</p><p>아래처럼 Build History가 성공적으로 끝났다.</p><p>#1을 클릭해서 내용을 확인해 보자.</p><p><img src="/images/2019/Untitled-b8b35e7c-5086-4e7a-8c3c-4aead8967509.png" alt></p><p><img src="/images/2019/Untitled-97cd9b10-17d9-46bb-9ca0-fb4599284651.png" alt></p><p>아래처럼 gitlab의 소스를 받아오는 것을 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-add45bd0-65e5-4a3e-b566-7319aa1c740b.png" alt></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> gitlab </tag>
            
            <tag> 연동 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker를 이용한 Jenkins 컨테이너 만들기(docker in docker)</title>
      <link href="/2019/10/14/docker-20191014-docker-jenkins-docker-in-docker/"/>
      <url>/2019/10/14/docker-20191014-docker-jenkins-docker-in-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker를-이용한-Jenkins-컨테이너-만들기-docker-in-docker"><a href="#Docker를-이용한-Jenkins-컨테이너-만들기-docker-in-docker" class="headerlink" title="Docker를 이용한 Jenkins 컨테이너 만들기(docker in docker)"></a>Docker를 이용한 Jenkins 컨테이너 만들기(docker in docker)</h1><p>Created: Oct 14, 2019 8:41 PM</p><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이번에는 ubuntu 18.04 가상머신에 docker, docker-compose 를 사용해서 jenkins 컨테이너를 생성해보겠다.</p><p>도커 관리를 위해서 Dockerfile, docker-compose 모두 사용할 예정이다.</p><p>이번에 만들 jenkins 컨테이너는 내부에서 dockerfile을 빌드할 예정이므로, docker in docker로 jenkins 이미지를 만들 예정이다.</p><h1 id="1-Docker관리를-위한-폴더와-파일-구조"><a href="#1-Docker관리를-위한-폴더와-파일-구조" class="headerlink" title="1. Docker관리를 위한 폴더와 파일 구조"></a>1. Docker관리를 위한 폴더와 파일 구조</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker (도커 관리 폴더)</span><br><span class="line">|-- jenkins_with_docker (도커를 포함한 젠킨슨 관리 폴더)</span><br><span class="line">  |-- jenkins_home      (젠킨스 컨테이너의 볼륨 연결용 폴더, 빈 폴더 준비)</span><br><span class="line">  |-- docker-compose.yml  (실제 컨테이너를 생성하는 docker-compose 파일)</span><br><span class="line">  |-- Dockerfile         (docker-compose.yml에서 빌드할 jenkins 파일)</span><br><span class="line">  |-- docker_install.sh   (Dockerfile에서 호출할 docker 설치 스크립트 파일)</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-102a40b7-b19d-441e-8e97-83b6d54175af.png" alt></p><p>구조는 아래와 같다.</p><p><img src="/images/2019/Untitled-d23756fa-1243-4ad0-94b0-bdf22ea4d2c1.png" alt></p><p>이미 스스로가 docker 컨테이너는 jenkins에서 docker를 사용하기 위해서는 컨테이너가 동작하는 호스트의 docker를 빌려서 사용하는 것이다.</p><p><strong>연결 방법은 docker volume을 사용해서 docker 가 설치된 host의 /var/run/docker.sock과 jenkins 컨테이너 내부의 /var/run/docker.sock를 연결해 줘야 한다.</strong></p><p>이 부분은 docker-compose.yml 에 설정 할 것이다.</p><h1 id="2-설정-파일들-준비"><a href="#2-설정-파일들-준비" class="headerlink" title="2. 설정 파일들 준비"></a>2. 설정 파일들 준비</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM jenkins&#x2F;jenkins:lts</span><br><span class="line"></span><br><span class="line">USER root </span><br><span class="line"></span><br><span class="line">COPY docker_install.sh &#x2F;docker_install.sh</span><br><span class="line"></span><br><span class="line">RUN chmod +x &#x2F;docker_install.sh</span><br><span class="line"></span><br><span class="line">RUN &#x2F;docker_install.sh</span><br></pre></td></tr></table></figure><p>jenkins이미지에 docker_install.sh 파일을 복사해서 가져와서 실행한다.</p><p>Dockerfile 내부에서 RUN 명령등으로 쉘 스크립트를 실행할수 있지만, 뭔가 계속 오류가 나서 이런 방식을 선택했다.</p><h2 id="docker-install-sh"><a href="#docker-install-sh" class="headerlink" title="docker_install.sh"></a>docker_install.sh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get -y install apt-transport-https \</span><br><span class="line">     ca-certificates \</span><br><span class="line">     curl \</span><br><span class="line">     gnupg2 \</span><br><span class="line">     zip \</span><br><span class="line">     unzip \</span><br><span class="line">     software-properties-common &amp;&amp; \</span><br><span class="line">curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; <span class="built_in">echo</span> <span class="string">"<span class="variable">$ID</span>"</span>)/gpg &gt; /tmp/dkey; apt-key add /tmp/dkey &amp;&amp; \</span><br><span class="line">add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/<span class="variable">$(. /etc/os-release; echo "$ID")</span> \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span> &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><p>위 내용은 jenkins Dockerfile을 빌드할때 동작하는 스크립트이다.</p><p>내용은 jenkins 내부에 docker를 설치하는 것이다.</p><p>개인적으로 이렇게 sh파일을 copy하는게 편해보인다. </p><p>구글링으로 얻을수 있는 쉘스크립트를 바로 쓸수 있기 때문이다.</p><p>만약 jdk, maven, gradle, node등 필요한게 있다면 이런식으로 추가해 주면 될것 같다.</p><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">'jenkins_docker'</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'8200:8080'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'50200:50000'</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'8080'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'50000'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./jenkins_home:/var/jenkins_home'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/var/run/docker.sock:/var/run/docker.sock'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">"Asia/Seoul"</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">devops</span></span><br></pre></td></tr></table></figure><p>docker-compose.yml에서는 이미지 대신 Dockerfile을 이용해서 이미지를 대신한다.</p><p>volumes에서 docker.sock을 host와 연결한다.</p><h1 id="3-컨테이너-생성"><a href="#3-컨테이너-생성" class="headerlink" title="3. 컨테이너 생성"></a>3. 컨테이너 생성</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network create devops</span><br></pre></td></tr></table></figure><p>혹시나 나중에 쓸지도 모를 네트워크를 일단 생성하자.</p><p><img src="/images/2019/Untitled-cb93506f-1cc9-474d-912b-645e8c7f40da.png" alt></p><p>그리고 docker-copomse.yml 이 있는 경로로 이동해서 아래 명령으로 이미지 생성과 jenkins 컨테이너를 생성하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>위 명령얼 실행하면 Dockerfile을 빌드하기 시작한다. 이때 jenkins 이미지를 받고 docker를 설치하므로 시간이 좀 걸린다.</p><p>그리고 완료가 되면 아래처럼 나올것이다.</p><p><img src="/images/2019/Untitled-265f282f-40f3-41eb-9938-db3a84dae26f.png" alt></p><p>그리고 docker 이미지를 검색해보면 아래처럼 상당이 큰 이미지가 생성된다.</p><p><img src="/images/2019/Untitled-f334ccd5-368f-42bc-b2c8-386ea71250b9.png" alt></p><p>만약 위 과정에서 문제가 생긴다면, Dockerfile을 별도로 빌드해서 Dockerfile에서 오류가 나는지, docker_install.sh에서 오류가 나는지, 아니면 docker-compose.yml 에서 오류가나는지 찬찬히 찾아봐야 한다.</p><h1 id="4-jenkins-컨테이너에-접속해서-docker-명령어-테스트"><a href="#4-jenkins-컨테이너에-접속해서-docker-명령어-테스트" class="headerlink" title="4. jenkins 컨테이너에 접속해서 docker 명령어 테스트"></a>4. jenkins 컨테이너에 접속해서 docker 명령어 테스트</h1><p>브라우저에서 <a href="http://localhost:8200" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8200</a> 에 접속해보자.</p><p><img src="/images/2019/Untitled-ce71b9bd-7bfc-4210-b260-1b13e5ee65ae.png" alt></p><p>일반적인 jenkins 초기화면이 나온다 초기 비밀번호를 찾아서 넣어주자.</p><p><img src="/images/2019/Untitled-606e3efe-c702-4e8d-b0f6-807ab375f723.png" alt></p><p>공식 jenkins 이미지를 사용하므로 플러그인도 잘 설치가 된다.</p><p><img src="/images/2019/Untitled-a069af1b-b823-45b7-a44f-e61ec66b4de7.png" alt></p><p><img src="/images/2019/Untitled-0e608340-7ada-44b0-938b-8b05b1bb2f3b.png" alt></p><p>관리자 정보를 입력하고 save and Continue 를 눌러주자.</p><p><img src="/images/2019/Untitled-9361a08e-dbf3-44a9-add0-d5a09d2bacfa.png" alt></p><p><img src="/images/2019/Untitled-616230d9-2bec-48d6-9c28-6f524183433b.png" alt></p><p><img src="/images/2019/Untitled-47e44134-c97c-4006-90c3-3fad68f7cea3.png" alt></p><p>아까 생성했던 관리자 계정으로 로그인하자.</p><p><img src="/images/2019/Untitled-86233454-b732-453c-a727-9f812bb33bd1.png" alt></p><p>위처럼 정상적으로 젠킨스가 동작한다.</p><p>만약 화면이 하얀색으로 멈춰 있거나 먹통이 되면 docker-compose stop → docker-compose start 로 컨테이너를 재시작 해보길 바란다.</p><p>이제 간단한 job을 만들어서 docker 명령어가 jenkins에서 호출되는지 확인해보자.</p><p><img src="/images/2019/Untitled-bf57a312-cb18-4e43-a155-fd9f52b56938.png" alt></p><p><img src="/images/2019/Untitled-6a04f72e-f728-4663-b100-2ca8f6df745e.png" alt></p><p><img src="/images/2019/Untitled-89042855-7749-4983-914e-61f7198f62c4.png" alt></p><p><img src="/images/2019/Untitled-8449685a-5b28-4b64-914b-301e41477c98.png" alt></p><p><img src="/images/2019/Untitled-8fa9c6d1-b947-4e87-8411-c5adb83fe233.png" alt></p><p>빨간 줄만 따라가면된다. Execute shell에 docker ps 입력하고 저장을 눌러 job을 저장하자.</p><p><img src="/images/2019/Untitled-73ed3298-0b66-4015-8ec9-3d27e155cea8.png" alt></p><p>이렇제 잡이 생성되면 들어가서 </p><p><img src="/images/2019/Untitled-5481ec9a-8bcf-4fbb-86e6-1734729d1a32.png" alt></p><p>Build now눌러서 결과를 확인하자.</p><p><img src="/images/2019/Untitled-bfbdc836-e6ac-45de-8d46-f750b1036465.png" alt></p><p>짜잔 jenkins에서 docker ps 명령어가 동작한 것을 확인 할 수 있다.</p><p>앞서 말했듯이 jenkins 컨테이너에서 호스트 docker를 빌려 쓰므로 현재 호스트의 docker ps 가 동작하고 그 결과가 나온다.</p><p>끝!</p><p>참고자료중 </p><p><a href="https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci" target="_blank" rel="external nofollow noopener noreferrer">https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci</a> </p><p>를 가장 많이 참고했다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci" target="_blank" rel="external nofollow noopener noreferrer">https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci</a></p><p><a href="https://medium.com/@NovaWoo/docker-%EC%99%80-jenkins-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-ci-1-9510178a525f" target="_blank" rel="external nofollow noopener noreferrer">https://medium.com/@NovaWoo/docker-와-jenkins-를-사용한-안드로이드-ci-1-9510178a525f</a></p><p><a href="https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose#docker-compose.yml-%ED%8C%8C%EC%9D%BC" target="_blank" rel="external nofollow noopener noreferrer">https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose#docker-compose.yml-파일</a></p><p><a href="https://github.com/jenkinsci/docker" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/jenkinsci/docker</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> dockercompose </tag>
            
            <tag> dockerindocker </tag>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker compose로 ubuntu에 jenkins 설치하기</title>
      <link href="/2019/10/13/docker-20191013-docker-compose-ubuntu-jenkins/"/>
      <url>/2019/10/13/docker-20191013-docker-compose-ubuntu-jenkins/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>가상머신 ubuntu 18.04 에 docker compose를 이용해서 jenkins를 설치해보도록 하겠다.</p><p>기본적으로 ubuntu에 docker와 docker-compose 가 설치되어 있어야 한다.</p><h1 id="1-docker-관리용-폴더구조-만들기"><a href="#1-docker-관리용-폴더구조-만들기" class="headerlink" title="1.docker 관리용 폴더구조 만들기"></a>1.docker 관리용 폴더구조 만들기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">|-- jenkins</span><br><span class="line">  |-- jenkins-home</span><br><span class="line">  |-- docker-compose.yml</span><br></pre></td></tr></table></figure><p>jenkins-home은 jenkins 컨테이어의 볼륨을 연결할 호스트 디렉토리이다.</p><p>컨테이너가 동작하면서 jenkins-home에 파일을 작성할 텐데 혹시나 발생할 문제에 대비해 jenkins-home 권한을 풀어주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 jenkins-home</span><br></pre></td></tr></table></figure><h1 id="2-docker-compose-yml-파일-생성"><a href="#2-docker-compose-yml-파일-생성" class="headerlink" title="2.docker-compose.yml 파일 생성"></a>2.docker-compose.yml 파일 생성</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: &#39;jenkins&#x2F;jenkins:latest&#39;</span><br><span class="line">    container_name: &#39;jenkins&#39;</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &#39;8100:8080&#39;</span><br><span class="line">      - &#39;50100:50000&#39;</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;8080&#39;</span><br><span class="line">      - &#39;50000&#39;</span><br><span class="line">    volumes:</span><br><span class="line">      - &#39;.&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home&#39;</span><br><span class="line">    environment:</span><br><span class="line">      TZ: &quot;Asia&#x2F;Seoul&quot;</span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: devops</span><br></pre></td></tr></table></figure><p>혹시나 사용할까 해서 docker network를 생성하자.</p><p>아래 명령으로 명령으로 docker network를 생성할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network create devops</span><br></pre></td></tr></table></figure><p>아래처럼 생성한 docker network 를 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-b65ee70b-82ae-4951-afe4-0bbc4c72d754.png" alt></p><h1 id="3-jenkins-docker-컨테이너-생성"><a href="#3-jenkins-docker-컨테이너-생성" class="headerlink" title="3. jenkins docker 컨테이너 생성"></a>3. jenkins docker 컨테이너 생성</h1><p>docker-compose.yml이 있는 경로에서 아래 명령으로 컨테이너를 생성하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-be77d754-1528-40b1-828c-7404f9a1ecc5.png" alt></p><p>위처럼 젠킨스 실행을 확인했다.</p><p>브라우저에서 <a href="http://localhost:8100" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8100</a> 으로 접근해보자.</p><p><img src="/images/2019/Untitled-ba370f07-b265-4094-bb60-e2924dfc757e.png" alt></p><p>젠킨스 동작을 확인 할 수 있다.</p><p>docker/jenkins-home/secrets/initialAdminPassword 파일을 열어보면 초기화 비밀번호를 확인 할수 있다.</p><p>해당 파일을 찾아 비밀번호를 입력해주자.</p><p>이 다음부터는 일반적인 젠킨스와 동일하다.</p><p><img src="/images/2019/Untitled-488bc5ef-82aa-4dc7-b9ab-755a1f760dee.png" alt></p><p><img src="/images/2019/Untitled-42525c0f-7ff4-493f-aba8-f164dffb8f2d.png" alt></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> dockercompose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04에 docker compose로 gitlab 설치하기</title>
      <link href="/2019/10/13/docker-20191013-docker-compose-gitlab/"/>
      <url>/2019/10/13/docker-20191013-docker-compose-gitlab/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu에-docker-compose로-gitlab-설치하기"><a href="#ubuntu에-docker-compose로-gitlab-설치하기" class="headerlink" title="ubuntu에 docker compose로 gitlab 설치하기"></a>ubuntu에 docker compose로 gitlab 설치하기</h1><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>가상머신의 ubuntu18.04에 docker compose를 통해서 gitlab 서버를 설치해 보겠다.</p><p>ubuntu에 미리 docker, docker-compose 가 설치되어 있어야 한다.</p><h1 id="1-docker-관리-폴더-만들기"><a href="#1-docker-관리-폴더-만들기" class="headerlink" title="1.docker 관리 폴더 만들기"></a>1.docker 관리 폴더 만들기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">|-- gitlab</span><br><span class="line">  |-- gitlab-data</span><br><span class="line">  |    | -- backups</span><br><span class="line">  |    | -- config</span><br><span class="line">  |    | -- data</span><br><span class="line">  |    | -- logs </span><br><span class="line">  |-- docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker-compose.yml 파일과 컨테이너와 연결할 호스트 볼륨을 저장할 gitlab-data 폴더를 생성했다.</p><h1 id="2-docker-compose-yml"><a href="#2-docker-compose-yml" class="headerlink" title="2. docker-compose.yml"></a>2. docker-compose.yml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#39;gitlab&#x2F;gitlab-ce:latest&#39;</span><br><span class="line">  restart: always</span><br><span class="line">  container_name: &#39;gitlab&#39;</span><br><span class="line">  hostname: &#39;127.0.0.1&#39;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#39;http:&#x2F;&#x2F;127.0.0.1:8929&#39;</span><br><span class="line">      gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] &#x3D; 2224</span><br><span class="line">  ports:</span><br><span class="line">    - &#39;8929:8929&#39;</span><br><span class="line">    - &#39;2224:22&#39;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#39;.&#x2F;gitlab-data&#x2F;config:&#x2F;etc&#x2F;gitlab&#39;</span><br><span class="line">    - &#39;.&#x2F;gitlab-data&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab&#39;</span><br><span class="line">    - &#39;.&#x2F;gitlab-data&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab&#39;</span><br><span class="line">    - &#39;.&#x2F;gitlab-data&#x2F;backups:&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#39;</span><br></pre></td></tr></table></figure><p>gitlab 공식 사이트에 가면 gitlab을 위한 docker-compose 파일을 제공한다.</p><p>그걸 받아서 볼륨과 포트정도만 수정했다.</p><p>위 127.0.0.1로 설정된 부분은 필요한데로 고정아이피를 넣어주면 된다. </p><p>지금은 실습을 위해 그냥 로컬호스트아이피로 박았다.</p><p>참고로 external_url에 설정된 ULR은 나중에 gitlab서버에서 생성된 리파지토리의 clone할 URL로 제공된다.</p><h1 id="3-혹시나-해서-gitlab-data-권한부여"><a href="#3-혹시나-해서-gitlab-data-권한부여" class="headerlink" title="3.혹시나 해서 gitlab-data 권한부여"></a>3.혹시나 해서 gitlab-data 권한부여</h1><p>이건 내가 공부가 적어 잘 모르겠다.</p><p>혹시 컨테이너 실행시 볼륨에 파일을 쓰면서 권한 오류가 발생할까 싶어, gitlab-data 폴더에 777권한을 부여 할 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 gitlab-data</span><br></pre></td></tr></table></figure><p>-R 옵션은 gitlab-data폴더와 하위 폴더 모두에 한꺼번에 권한을 주는 옵션이다.</p><p><img src="/images/2019/Untitled-4acbcbd0-73e5-4710-891b-7166d109aa71.png" alt></p><h1 id="4-gitlab-도커-컨테이너-올리기"><a href="#4-gitlab-도커-컨테이너-올리기" class="headerlink" title="4. gitlab 도커 컨테이너 올리기"></a>4. gitlab 도커 컨테이너 올리기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>위 명령어로 gitlab 도커 컨테이너를 올리자.</p><p><img src="/images/2019/Untitled-3f064605-782c-4f8d-a9ed-a1009c37ff20.png" alt></p><p>위처럼 빨리 done이라 나오지만 gitlab은 컨테이너가 부트가 되는 시간이 좀 길다.</p><p>로그를 확인해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose logs -f -t --tail&#x3D;&quot;all&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-4f6a3199-467a-4f8f-9bd0-7225d5b950ee.png" alt></p><p>한참 로그가 나오다가 위처럼 http에 관한 로그가 나오기 시작하면 접속이 가능한 상태가 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose ps</span><br></pre></td></tr></table></figure><p>위 명령어로 컨테이너 상태를 확인해보자.</p><p><img src="/images/2019/Untitled-fc936bcf-cc1c-4e7c-952b-bbbfc824ccc7.png" alt></p><p>status가 up으로 되어있으면 정상인 것이다. </p><p>문제가 있는경우 계속 starting 인 경우가 있으니, 그땐 로그를 보고 해결책을 찾아야 한다.</p><h1 id="5-gitlab에-접속해서-컨테이너-동작-확인하기"><a href="#5-gitlab에-접속해서-컨테이너-동작-확인하기" class="headerlink" title="5. gitlab에 접속해서 컨테이너 동작 확인하기."></a>5. gitlab에 접속해서 컨테이너 동작 확인하기.</h1><p>브라우저에 <a href="http://127.0.0.1:8928" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:8928</a> 로 접속해보자.</p><p><img src="/images/2019/Untitled-e27e4082-3782-4052-a6a8-7acde856c114.png" alt></p><p>root 계정의 비밀번호를 입력해주자.</p><p><img src="/images/2019/Untitled-9e112f2d-52f2-433a-8fa7-87c814b80b8d.png" alt></p><p>그 다음 root/방금생성한 비멀번호 를 입력해서 로그인하자.</p><p>그러면 Administrator 로 로그인 하게 된다.</p><p>아래는 테스트 프로젝트를 push 해서 동작을 확인한 화면이다.</p><p><img src="/images/2019/Untitled-717368c4-f393-471a-b9f7-60e1f3b7bb50.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> dockercompose </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockercompose로 ubuntu에 nexus 설치하기</title>
      <link href="/2019/10/12/docker-20191012-docker-compose-ubuntu-nexus/"/>
      <url>/2019/10/12/docker-20191012-docker-compose-ubuntu-nexus/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-1804-dockercompose-nexus-설치"><a href="#ubuntu-1804-dockercompose-nexus-설치" class="headerlink" title="ubuntu 1804 dockercompose nexus 설치"></a>ubuntu 1804 dockercompose nexus 설치</h1><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>ubuntu 18.04 버전에 docker compose를 사용해서 nexus를 도커로 설치하고 실행해 보려 한다.</p><p>미리 ubuntu에 docker와 docker compose 가 미리 설치되어 있어야 한다. 해당 내용은 이 글에 포함되어 있지 않다.</p><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><h2 id="1-도커-관리용-폴더-만들기"><a href="#1-도커-관리용-폴더-만들기" class="headerlink" title="1. 도커 관리용 폴더 만들기"></a>1. 도커 관리용 폴더 만들기</h2><p>생성할 도커 컨테이너의 설정파일과 볼륨을 관리하기 위해 폴더를 만들 것이다.</p><p>나느 아래처럼 홈디렉토리에 생성할 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;docker&#x2F;nexus&#x2F;nexus-data</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-70ca2a61-754c-4167-94e9-4ec44da6b194.png" alt></p><p>그리고 nexus폴더 내부에 docker-compose.yml 파일을 생성하고, 그 내용을 아래처럼 만들어 준다.</p><h1 id="2-docker-compose-yml-파일"><a href="#2-docker-compose-yml-파일" class="headerlink" title="2. docker-compose.yml 파일"></a>2. docker-compose.yml 파일</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nexus3:</span><br><span class="line">    image: &#39;sonatype&#x2F;nexus3:latest&#39;</span><br><span class="line">    container_name: &#39;nexus3&#39;</span><br><span class="line">    restart: always</span><br><span class="line">    expose:</span><br><span class="line">      - &#39;8081&#39;</span><br><span class="line">    ports:</span><br><span class="line">      - &#39;8081:8081&#39;</span><br><span class="line">    volumes:</span><br><span class="line">      - &#39;.&#x2F;nexus-data:&#x2F;nexus-data&#39;</span><br><span class="line">    environment:</span><br><span class="line">      TZ: &quot;Asia&#x2F;Seoul&quot;</span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    external:</span><br><span class="line">      name: devops</span><br></pre></td></tr></table></figure><p>포트를 8081로 셋팅하였고, nexus-data를 /home/docker/nexus-data 에 볼륨으로 연결 하였다.</p><p>네트워크를 쓸지는 모르겠지만 devops로 설정했다. </p><p>다음 명령어로 devops라는 docker network를 생성하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network create devops</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-b3949388-6c87-4d76-9cff-53be3d0aae86.png" alt></p><h2 id="3-docker-compose-yml로-nexus-컨테이너-생성"><a href="#3-docker-compose-yml로-nexus-컨테이너-생성" class="headerlink" title="3. docker-compose.yml로 nexus 컨테이너 생성"></a>3. docker-compose.yml로 nexus 컨테이너 생성</h2><p>아래 명령어를 docker-compose.yml이 있는 경로에서 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>위 명령얼 실행하면 자동으로 nexus 이미지를 다운받고 nexus 컨테이너를 실행 시킬 것이다.</p><p><img src="/images/2019/Untitled-6d1f7ace-7f56-4e50-9433-8331ea513494.png" alt></p><p>아래 명령으로 docker compose로 실행한 컨테이너를 확인하자.</p><p>물론 docker-compose.yml 이 있는 경로에서 명령어를 입력해야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose ps</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-2862e07c-78ec-4d50-a737-5f759e95fa4f.png" alt></p><p>state에 up으로 컨티에너가 실행 되었다는 것을 알 수 있다.</p><p>docker-compose.yml 파일이 있는 경로에서 아래 명령어를 치면 해당 컨테이너의 log를 볼수도 있다. 만약 컨테이너에 문제가 있다고 생각하면 로그를 확인 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose logs -f -t --tail&#x3D;&quot;all&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-6f653713-f6c7-47a6-acde-02b79834e0ac.png" alt></p><p>음 브라우저에 아래 주소로</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8081</span><br></pre></td></tr></table></figure><p>접근했는데 페이지가 열리지 않아서 로그를 확인해보니 위와 같은 오류가 로그로 나오고 있다.</p><p>아마 nexus컨테이너가 동작하면서 호스트의 nexus-data 에 파일을 생성해야 하는데 권한 문제가 있나보다.</p><p>일단 실행중인 컨테이너를 멈추고 해당 폴더에 권한을 부여해봐야 겠다.</p><p>아래 명령어로 실행시킨 nexus 컨테이너를 정지 시키자.</p><p>물론 docker-compose.yml 이 있는 경로에서 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down</span><br></pre></td></tr></table></figure><p>위 명령어로 해당 컨테이너를 종료하고 이미지를 삭제한다.</p><p>그리고 아까 생성했던 /home/docker/nexus/nexus-data 폴더의 권한을 수정해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 &#x2F;home&#x2F;docker&#x2F;nexus&#x2F;nexus-data</span><br></pre></td></tr></table></figure><p>무언가 도커에 다른 방법이 있을거 같은데, 나는 공부가 적어 위처럼 모든 권한을 다 부여했다.</p><p><img src="/images/2019/Untitled-a01c1e7b-d781-4ab0-b263-0c4eb82e99fc.png" alt></p><p>다시 도커 컨테이너를 올려보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>그리고 로그를 확인해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose logs -f -t --tail&#x3D;&quot;all&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-2b91f682-0a09-4ee5-b30b-c2f91e0a7935.png" alt></p><p>뭔가 에러 없이 넥서스가 실행 되었다고 나온다.</p><p>이제 브라우저에서 <a href="http://localhost:8081" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8081</a>로 접근해보자.</p><p><img src="/images/2019/Untitled-c93cc593-fb0e-435a-a1e1-d32689faa5d1.png" alt></p><p>위 처럼 동작을 확인 할 수 있다.</p><p>우측 오른쪽의 sign in 을 클릭하면 다음처럼 나온다.</p><p><img src="/images/2019/Untitled-2859049b-05c1-4a71-8277-dd2f83453e2d.png" alt></p><p>/nexus-data/admin.password 파일을 확인해서 admin의 비밀번호를 확인해 보라고 한다.</p><p>예전 버전의 nexus는 기본으로 admin/1234 인데 요즘 버전은 이렇게 나온다.</p><p>초기에 생성한 볼륨 폴더인 /home/docker/nexus/nexus-data 폴더로 이동해보자.</p><p><img src="/images/2019/Untitled-6858174d-4044-4f89-a284-30072790b543.png" alt></p><p>admin.password 파일이 있다. 해당 파일을 열어보면 admin 초기 비밀번호가 나온다.</p><p>admin/초기비밀번호를 입력하면 새로 생성한 넥서스에 관리자로 로그인 할 수 있다.</p><p>로그인에 성공하면 다음처럼 나온다.</p><p><img src="/images/2019/Untitled-b1c4ba78-aa53-465a-9981-16bbb19314af.png" alt></p><p>새 비밀번호를 입력한다.</p><p><img src="/images/2019/Untitled-421a9f44-549a-4a33-a3a5-f48e4e2fe97a.png" alt></p><p>그리고 대충 next 버튼을 눌러주면 된다. </p><h2 id="4-이제-관리는-어떻게"><a href="#4-이제-관리는-어떻게" class="headerlink" title="4. 이제 관리는 어떻게?"></a>4. 이제 관리는 어떻게?</h2><p>도커 컨테이너의 볼륨을 호스트와 연결했으니, 컨테이너를 지워도 호스트 볼륨이 살아 있으니, 문제 없다.</p><p>나중에 백업을 하거나 컨테이너를 다른곳으로 옮겨야 할 경우 /home/docker 폴더를 전체 복사해서 이동시켜 컨테이너를 올리면 작업중엔 넥서스의 상태를 보존할수 있을거 같다.</p><h2 id="5-docker-compose-명령어-요약"><a href="#5-docker-compose-명령어-요약" class="headerlink" title="5. docker compose 명령어 요약"></a>5. docker compose 명령어 요약</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d      &#x2F;&#x2F; 도커컴포즈 컨테이너 생성 및 실행   </span><br><span class="line">docker-compose down       &#x2F;&#x2F; 도커컴포즈 컨테이너 종료 및 삭제</span><br><span class="line"></span><br><span class="line">docker-compose start      &#x2F;&#x2F; 도커컴포즈 컨테이너 실행</span><br><span class="line">docker-compose stop       &#x2F;&#x2F; 도커컴포즈 컨테이너 종료</span><br><span class="line"></span><br><span class="line">docker-compose ps         &#x2F;&#x2F; 도커컴포즈 프로스스 확인</span><br><span class="line">docker-compsos logs -f -t --tail&#x3D;&quot;all&quot;  &#x2F;&#x2F;도커컴포즈 로그 확인</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> dockercompose </tag>
            
            <tag> nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 18.04 docker compose install</title>
      <link href="/2019/10/05/ubuntu-20191005-ubuntu-docker-compose-install/"/>
      <url>/2019/10/05/ubuntu-20191005-ubuntu-docker-compose-install/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-18-04-docker-compose-install"><a href="#ubuntu-18-04-docker-compose-install" class="headerlink" title="ubuntu 18.04 docker compose install"></a>ubuntu 18.04 docker compose install</h1><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이전에 ubuntu 18.04 가상머신에 docker 를 설치했다.</p><p>윈도우에는 docker for windows로 설치하면 docker와 docker compose 가 한방에 설치되는데, ubuntu에서는 docker compose를 추가로 따로 설치해 줘야 한다.</p><p>이번에는 docker compose를 설치 해보려 한다.</p><h1 id="ubuntu-18-04-docker-compse-설치하기"><a href="#ubuntu-18-04-docker-compse-설치하기" class="headerlink" title="ubuntu 18.04 docker compse 설치하기"></a>ubuntu 18.04 docker compse 설치하기</h1><p><a href="https://github.com/docker/compose/releases" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/docker/compose/releases</a></p><p>일단 위 경로로 가서 최신 docker compose 버전을 살펴보자 rc 버전은(release candidate)로 일종의 베타 버전이라고 한다. </p><p>원하는 버전을 선택해서 설치하면 된다.</p><pre><code>sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composedocker-compose --version</code></pre><p><img src="/images/2019/Untitled-53125fd8-bb2f-42d8-b477-a8e35a8122f8.png" alt></p><p>간단하게 설치를 할 수 있다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04" target="_blank" rel="external nofollow noopener noreferrer">https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot - gradle을 이용한 멀티모듈 프로젝트 만들기</title>
      <link href="/2019/10/04/springBoot-20191004-springboot-gradle-multimodule/"/>
      <url>/2019/10/04/springBoot-20191004-springboot-gradle-multimodule/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-gradle-멀티모듈-프로젝트-만들기"><a href="#springboot-gradle-멀티모듈-프로젝트-만들기" class="headerlink" title="springboot gradle 멀티모듈 프로젝트 만들기"></a>springboot gradle 멀티모듈 프로젝트 만들기</h1><h1 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h1><p>windows10</p><p>intelliJ 커뮤니티 버전</p><p>jdk1.8</p><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>intelliJ 에서 gradle 기반 springboot 멀티 모듈 프로젝트를 한번 만들어보자.</p><p>멀티모듈을 어떻게 디자인 해야하는지는 다루지 않고, gradle을 이용해서 어떻게 모듈을 생성하고 모듈간의 의존성을 셋팅을 하는가에 중점을 둔 글이다.</p><h3 id="1-인텔리J에서-gradle-프로젝트-생성"><a href="#1-인텔리J에서-gradle-프로젝트-생성" class="headerlink" title="1. 인텔리J에서 gradle 프로젝트 생성"></a>1. 인텔리J에서 gradle 프로젝트 생성</h3><p>일단 intelliJ 에서 gradle 프로젝트를 생성하자.</p><p><a href="http://start.spring.io" target="_blank" rel="external nofollow noopener noreferrer">http://start.spring.io</a> 로 이동해서 spring boot gradle 프로젝트를 생성하자.</p><p>(나는 인텔리J 커뮤니티 버전을 사용중이라 springboot 프로젝트를 생성할 때 주로 <a href="http://start.spring.io" target="_blank" rel="external nofollow noopener noreferrer">http://start.spring.io</a> 를 주로 사용한다.)</p><p>아래처럼 설정하여 프로젝트를 생성하자.</p><p><strong>Project</strong> : Gradle Project</p><p><strong>Language</strong>: Java</p><p><strong>Spring Boot</strong>: 2.1.9(현재 2점대 이상으로 선택하면 될듯)</p><p><strong>Project Metadata</strong></p><p><strong>Group</strong> : com.hanumoka.go</p><p><strong>Artifact</strong> : go-modules</p><p><strong>Option</strong> </p><p><strong>Packaging</strong>: War</p><p><strong>Java</strong> : 8</p><p><strong>Dependencies</strong>: Spring web, Thymeleaf</p><p>위에서 중요한 부분은 Group이다. </p><p>com.hanumoka.go는 이 프로젝트의 공통 패키지이며, Artifact: go-modules 는 실제 생성되는 실행 프로그램을 구별하는 명칭이 아니라 모듈의 묶음일 뿐이다.</p><p>개인적으로 프로젝트를 war로 설정해서 생성한 이유는 애시당초 war로 프로젝트를 생성하면 프로젝트 빌드시 war, jar 빌드가 쉽기 때문이다.</p><p><img src="/images/2019/Untitled-5341e670-96cc-4c30-87ce-b3b5e1f8f70e.png" alt></p><p><img src="/images/2019/Untitled-74760319-2255-4c62-8e0e-420b86d1ff1f.png" alt></p><p><img src="/images/2019/Untitled-d9a4929d-6637-4b35-abe6-7f30e72831a3.png" alt></p><p>Spring web은 필수이며  Thymeleaf 스프링 컨트롤러의 동작을 확인하기 위해 추가했다.</p><p>설정된 값을을 이용해서 압축된 프로젝트를 다운로드 하자.</p><p><img src="/images/2019/Untitled-b2e2e41a-d83f-42c6-8d3a-b8be0f1620e9.png" alt></p><p>해당 파일을 압축을 풀고 intelliJ로 open하자.</p><p><img src="/images/2019/Untitled-cb15ce0d-2329-42a8-a064-88a35931aa4f.png" alt></p><p>위처럼 gradle 이 제대로 빌드 되는지 확인하자.</p><p>컨트롤러와 html 페이지를 추가해서 스프링 컨트롤러 동작을 한번 시켜보자.</p><p>com.hanumoka.go.gomodules 패키지를 선택하고 controller 패키지를 생성하고, HomeController를 생성하고 html을 리다이렉팅 할 수 있는 RequestMapping 메소드를 추가하자.</p><p><img src="/images/2019/Untitled-1de55a38-69bf-4f45-aa47-c4b608000a3a.png" alt></p><p><img src="/images/2019/Untitled-453cfccc-a5da-4ab9-bc06-32d1dd1da2d8.png" alt></p><p>GoModulesApplication 를 선택하고 run 시켜서, <a href="http://localhost:8080" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080</a> 로 접속해서 컨트롤러가 동작하는지 보자.</p><p><img src="/images/2019/Untitled-a0b353dd-cff9-46b3-91e9-162e3b25cf80.png" alt></p><p><img src="/images/2019/Untitled-c37042c7-7134-4ea7-a560-0d269625b277.png" alt></p><p>스프링 컨트롤러가 정상 동작하는 것을 확인 할 수 있다.</p><h3 id="2-모듈-추가하기"><a href="#2-모듈-추가하기" class="headerlink" title="2. 모듈 추가하기"></a>2. 모듈 추가하기</h3><p>1번에서 한 일은 그냥 gradle 기반 springboot 프로젝트를 생성하고 동작시킨 것이다.</p><p>이제 실제 사용할 모듈을 구상하고 추가하고 셋팅해야 한다.</p><p>이 글은 gradle환경에서 springboot 프로젝트에서 모듈을 추가하고 연결하는 설정을 기록하는데 초점을 두고 있다.</p><p>따라서 간단하게 Service 모듈과 Controller 모듈을 생성하고 Controller 모듈이 Service 모듈을 사용하는 시나리오로 진행 하겠다.</p><p>실제 모듈을 설계하고 구성하는 일은 많은 고심이 필요해 보인다.(이부분은 나중에 좀 연구해 봐야 겠다.)</p><p><img src="/images/2019/Untitled-763d4bb6-6264-4ddd-ad37-e1bbf1583016.png" alt></p><p>일단 프로젝트 루트 경로의 build.gradle, settigns.gradle 은 프로젝트 전체에 적용되는 설정 파일이다. </p><p>사실 gradle을 잘 몰라 자세한 설명을 할 수가 없다. </p><p>하지만 이후로 추가될 모듈에 관련된 공통적인 설정은 이 두 파일에 기술된다.</p><p><img src="/images/2019/Untitled-0409dc23-9fe8-4d84-af69-622f0b2d146c.png" alt></p><p>그리고 프로젝트 루트 경로의 src 폴더는 모듈을 추가함으로써 사라질 예정이다.</p><p><img src="/images/2019/Untitled-1bf0b85f-d119-4e8d-8e5a-1ff8ff2e5f39.png" alt></p><h3 id="일단-a-module-이라는-이름의-모듈을-추가해보자"><a href="#일단-a-module-이라는-이름의-모듈을-추가해보자" class="headerlink" title="일단 a-module 이라는 이름의 모듈을 추가해보자."></a>일단 a-module 이라는 이름의 모듈을 추가해보자.</h3><p>일단 루트 경로의 settings.gradle을  확인해보자.</p><p>아래처럼 루트 프로젝트 네임만 있을 것이다. 나중에 모듈을 추가하면 모듈 정보가 추가될 것이다.</p><p>일단 넘어가자.</p><pre><code>rootProject.name = &apos;go-modules&apos;</code></pre><p>그리고 루트 경로의 build.gradle 파일을 열어서 내용물을 모두 지우고 아래 내용으로 치환하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion &#x3D; &#39;2.1.9.RELEASE&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)</span><br><span class="line">        classpath &quot;io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line"></span><br><span class="line">    apply plugin: &#39;java&#39;</span><br><span class="line">    apply plugin: &#39;eclipse&#39;</span><br><span class="line">    apply plugin: &#39;org.springframework.boot&#39;</span><br><span class="line">    apply plugin: &#39;io.spring.dependency-management&#39;</span><br><span class="line"></span><br><span class="line">    group &#x3D; &#39;com.hanumoka.go&#39;</span><br><span class="line">    version &#x3D; &#39;0.0.0&#39;</span><br><span class="line">    sourceCompatibility &#x3D; 1.8</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    task initSourceFolders &#123;</span><br><span class="line">        sourceSets*.java.srcDirs*.each &#123;</span><br><span class="line">            if( !it.exists() ) &#123;</span><br><span class="line">                it.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceSets*.resources.srcDirs*.each &#123;</span><br><span class="line">            if( !it.exists() ) &#123;</span><br><span class="line">                it.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compileOnly(&#39;org.projectlombok:lombok&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>buildscript  부분에서 공통 스브링부트 버전등을 설정한다.</p><p>subprojects 는 추가될 모듈둘에 공통적으로 적용될 내용들이 기술되어 있다.</p><p>이제 a-module 을 추가해보자. 아래처럼 모듈을 클릭하자.</p><p><img src="/images/2019/Untitled-64586004-bf5a-4a95-af5d-2c80215154e5.png" alt></p><p>아래 내용을 확인하고 next 버튼을 클릭하자.</p><p><img src="/images/2019/Untitled-728f02ae-0958-433b-aded-dfc20c6639c0.png" alt></p><p>아래처럼 GroupId : com.hanumoka.go</p><p>ArtifactId : a-module 를 입력하고 next 를 클릭하자.</p><p><img src="/images/2019/Untitled-3919234e-a81d-45fa-a06c-07f35ff6d8c2.png" alt></p><p>a-module 이라는 모듈명을 확인하고 Finish 버튼을 클릭하자.</p><p><img src="/images/2019/Untitled-cdbb921e-edd1-48e7-8419-f4f584e6e5e6.png" alt></p><p>아래처럼 a-module이 추가되었다. 하늘색 작은 상자가 표시 되어 있는데, 이것이 모듈을 의미한다.</p><p><img src="/images/2019/Untitled-9e0e20d4-d3d0-4bfb-8da3-b0fa3b9190a0.png" alt></p><p>모듈을 추가했으니 프로젝트 루트 경로의 settings.gradle 파일을 열어보자.</p><p>아래처럼 include ‘a-module’ 이라는 내용이 자동으로 추가된 것을 확인 할 수 있다.</p><p>만약 없다면, 추가해주자.</p><p><img src="/images/2019/Untitled-d4e72ab9-3593-449c-8bcf-074294dda1a3.png" alt></p><p>그리고 루트 경로의 settings.gradle 파일을 열어보자.</p><p>그리고 아래 내용을 추가해주자. 프로젝트해당 모듈이 있다고 등록하는 것이다. 나중에 이 모듈에 대한 디펜던시도 추가할 것이다.</p><pre><code>project(&apos;:a-module&apos;) {}</code></pre><p><img src="/images/2019/Untitled-8ef73c78-899a-4472-acd5-7c4fd6dab19c.png" alt></p><p>이제 생성했던 a-module 폴더로 들어가서 a-module 폴더의 build.gradle 파일을 열어보자.</p><p>기존의 내용들을 지우고 아래 내용으로 치환하자.</p><p>이 파일은 a-module을 위한 독자적인 파일이다.</p><pre><code>dependencies {    compile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)    compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)    testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)}</code></pre><p><img src="/images/2019/Untitled-4f8a1a40-e697-482a-8733-3e0c749dcf7b.png" alt></p><p>그리고 아래처럼 모듈 내부의 패키지와 파일들을 구성하자.</p><p><img src="/images/2019/Untitled-cc91f841-ef40-40ed-9499-79c23105eb78.png" alt></p><p><strong>공통 패키지는 com.hanumoka.go 이다.</strong></p><p><strong>BeanScan의 기준이 되는 AmoduleApp.class, ServletInitializer.class 는 이곳이 둬야 한다.</strong></p><p>아래 AmoduleApp.class 파일이다.</p><pre><code>package com.hanumoka.go;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class AmoduleApp {    public static void main(String[] args) {        SpringApplication.run(AmoduleApp.class, args);    }}</code></pre><p>아래 ServletInitializer.class 파일이다.</p><pre><code>package com.hanumoka.go;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;public class ServletInitializer extends SpringBootServletInitializer {    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {        return application.sources(AmoduleApp.class);    }}</code></pre><p>아래 HomeController.class 이다.</p><p>추가한 a-module을 다른 모듈과 구분하기 위해 amodule 을 추가했다.</p><pre><code>package com.hanumoka.go.amodule.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HomeController {    @RequestMapping(&quot;/&quot;)    public String index(){        return &quot;index&quot;;    }}</code></pre><p>기존에 루트 경로에 있던 src 폴더 내부를 옮겨와서 AmoduleApp 파일명만 변경한 것이다.</p><p>그리고 루트 경로의 src 폴더를 제거하자.</p><p>지금까지 작업은 기존의 단일 프로젝트의 src를 a-module로 옮긴것이다.</p><p>AmoduleApp 을 실행 하면, 스프링 앱이 동작하고 <a href="http://localhost:8080" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080</a> 접근시 index.html 이 보여야 한다.</p><p>지금까지 한 작업으로 springboot 단일 프로젝트를 springboot 모듈 프로젝트로 변경 되었다.</p><p>이제 b-module을 추가하고 a-module에서 b-module을 사용하는 구조로 만들어보자.</p><h3 id="b-module-이라는-모듈-추가하기"><a href="#b-module-이라는-모듈-추가하기" class="headerlink" title="b-module 이라는 모듈 추가하기"></a>b-module 이라는 모듈 추가하기</h3><p>앞서 a-module 추가하듯이 b-module도 추가하자.</p><p>아래와 같은 구조가 될 것이고, src 폴더는 앞에서 말한것 처럼 제거 했다.</p><p><img src="/images/2019/Untitled-eb7e58f7-4c94-4821-9647-63d58d52c801.png" alt></p><p>루트 경로에 settings.gradle 폴더르르 보면 역시 b-module 이 추가된 것을 볼 수 있다.</p><p><img src="/images/2019/Untitled-2a9d2015-3aa7-4c45-ae73-e04758fb8bcb.png" alt></p><p>루트 경로의 build.gradle 에 가서 앞서 등록했던 a-module에 dependencies 를 방금 추가한 b-module 로 추가하자.</p><p>해당 내용은 a-modul이 b-module에 의존성을 갖는다는 것이다.</p><pre><code>project(&apos;:a-module&apos;) {    dependencies {        compile project(&apos;:b-module&apos;)    }}</code></pre><p><img src="/images/2019/Untitled-a5baeacc-585a-4ad5-90dd-24effcf2ab22.png" alt></p><p>b-module을 열고 아래처럼 구성하자.</p><p>b-module은 a-module에서 사용할 서비스로 Bservice.class를 제공한다.</p><p><img src="/images/2019/Untitled-e2cf2f53-0c69-4946-b61f-ffb807c0fdfd.png" alt></p><p>Bservice.class</p><pre><code>package com.hanumoka.go.bmodule.service;import org.springframework.stereotype.Service;@Servicepublic class Bservice {    public String test(){        return &quot;Bservice test()...&quot;;    }}</code></pre><p>그리고 b-module 하위이 build.gradle 을 아래로 치환 했다.</p><pre><code>bootJar{    enabled = false;}jar {    enabled = true;}dependencies {    compile(&apos;org.springframework.boot:spring-boot-starter&apos;)}</code></pre><h3 id="A-module-컨트롤러에서-B-module-서비스를-사용해보자"><a href="#A-module-컨트롤러에서-B-module-서비스를-사용해보자" class="headerlink" title="A-module 컨트롤러에서 B-module 서비스를 사용해보자."></a>A-module 컨트롤러에서 B-module 서비스를 사용해보자.</h3><p>A-module의 HomeController.class를 아래처럼 수정하자.</p><pre><code>package com.hanumoka.go.amodule.controller;import com.hanumoka.go.bmodule.service.Bservice;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HomeController {    @Autowired    Bservice bservice;    @RequestMapping(&quot;/&quot;)    public String index(){        System.out.println(bservice.test());        return &quot;index&quot;;    }}</code></pre><p><img src="/images/2019/Untitled-c078d4ae-a987-432f-857e-3aa2797fcdbd.png" alt></p><p>이제 a-module의 AmoduleApp을 실행해서 a-module의 컨트롤러가 동작할때 b-module의 서비스를 호출하는지 확인해보자.</p><p>아래처럼 동작을 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-f2b2ebe0-c361-4915-86dc-2941cf8b1bfc.png" alt></p><p>go-module 을 빌드하면 아래처럼 a-module 의 빌드 결과물을 확인 할 수 있다.</p><p>화면에는 안 보이지만 b-module 역시 빌드 결과물이 생겼다.</p><p>하지만 a-module에만 SpringBootApplication을 등록했으므로, 실제 실행 시킬수 있는 jar 파일은</p><p>a-module-0.0.0.jar 이다.</p><p><img src="/images/2019/Untitled-97d20444-23a5-49dc-b013-d79fa718d076.png" alt></p><p>직접 jar를 실행시켜, 정상동작을 확인하자.</p><pre><code>java -jar a-module-0.0.0.jar </code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이 글에서는 간단하게 gradle 기반으로 spring boot 멀티 모듈을 구축하는 방법을 정리하였다.</p><p>사실 실제 멀티 모듈을 설계하고 구축하는 일은 어려운 일이고, 많은 고민이 필요해 보인다.</p><p>하지만 나처럼 gradle 자체를 잘 모르는 사람은 실제 구축 자체가 어려운 일이므로 이렇게 기록해 놓는다.</p><p><strong>해당 예제는 아래 github에 올려놓았다.</strong></p><p><a href="https://github.com/hanumoka/springboot_gradle_multimodule" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/hanumoka/springboot_gradle_multimodule</a></p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://bkjeon1614.tistory.com/38" target="_blank" rel="external nofollow noopener noreferrer">https://bkjeon1614.tistory.com/38</a></p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
            <tag> gradle </tag>
            
            <tag> multi </tag>
            
            <tag> module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 일반계정에 root권한 부여하기</title>
      <link href="/2019/09/26/ubuntu-20190926-ubuntu-grant-root/"/>
      <url>/2019/09/26/ubuntu-20190926-ubuntu-grant-root/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>ubuntu에서 이것저것 하다보면 관리자 권한으로 명령어를 실행해야 할 일이 많다.</p><p>매번 sudo 명령어 형태로 명령어를 호출하기에는 불편하다.</p><p>sudo su로 root 계정으로 로그인 하여 명령어를 호출하면 간단하지만, 이때 문제가</p><p>cd ~ 명령어 사용히 /root 로 이동한다는 것이다.</p><p>이런 경우 일반계정을 아예 root 계정의 그룹에 추가하면 해결이 된다.</p><h3 id="일반계정에-root-계정-권한-부여"><a href="#일반계정에-root-계정-권한-부여" class="headerlink" title="일반계정에 root 계정 권한 부여"></a>일반계정에 root 계정 권한 부여</h3><p>나는 현재 가상머신 ubuntu에 hanumoka-ubuntu1804라는 일반계정을 가지고 있다. (아 계정명을 너무 길게 지었다.)</p><p>일단, 환경설정 파일을 수정하기 위해 관리자로 로그인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>그리고 /etc/sudoers 파일을 수정해야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">root All&#x3D;(ALL:ALL) ALL </span><br><span class="line">일반계정명 All&#x3D;(ALL:ALL) ALL   &lt;-  이렇게 추가하자.</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled_20190928_ubuntu.png" alt></p><p>파일을 저장하자.</p><p>그리고 /etc/passwd 파일을 수정하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-eac0a2dd-be61-436b-bef2-f92f15a5d9be.png" alt></p><p>맨 위에 보면 root:x 뒤에 0:0 가 보일것이다. </p><p>앞의 0은 uid(유저아이디) 뒤의 0는 gid(그룹아이디)를 의미하는데, 슈퍼유저의 uid는 0 슈퍼유저의 gid도 0이다.</p><p>root의 권한이 필요한 일반계정의 uid와 gid를 0:0으로 변경해주자.</p><p><img src="/images/2019/Untitled-0872416e-0d60-4bdd-aa9a-98f71344151d.png" alt></p><p>내 경우 hanumoka-ubuntu1804라는 계정의 uid:gid를 0:0으로 변경했다.</p><p>해당 파일을 저장하자.</p><p>그리고 root 그룹에 일반계정 hanumoka-ubuntu1804를 포함시키자.</p><pre><code>vim /etc/group</code></pre><p><img src="/images/2019/Untitled-7b66a74d-647b-4a0d-bee0-d134d62e29a5.png" alt></p><p>파일을 열면 맨위 root:x:0: 이렇게 되어 있을 것이다.</p><pre><code>root:x:0: 를 root:x:0:일반계정명 으로 수정해주자.</code></pre><p><img src="/images/2019/Untitled-3465c469-7416-4de1-972b-834d642f3c4b.png" alt></p><p>파일을 저장하고 나온 뒤, root 권한을 부여한 계정에 접속해서 sudo 없이 명령어가 실행되는지 확인해보자.</p><p><img src="/images/2019/Untitled-82196000-db48-4c4f-977a-d24035d4f2e9.png" alt></p><p>기존에는 sudo docker ps 로 실행 해야 했지만, 이제는 docker ps 로 바로 명령어가 실행되는 것을 확인 할 수 있다.</p><p>끝.</p><p>참고로 일반계정아 root 권한을 주면 우분투 로그인시 목록에 나오지 않는다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://itgameworld.tistory.com/75" target="_blank" rel="external nofollow noopener noreferrer">https://itgameworld.tistory.com/75</a></p><p><a href="https://crasy.tistory.com/149" target="_blank" rel="external nofollow noopener noreferrer">https://crasy.tistory.com/149</a></p><p><a href="https://zetawiki.com/wiki/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%95%84%EC%9D%B4%EB%94%94_UID,_%EA%B7%B8%EB%A3%B9%EC%95%84%EC%9D%B4%EB%94%94_GID" target="_blank" rel="external nofollow noopener noreferrer">https://zetawiki.com/wiki/사용자아이디_UID,_그룹아이디_GID</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> root </tag>
            
            <tag> 권한 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot mybatis ${} 사용시 sql injection 방어하기</title>
      <link href="/2019/09/21/spring-20190921-spring-mybatis-sqlinjectionsafe/"/>
      <url>/2019/09/21/spring-20190921-spring-mybatis-sqlinjectionsafe/</url>
      
        <content type="html"><![CDATA[<h1 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h1><p>springboot</p><p>jdk1.8</p><p>mysql</p><p>mybatis</p><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>spring 개발을 할때, 난 일반적으로 mybatis를 사용했다.</p><p>음 빨리 JPA도 공부를 해야 할거 같다.</p><p>일반적으로 mybatis를 사용할 경우 ${param1}, #{param2} 이렇게 두가지 방식으로  파라미터를 받을 수 있다.</p><p>나는 보통 #{param2} 를 사용해서, 파라미터를 받는다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USERS</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> USER_ID = <span class="comment">#&#123;userId&#125;</span></span><br></pre></td></tr></table></figure><p>#{} 는 내부적으로 PreparedStatement를 사용하기 때문에  SQLInjection 공격에 안전하기 때문이다.</p><p>참고로 PreparedStatement는 값을 바인딩 하는 시점에서 전달된 값에 대한 특수문자, 쿼리등을 필터링하여 SQLinjection을 막는다.</p><p>이렇게 mybatis를 사용할때 보통 #{}를 사용하면 평화롭고, 안전한 코딩을 할 수 있다.</p><p>하지만 간혹 ${}를 사용하고 싶을 때가 있다.</p><p>바로 쿼리의 파라미터로 컬럼명을 화면에서 받고 싶은 경우인데,</p><p>보통 select 쿼리에 호출시 정렬을 하고 싶을 때 이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    USER_ID</span><br><span class="line">     ,USER_NAME</span><br><span class="line">     ,USER_AGE</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">USERS</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> $&#123;sort_column&#125; $&#123;sort_type&#125;</span><br></pre></td></tr></table></figure><p>위처럼 동적으로 파라미터를 외부에 주입 받기 위해서는 #{}가 아닌 ${}를 사용 해야 한다.</p><p>${}는 입력받은 파라미터를 쿼리에 직접 치환해주기 때문이다.</p><p>하지만 여기에는 SQLInjection에 대한 위험이 존재한다.</p><p>어떻게 하면 ${}를 사용하면서, SQL Injection을 방어 할 수 있을까?</p><p>스프링 필터를 사용해야하나?  AOP를 사용해야 하나?</p><p>고민하다가 인터넷에서 괜찮은 라이브리러를 찾았다.</p><h1 id="어노테이션으로-SQL-Injection-방어"><a href="#어노테이션으로-SQL-Injection-방어" class="headerlink" title="어노테이션으로 SQL Injection 방어"></a>어노테이션으로 SQL Injection 방어</h1><p><a href="https://github.com/rkpunjal/sql-injection-safe/" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/rkpunjal/sql-injection-safe/</a></p><p>sql-injection-safe 라는 라이브러리이다. </p><p>아이디어는 어노테이션으로 VO의 필드에 SqlInjection을 방어하는 방법이다.</p><p>아래로 가보면 간단하게 테스트 할수 있는 예제 샘플도 있다.</p><p><a href="https://github.com/rkpunjal/sql-safe-annotation-example" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/rkpunjal/sql-safe-annotation-example</a></p><p>일단 동적으로 sql의 컬럼을 받을 VO를 만들어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridDto</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String sortColumn;</span><br><span class="line">  <span class="keyword">private</span> String sortType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getter, setter 생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomethingGridDto</span> <span class="keyword">extends</span> <span class="title">GridDto</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> column_1;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> column_2;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> column_3;</span><br><span class="line">  <span class="comment">//getter, setter 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 대충 DTO를 만들었다. </p><p>자 이제 라이브러리를 추가하자. pom.xml 아래처럼 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.rkpunjal.sqlsafe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sql-injection-safe<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>라이브러리가 추가 되었다면, Sql Injection 위험이 있는 DTO의 필드에 @SQLInjectionSafe 어노테이션을 추가해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridDto</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@SQLInjectionSafe</span> String sortColumn;</span><br><span class="line">      <span class="keyword">private</span> <span class="meta">@SQLInjectionSafe</span> String sortType;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//getter, setter 생략</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>그리고 해당 DTO를 받은 컨트롤러에서 @valid를 적용해주면 된다.</p><p>굉장히 간단하게 스프링 컨트롤러에서 전달되는 파라미터에 어노테이션으로 SQL Injection을 방어 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/queryGrid"</span>, produces=APPLICATION_JSON_UTF_8)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">WebResponse <span class="title">queryGrid</span><span class="params">(@Valid @ModelAttribute()</span> SomethingGridDto paramDto) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Valid 가 동작하면서 @SQLInjectionSafe 동작한다.</p><p>만약 sortColumn 멤버변수에 SQL Injection의 위험이 되는 문구가 있는 경우 BindException 이 발생하게된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">ResponseBody</span> <span class="title">WebResponse</span> <span class="title">handleBindException</span>(<span class="title">BindException</span> <span class="title">be</span> )</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyResponseObject(<span class="keyword">false</span>,</span><br><span class="line">  getBindExceptionMessage(be) <span class="comment">// custom method to find and send an appropriate response</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/rkpunjal/sql-safe-annotation-example" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/rkpunjal/sql-safe-annotation-example</a></p><p>위 예제 샘플을 받아서 구동해보면 아래처럼 @SQLInjectionSafe 내용을 확인 할 수 있다.</p><p>SQLInjection을 정규식으로 잡아내는 것을 확인 할 수 있다.</p><p>뭔가 부족하다면 커스텀 하면 될거 같다.</p><p><img src="/images/2019/Untitled-f94f04e9-1bf2-441e-b4bd-370d5bd88c77.png" alt="SQLInjectionSafe"></p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://lng1982.tistory.com/246" target="_blank" rel="external nofollow noopener noreferrer">https://lng1982.tistory.com/246</a></p><p><a href="https://m.blog.naver.com/PostView.nhn?blogId=blogpyh&logNo=220675109307&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="external nofollow noopener noreferrer">https://m.blog.naver.com/PostView.nhn?blogId=blogpyh&amp;logNo=220675109307&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://hackbyr0k.tistory.com/2" target="_blank" rel="external nofollow noopener noreferrer">https://hackbyr0k.tistory.com/2</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
            <tag> sqlinjection </tag>
            
            <tag> sqlijnectionsafe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804에 docker 설치</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-docker/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>음 docker는 상당히 편리한 녀석이다.</p><p>VitualBox에 설치된 Ubuntu1804에 docker를 설치 해보려한다.</p><p>솔직히 이게 재대로 될지 잘 모르지만, 일단 해보자.</p><p>별거 없다. 아래 명령어를 한줄 한줄 주욱 입력해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu bionic stable&quot;</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">apt-cache policy docker-ce</span><br><span class="line"></span><br><span class="line">sudo apt install docker-ce</span><br><span class="line"></span><br><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p>[<a href="https://blog.cosmosfarm.com/archives/248/우분투-18-04-도커-docker-설치-방법/]" target="_blank" rel="external nofollow noopener noreferrer">https://blog.cosmosfarm.com/archives/248/우분투-18-04-도커-docker-설치-방법/]</a>(</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu nvm node</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-nvm-node/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-nvm-node/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>우분투에 nvm을 이용해서 node를 설치해보자.</p><p>nvm은 Node.js version manager로 여러가지 버전을 손쉽게 설치하고 거기서 원하는 버전을 골라서 사용할수 있게 해준다.</p><p>우분투 저장소에서 vnm에 필요한 패키지를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential libssl-dev</span><br></pre></td></tr></table></figure><p>그리고 nvm 설치 스크립트를 다운로드 후 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.31.0&#x2F;install.sh -o install_nvm.sh </span><br><span class="line">bash install_nvm.sh </span><br><span class="line">source ~&#x2F;.profile</span><br></pre></td></tr></table></figure><p>nvm 설치가 완료가 되었다면, 아래 명령어를 입력하여 설치 가능한 node.js 버전들을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><p>현재 LTS 버전인 10.16.2 버전을 설치해보겠다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 10.16.2</span><br></pre></td></tr></table></figure><p>설치가 끝나면 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>위 명령어로 설치된 node의 버전을 확인 할 수 있다.</p><p>추가로 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 6.0.0</span><br></pre></td></tr></table></figure><p>위처럼 만약 다른 버전의 node가 설치되어 있다면 버전을 바꿔서 사용할 수도 있다.</p><p>설치된 node 버전을 보려면 아래 명령어로 확인 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://itstory.tk/entry/Ubuntu-1604-nodejs-%EC%99%80-npm-%EC%84%A4%EC%B9%98" target="_blank" rel="external nofollow noopener noreferrer">https://itstory.tk/entry/Ubuntu-1604-nodejs-와-npm-설치</a></p><p><a href="https://zetawiki.com/wiki/%EC%9A%B0%EB%B6%84%ED%88%AC_curl_%EC%84%A4%EC%B9%98" target="_blank" rel="external nofollow noopener noreferrer">https://zetawiki.com/wiki/우분투_curl_설치</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804 VisualStudioCode 설치</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-visual-studio-code/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-visual-studio-code/</url>
      
        <content type="html"><![CDATA[<p>이번에는 우분투에 VisualStudioCode를 설치해보겠다.</p><p>다 필요 없고 아래 명령어를 순서대로 주욱 입력하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.microsoft.com&#x2F;keys&#x2F;microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><br><span class="line">sudo mv microsoft.gpg &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;microsoft.gpg</span><br><span class="line"></span><br><span class="line">sudo sh -c &#39;echo &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;packages.microsoft.com&#x2F;repos&#x2F;vscode stable main&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;vscode.list&#39;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install code</span><br><span class="line"></span><br><span class="line">sudo rm &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;vscode.list</span><br></pre></td></tr></table></figure><p><img src="/images/2019/5/Untitled-98ac3bd7-2b8b-4b30-a077-884178fb9ce6.png" alt></p><p>위처럼 설치를 확인 할 수 있다.</p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://yjcode.tistory.com/1" target="_blank" rel="external nofollow noopener noreferrer">https://yjcode.tistory.com/1</a></p><p>[<a href="https://lukelee91.github.io/blog/vscode-installation-on-ubuntu/]" target="_blank" rel="external nofollow noopener noreferrer">https://lukelee91.github.io/blog/vscode-installation-on-ubuntu/]</a>(</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudioCode </tag>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804 Git 설치하기</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-git/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-git/</url>
      
        <content type="html"><![CDATA[<p>요즘 개발하면서 과연 git없이 개발이 가능할까?</p><p>솔직히 git을 잘쓴다고는 말할 수 없지만, svn과는 차원이 다른 강력함을 가지고 있는 프로그램이다.</p><p>이번에는 우분투에 git을 설치해보자.</p><p>일단 터미널을 열고 아래 명령어로 git을 설치하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p><img src="/images/2019/4/Untitled-b20d6239-b1a3-4c97-a21f-718bdeee614d.png" alt></p><p>설치가 완료되면 아래 명령어로 git의 버전을 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/images/2019/4/Untitled-4bc40cae-89a0-4f57-935a-5328335cfc21.png" alt></p><p>위처럼 나온다면 설치가 잘 된 것이다.</p><p>이제 git의 global config를 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;유저명&quot;</span><br><span class="line">git config --global user.email &quot;아이디@이메일.com&quot;</span><br></pre></td></tr></table></figure><p>그리고 아래 명령어로 방금 설정을 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> git </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804에 IntelliJ 설치하기</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-intellij/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-intellij/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>버추얼박스에 설치된 Ubuntu1804에 본격적으로 개발환경을 잡아봐야겠다.</p><p>일단 주로 사용하는 intelliJ comunity 를 설치할 생각이다.</p><h3 id="우분투에-JDK-설치하기"><a href="#우분투에-JDK-설치하기" class="headerlink" title="우분투에 JDK 설치하기"></a>우분투에 JDK 설치하기</h3><p>일단 우분투에 intellij를 설치하기 전에 jdk를 먼저 설치해야 한다.</p><p>아래 명령어를 입력해서 jdk가 없는 것을 확인했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure><p><img src="/images/2019/3/Untitled-e7abc99f-1ad8-43c6-8053-c6387fd57dbd.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>위 명령어를 입력해서 openjdk11을 설치해보자.</p><p><img src="/images/2019/3/Untitled-5d353c8a-a013-4241-91ba-4c154ea11b8f.png" alt></p><p><img src="/images/2019/3/Untitled-584a8482-6646-4c83-94f9-783e4156aaec.png" alt></p><p>설치가 재대로 된 것을 확인 했다.</p><h3 id="우분투에-인텔리J-설치하기"><a href="#우분투에-인텔리J-설치하기" class="headerlink" title="우분투에 인텔리J 설치하기"></a>우분투에 인텔리J 설치하기</h3><p>브라우저를 열고 </p><p><a href="http://www.jetbrains.com" target="_blank" rel="external nofollow noopener noreferrer">www.jetbrains.com</a> 링크로 가서 인텔리J comunity를 다운 받자.</p><p><img src="/images/2019/3/Untitled-56ec8edd-55ec-44b7-8302-062bc628569d.png" alt></p><p><img src="/images/2019/3/Untitled-0d29e690-2fe3-44c4-9d57-66708d7581b3.png" alt></p><p>다운로드가 완료되면</p><p><img src="/images/2019/3/Untitled-9f649960-3391-4f99-bf8e-0880bea5d237.png" alt></p><p>해당 파일의 압축을 해제하자.</p><p>압축이 해제된 폴더를 /opt 경로로 이동 시키자.</p><p>리눅스이 /opt 경로는 사용 프로그램을 설치하기 위한 디렉토리라고 한다.</p><p>다운로드 한 경로에서 바로 인텔리J를 실행할 수 있지만, 프로그램 관리차원에서 해당 컨벤션을 따라가는것이 옳아보인다.</p><p><img src="/images/2019/3/Untitled-3522f642-05b4-4f2e-8455-06278e13df46.png" alt></p><p><img src="/images/2019/3/Untitled-e6493435-0681-4f5e-a509-896546337822.png" alt></p><p>/OPT 경로로 이동해서 해당 폴더의 /bin 폴더를 보면 <a href="http://idea.sh" target="_blank" rel="external nofollow noopener noreferrer">idea.sh</a> 파일이 있다. </p><p>해당 쉘 파일을 실행시키면 인텔리J 가 구동된다.</p><p><img src="/images/2019/3/Untitled-cae877cc-5431-4768-a441-73f21128fc22.png" alt></p><p>위처럼 인텔리J 동작을 확인했다.</p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://www.elex.pe.kr/entry/%EC%9A%B0%EB%B6%84%ED%88%AC-1710-IntelliJ-%EC%84%A4%EC%B9%98" target="_blank" rel="external nofollow noopener noreferrer">https://www.elex.pe.kr/entry/우분투-1710-IntelliJ-설치</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> intelliJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804 Unity tweak tool 설치 및 테마변경</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-unity-tweak-tool/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-unity-tweak-tool/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>우분투 데스크탑을 설치한 김에 나도 테마같은걸 바꿔보고 싶었다.</p><p>이번에는 Unity twak tool 과 기타 익스텐션을 이용해서 우분투 테마등을 변경해 보겠다.</p><h3 id="Unity-tweak-tool-란"><a href="#Unity-tweak-tool-란" class="headerlink" title="Unity tweak tool 란?"></a>Unity tweak tool 란?</h3><p>유니티 트윅은 윈도우로 치자면 제어판과 유사한 역할을 하는 프로그램이다.</p><p>특히 우분투 데스크탑의 테바변경에서 핵심적으로 사용된다.</p><p>테마를 설정할 수 있고, 폰트변경, 아이콘 변경, 프로그램 메뉴의 크기조정, 바로가기 및 전처 설정 등을 할 수 있다.</p><p>우분투에 기본적으로 설정이 있지만 그것에 강화판 제어판 정도로 생각이된다.</p><h3 id="Unity-tweak-tool-설치"><a href="#Unity-tweak-tool-설치" class="headerlink" title="Unity tweak tool 설치"></a>Unity tweak tool 설치</h3><p>우선 터미널을 열고 아래 명령어를 입력해서 Unity tweak tool을 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p><img src="/images/2019/2/Untitled-a899ecea-645a-4b1d-b063-9f02cbf3f58c.png" alt></p><p>설치가 완료되면 아래처럼 기능개선 이라는 프로그램을 확인 할 수 있다.</p><p><img src="/images/2019/2/Untitled-23ea743c-dcfe-4ee3-9357-985188c3eb26.png" alt></p><p><img src="/images/2019/2/Untitled-bd05a3f7-3128-488d-9604-9264fab6c0dc.png" alt></p><p>기능개선은 위와 같은 부가적인 환경설정 기능등을 제공한다.</p><h3 id="Adapta-테마-설치하기"><a href="#Adapta-테마-설치하기" class="headerlink" title="Adapta 테마 설치하기"></a>Adapta 테마 설치하기</h3><p>터미널에서 아래명령어3줄을 차례로 입력하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get-repository ppa:tista&#x2F;adapta</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get inatall adapta-gtk-theme</span><br></pre></td></tr></table></figure><p>아까 설치한 기능개선 프로그램을 종료하고 다시 킨다.</p><p>모양새 → 테마→ 프로그램 에서 방금 설치한 Adapta 테마를 선택할수 있다. </p><p><img src="/images/2019/2/Untitled-b8f0d0f1-db58-493b-bc5d-f364e482eb4f.png" alt></p><p>위처럼 프로그램 창이 어두운 형태로 변한것을 확인 할 수 있다. </p><p>여러 색상이 있으니 원하는 것을 선택하면 된다.</p><h3 id="Gnome-shell-Extention-설치로-상단-봐-테마-변경"><a href="#Gnome-shell-Extention-설치로-상단-봐-테마-변경" class="headerlink" title="Gnome shell Extention 설치로 상단 봐 테마 변경"></a>Gnome shell Extention 설치로 상단 봐 테마 변경</h3><p>우분투 상단바 테마는 Gnome 쉘에 포함되어 있다고 한다.</p><p>위 상단바 테마를 수정하려면 Gnome shell Extention 을 설치해야 한다.</p><p>터미널에서 아래명령어를 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p>패키지명이 왜 크롬인지는 잘 모르겠다.</p><p>그리고 우분투에서 파이어폭스 브라우저를 열고 아래 링크에 접속하자.</p><p><a href="https://extensions.gnome.org/extension/19/user-themes" target="_blank" rel="external nofollow noopener noreferrer">https://extensions.gnome.org/extension/19/user-themes</a></p><p><img src="/images/2019/2/Untitled-20e83fc3-36f5-48d7-b339-7fafbb519c82.png" alt></p><p>Click here install borwer extension을 클릭해서 브라우저 익스텐션을 설치하자.</p><p><img src="/images/2019/2/Untitled-750d8935-e401-4617-ad4e-475ee481f662.png" alt></p><p><img src="/images/2019/2/Untitled-b80becd2-2c58-48fa-b367-22e15b32c64c.png" alt></p><p><a href="https://addons.mozilla.org/ko/firefox/addon/gnome-shell-integration/" target="_blank" rel="external nofollow noopener noreferrer">https://addons.mozilla.org/ko/firefox/addon/gnome-shell-integration/</a></p><p>반드시 파이어폭스 브라우저를 사용해야 한다.</p><p>설치가 끝난뒤 파이어폭스 브라우저에서 아래 처럼 User Themes로 접근한다.</p><p><img src="/images/2019/2/Untitled-ac641281-1c0c-4946-b0b2-8043aa6e6610.png" alt></p><p><img src="/images/2019/2/Untitled-73afb19e-70c5-4153-884c-cbca7048afe7.png" alt></p><p>Off로 되어있던 설정을 On으로 변경해준다.</p><p><img src="/images/2019/2/Untitled-90b3072f-38d3-46fb-a112-0274c3147090.png" alt></p><p>설치하자.</p><p>설치가 완료된 다음, 다시 기능개선 프로그램을 종료하고 다시 열자.</p><p><img src="/images/2019/2/Untitled-add8aac2-9e1e-40f7-b75e-e57c1fcc1ae2.png" alt></p><p>모양세에 다시 들어가보면 쉘 항목이 활성화 되어있다. </p><p>여기서 이것저것 바꿔보면 우분투의 상단바의 테마가 변경하는 것을 알 수 있다.</p><h3 id="Flat-remix-아이콘-테마-적용하기"><a href="#Flat-remix-아이콘-테마-적용하기" class="headerlink" title="Flat remix 아이콘 테마 적용하기"></a>Flat remix 아이콘 테마 적용하기</h3><p>Flat remix라는 패키지를 설치해서 우분투의 아이콘 테마도 변경 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:daniruiz&#x2F;flat-remix</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install flat-remix</span><br></pre></td></tr></table></figure><p>위 명령을 순차적으로 입력해서 flat remix를 설치하자.</p><p>설치가 완료된되 기능개선을 재시작하면 아래처럼 아이콘 테마를 설정 할 수 있다.</p><p><img src="/images/2019/2/Untitled-5ac33c1d-fa00-46e9-8457-b9fe5423319f.png" alt></p><h3 id="Dash-to-Dock-설치고-Dock-테마-변경하기"><a href="#Dash-to-Dock-설치고-Dock-테마-변경하기" class="headerlink" title="Dash to Dock 설치고 Dock 테마 변경하기"></a>Dash to Dock 설치고 Dock 테마 변경하기</h3><p>아래 링크애 파이어폭스로 접근하자.</p><p><a href="https://extensions.gnome.org/extension/307/dash-to-dock" target="_blank" rel="external nofollow noopener noreferrer">https://extensions.gnome.org/extension/307/dash-to-dock</a></p><p><img src="/images/2019/2/Untitled-28ffa173-de0c-463a-a7fb-57be01b43d3c.png" alt></p><p>상태를 on으로 변경하고 설치하자.</p><p><img src="/images/2019/2/Untitled-714f30f2-0983-41df-a10a-72ddd9fa85f7.png" alt></p><p>설치가 되면 벌써 왼쪽의 독의모양이 변경된 것을 확인 할 수있다.</p><p>다시 기능개선에 들어가서 확장 → Dash to dock에 환경설정에 들어가자.</p><p><img src="/images/2019/2/Untitled-e7b91086-2866-4fce-871a-1c95fd406c8e.png" alt></p><p>위처럼 독의 위치를 왼쪽이 아니라 아래로 옮길수 있다.</p><p>최종적으로 아래와 같은 화면을 만들었다. 바탕화면이 마음에 안들지만 그건 나중에 바꿔야 겠다.</p><p><img src="/images/2019/2/Untitled-b94bd3e9-0691-48f4-9f3c-51e55b7fd426.png" alt></p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://smartaedi.tistory.com/137" target="_blank" rel="external nofollow noopener noreferrer">https://smartaedi.tistory.com/137</a></p><p><a href="https://programmingsummaries.tistory.com/389" target="_blank" rel="external nofollow noopener noreferrer">https://programmingsummaries.tistory.com/389</a></p><p><a href="https://codevkr.tistory.com/89" target="_blank" rel="external nofollow noopener noreferrer">https://codevkr.tistory.com/89</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtulbox </tag>
            
            <tag> unity tweak tool </tag>
            
            <tag> 테마변경 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Virtualbox Ubunto1804 한영변경키</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-language-change-key/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-language-change-key/</url>
      
        <content type="html"><![CDATA[<p>버추얼박스에 설치된 우분투에서 한영키를 눌렀을때 한영이 변경되지 않는다.</p><p>이번에는 이 문제를 해결해보겠다.</p><p>일단 Virtualbox Ubuntu에서 게스트 확장 프로그램을 설치해야한다.</p><p>장치 - 게스트 확장 CD 이미지 삽입을 클릭하자.</p><p><img src="/images/2019/1/Untitled-64ebf1d9-605e-4ccd-83f5-29c971289172.png" alt></p><p>OS 업그레이드 완료후 재시작 하면, virtualbox에서 장치 → 게스트 확장 CD 이미지 삽입을 클릭하자.</p><p><img src="/images/2019/1/Untitled-20a1651b-e860-41c4-9de2-30d9cc0ced26.png" alt></p><p>위와 같은 창이 열린다 실행을 클릭하면 자동으로 터미널이 열리고 무언가 설치가 된다.</p><p><img src="/images/2019/1/Untitled-3a61933d-32ad-437e-8533-95faaaed1e0d.png" alt></p><p>위처럼 Press Return to close this windows 라는 문구가 나오면 터미널에서 엔터를 클릭해서 터미널을 닫아주자.</p><p>그리고 우분투를 재시작 하자.</p><p>그리고 우분투의 설정으로 들어가자.</p><p><img src="/images/2019/1/Untitled-e0c96162-3ba4-4724-84cd-e3c8c974af28.png" alt></p><p>지역 및 언어에서 입력소스에서 한국어(101/104키 호환)을 선택하고 마이너스(-)를 눌러 제거하자.</p><p><img src="/images/2019/1/Untitled-fe05268f-f4db-481f-8fc2-36236c05a9a0.png" alt></p><p>그리고 톱니바퀴 아이콘을 클릭하자.</p><p><img src="/images/2019/1/Untitled-87c824be-838c-4ec3-b341-0f98fe941737.png" alt></p><p>이처럼 현재 설정된 한영 변환키가 보인다.</p><p>나는 현재 레오폴드 FC660c 키보드를 사용중인데, 보통 키보드보다 키가 적은 키보드다 보니 한영변환키 대신 오른쪽 Alt키를 사용해야 한다.</p><p>위 화면에서 추가버튼을 누르자.</p><p><img src="/images/2019/1/Untitled-407da2f7-c4c0-435d-9d4f-c65650c9be46.png" alt></p><p>새로운 창이 나오는데 여기서 원하는 한영키를 입력하면 위처럼 해당 키가 보인다.</p><p>확인을 누르자.</p><p>터미널을 열고 한영키가 제대로 동작하는지 확인해보자.</p><p><img src="/images/2019/1/Untitled-6e0de10a-67d4-42c2-9954-2703b12831d0.png" alt></p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p>[<a href="https://webnautes.tistory.com/1199]" target="_blank" rel="external nofollow noopener noreferrer">https://webnautes.tistory.com/1199]</a>(</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> 한영변환 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804 데스트탑 성능모니터링 gnome usage</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-gnome-usage/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-gnome-usage/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>VirtualBox에 설치한 Ubuntu라 일반적으로 PC에 설치된 우분투 보다는 속도가 안나올 수 있다.</p><p>이 우분투를 개발환경으로 사용하려 하는데, 속도가 너무 안나오면 이것 또한 문제이다.</p><p>이번에는 우분투 데스크탑에서 실시간으로 성능 모니터링을 할수 있는 방법을 알아보겠다.</p><p>우분투 18.04 에는 기본적으로 시스템 정보, 시스템 감시라는 프로그램이 있지만 나는 gnome usage라는 프로그램을 설치해서 사용해 보겠다.</p><p><img src="/images/2019/Untitled-80b2ef3a-72fb-4f2b-8296-a3d4c702cfa4.png" alt></p><p>우분투 소프트웨어에서 grome usage 를 검색해서 설치하자.</p><p>설치하면 아래처럼 시스템 모니터링 화면이 실시간으로 나온다.</p><p><img src="/images/2019/Untitled-813468bc-41f0-4346-9778-c3c50795e9ec.png" alt></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> gnome usage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu1804에 크롬브라우저 설치</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-chrome/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-chrome/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>우분투 데스크탑을 설치 했으니, 음 뭔가 일반적이 pc처럼 사용하기 위한 필수적인 프로그램들을 설치해보자.</p><h3 id="우분투에-구글-크롬-설치하기"><a href="#우분투에-구글-크롬-설치하기" class="headerlink" title="우분투에 구글 크롬 설치하기"></a>우분투에 구글 크롬 설치하기</h3><p>기본적으로 파이어폭스가 있지만, 구글크롬만한 브라우저가 어디 있을까?</p><p>일단 우분투에서 터미널을 열고 크롬 브라우저 패키지 설치용 인증키를 받자.</p><p>아래 명령어를 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https:&#x2F;&#x2F;dl-ssl.google.com&#x2F;linux&#x2F;linux_signing_key.pub | sudo apt-key add -</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-bd83912f-0b74-48be-968e-9da370252ac3.png" alt></p><p>그리고 아래 명령어도 입력해주자. 실제 구글크롬 패키지를 다운 받는 설정정보인듯 하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#39;echo &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google.list&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-16d4a724-cdc7-451a-9c13-35510664b6c0.png" alt></p><p>그리고 아래 명령으로 패키지 리스트를 업데이트 해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-dc322d97-d21f-4554-90a0-84e2f2b026db.png" alt></p><p>아래 명령으로 크롬을 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-89e4b1f6-2db4-4f8f-9f77-2e065aa0c80c.png" alt></p><p>설치를 위해 생성햇던 파일을 지워주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google*</span><br><span class="line">sudo rm -rf &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google.list</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-b1f19b2c-8dbf-498a-9ff4-6e534b84afb1.png" alt></p><p>위 아이콘을 눌러 설치된 크롬을 확인하자.</p><p><img src="/images/2019/Untitled-6fe37658-8910-48df-a200-07835c008fd8.png" alt></p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://webnautes.tistory.com/1184" target="_blank" rel="external nofollow noopener noreferrer">https://webnautes.tistory.com/1184</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu1804 vim설치</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-vim/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="vim-설치하기"><a href="#vim-설치하기" class="headerlink" title="vim 설치하기"></a>vim 설치하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>위 두줄로 아주 간단하게 설치가 된다.</p><p>하지만 vim을 제대로 사용하려면 vim 설정파일을 만들어 줘야 한다.</p><h3 id="vim-설정파일-셋팅"><a href="#vim-설정파일-셋팅" class="headerlink" title="vim 설정파일 셋팅"></a>vim 설정파일 셋팅</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~&#x2F;.vimrc</span><br></pre></td></tr></table></figure><p>위 명령어로 home 디렉토리에 .vimrc라는 vim 설정파일을 생성하자.</p><p>그리고 아래 내용을 복사 붙여넣기 하자.</p><p>우분투에 붙여 넣기 할때에는 Shift+Insert 키를 눌러주면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">set number    &quot; line 표시</span><br><span class="line">set ai    &quot; auto indent</span><br><span class="line">set si &quot; smart indent</span><br><span class="line">set cindent    &quot; c style indent</span><br><span class="line">set shiftwidth&#x3D;4    &quot; 자동 공백 채움 시 4칸</span><br><span class="line">set tabstop&#x3D;4    &quot; tab을 4칸 공백으로</span><br><span class="line">set ignorecase    &quot; 검색 시 대소문자 무시</span><br><span class="line">set hlsearch    &quot; 검색 시 하이라이트</span><br><span class="line">set nocompatible    &quot; 방향키로 이동 가능</span><br><span class="line">set fileencodings&#x3D;utf-8,euc-kr    &quot; 파일 저장 인코딩 : utf-8, euc-kr</span><br><span class="line">set fencs&#x3D;ucs-bom,utf-8,euc-kr    &quot; 한글 파일은 euc-kr, 유니코드는 유니코드</span><br><span class="line">set bs&#x3D;indent,eol,start    &quot; backspace 사용가능</span><br><span class="line">set ruler    &quot; 상태 표시줄에 커서 위치 표시</span><br><span class="line">set title    &quot; 제목 표시</span><br><span class="line">set showmatch    &quot; 다른 코딩 프로그램처럼 매칭되는 괄호 보여줌</span><br><span class="line">set wmnu    &quot; tab 을 눌렀을 때 자동완성 가능한 목록</span><br><span class="line">syntax on    &quot; 문법 하이라이트 on</span><br><span class="line">filetype indent on    &quot; 파일 종류에 따른 구문 강조</span><br><span class="line">set mouse&#x3D;a    &quot; 커서 이동을 마우스로 가능하도록</span><br></pre></td></tr></table></figure><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://gabii.tistory.com/entry/Ubuntu-vim-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95" target="_blank" rel="external nofollow noopener noreferrer">https://gabii.tistory.com/entry/Ubuntu-vim-설치-및-설정</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> vim </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualbox ubuntu1804 ftp 설치 및 접근(sftp)</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-ftp/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-ftp/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>개발환경 용도로 사용하려는 ubuntu 1804 이미지에 ftp를 설치하고 호스트PC인 windows에서 파일질라로 접근해서 파일을 전송 해보려 한다.</p><p>아 별것 아닌데, 리눅스를 잘 몰라서 엄청난 시간을 헤매었다.</p><p>결론으로 sftp 접근으로 성공하였다.</p><p>해당 내용은 실 서버로 사용하는 ubuntu ftp 접근 설명이 아니라, 로컬에서 virtualbox에 설치된 개발환경용 ubuntu 1804에 ftp 설치 방법을 설명하는 것이다.</p><p>ftp 사용이 되는것이 목적이므로, 방화벽 설명등 기타 내용은 포함하고 있지 않다.</p><hr><h3 id="virtualbox에서-ubuntu-ftp-포트포워딩-설정"><a href="#virtualbox에서-ubuntu-ftp-포트포워딩-설정" class="headerlink" title="virtualbox에서 ubuntu ftp 포트포워딩 설정"></a>virtualbox에서 ubuntu ftp 포트포워딩 설정</h3><p>일단 virtualbox에서 해당 이미지의 설정으로 들어가 아래처럼 ftp 용 포트포워딩 설정을 해주자.</p><p>아 참고로 난 NAT 네트워크 설정으로 사용중이다.</p><p><img src="/images/2019/Untitled-eeb9f885-a11e-41d7-9969-f928484bbdff.png" alt></p><p>말 그대로 호스트PC에 22포트로 요청을 게스트IP 10.0.2.15:22로 포트포워딩 한다는 설정이다.</p><p>게스트IP는 ifconfig로 확인하시길, 별다른 설정을 안했다면 위와 동일 할 것이다.</p><h3 id="우분투에-FTP-설치하기"><a href="#우분투에-FTP-설치하기" class="headerlink" title="우분투에 FTP 설치하기"></a>우분투에 FTP 설치하기</h3><p>이제 해당 우분투 이미지를 실행하고 FTP 서버를 설치하자.</p><p>아래 명령어로 패키지를 최신화 하고 업그레이드를 일단 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>그리고 아래 명령어로 ftp를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-f2a71105-92bc-4ee7-bd5c-14d62553157f.png" alt></p><p>이제  ftp설정을 해주자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure><p>그리고 그 내용을 모두 지우고 아래 내용으로 치환하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">listen&#x3D;NO</span><br><span class="line">listen_ipv6&#x3D;YES</span><br><span class="line">anonymous_enable&#x3D;NO</span><br><span class="line">local_enable&#x3D;YES</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line">local_umask&#x3D;022</span><br><span class="line">dirmessage_enable&#x3D;YES</span><br><span class="line">use_localtime&#x3D;YES</span><br><span class="line">xferlog_enable&#x3D;YES</span><br><span class="line">connect_from_port_20&#x3D;YES</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line">allow_writeable_chroot&#x3D;YES</span><br><span class="line">secure_chroot_dir&#x3D;&#x2F;var&#x2F;run&#x2F;vsftpd&#x2F;empty</span><br><span class="line">pam_service_name&#x3D;vsftpd</span><br><span class="line">pasv_enable&#x3D;Yes</span><br><span class="line">pasv_min_port&#x3D;10000</span><br><span class="line">pasv_max_port&#x3D;11000</span><br><span class="line">user_sub_token&#x3D;$USER</span><br></pre></td></tr></table></figure><p>vsftpd.conf 파일을 저장하고, ftp를 재시작하고 서비스가 항상 동작하도록 설정하자. </p><p>아래 명령어를 순차적으로 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop vsftpd.service</span><br><span class="line">sudo systemctl start vsftpd.service</span><br><span class="line">sudo systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure><p>그리고 아래 명령어로 서비스가 재대로 동작중인지 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status vsftpd</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-810ab2cd-673d-490b-825e-517fe4494f60.png" alt></p><p>이제 virtualbox ubuntu18.04에서 ftp로 접속해서 동작을 하는지 한번 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 127.0.0.1</span><br></pre></td></tr></table></figure><p>터미널 창에 위 명령어로 접속을 시도해보자.</p><p><img src="/images/2019/Untitled-03c99918-2621-4950-b406-bf0470a40590.png" alt></p><p>위처럼 접근이 가능한지 확인 할수 있다.</p><h3 id="호스트-PC-windows10-에서-파일질라로-게스트PC-Ubuntu1804-에-접근하기"><a href="#호스트-PC-windows10-에서-파일질라로-게스트PC-Ubuntu1804-에-접근하기" class="headerlink" title="호스트 PC(windows10)에서 파일질라로 게스트PC(Ubuntu1804)에 접근하기"></a>호스트 PC(windows10)에서 파일질라로 게스트PC(Ubuntu1804)에 접근하기</h3><p>파일질라는 무료라 구글에서 검색해서 받으면 된다.</p><p>파일질라를 열자.</p><p>프로토콜을 SFTP로 설정하고 계정정보를 입력하고 연결해보자.</p><p><img src="/images/2019/Untitled-46e85a25-25d9-43aa-8ad6-5fab34b09cce.png" alt></p><p><img src="/images/2019/Untitled-0d1abfd8-32a2-4ea2-891d-f0fd75294b09.png" alt></p><p>위처럼 접속을 된 것을 확인했다.</p><p>파일 업로드 다운로드 모두 확인함. </p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://dejavuqa.tistory.com/251" target="_blank" rel="external nofollow noopener noreferrer">https://dejavuqa.tistory.com/251</a></p><p><a href="https://nov19.tistory.com/64" target="_blank" rel="external nofollow noopener noreferrer">https://nov19.tistory.com/64</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filezilla </tag>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> ftp </tag>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu virtualbox ssh</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-ssh/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>virtualbox에 설치한 ubuntu1804에 ssh를 설치하고 호스트PC에서 putty로 접근하는 접을 알아보자.</p><h3 id="virtualbox-network-설정"><a href="#virtualbox-network-설정" class="headerlink" title="virtualbox network 설정"></a>virtualbox network 설정</h3><p>나는 virtualbox ubuntu 네트워크 설정을 nat로 설정하고 사용중이다.</p><p>일단 virtualbox ubuntu 에 접속해서 아이피를 확인해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-27e68e51-b5a1-4425-b309-8e90bc43ba60.png" alt></p><p>위를 보면 디폴트로 10.0.2.15로 지정되어 있는 것을 확인 할 수 있다.</p><p>VirtualBox에서 해당 이미지으 설정에 네트워크로 들어가자.</p><p><img src="/images/2019/Untitled-43075031-83dd-49e8-9b14-6e186f6b1007.png" alt></p><p>고급을 눌러주자.</p><p>참고로 가상머신 OS를 종료하지 않고 설정해도 바로 적용된다.</p><p><img src="/images/2019/Untitled-7084f1e4-7e42-4a9a-a07e-ddea670f8933.png" alt></p><p>포트 포워딩을 클릭하자.</p><p><img src="/images/2019/Untitled-afa803a6-b917-4019-b56a-540004d08d2c.png" alt></p><p>위 처럼 입력해주자.</p><p>의미는 127.0.0.1:22로 접근시도시 Virtualbox에 가상머신의 10.0.2.15:22 로 포트포워딩 해준다는 의미이다.</p><p>확인 버튼으로 설정을 저장하자.</p><h3 id="Ubuntu18-04-ssh-설치하기"><a href="#Ubuntu18-04-ssh-설치하기" class="headerlink" title="Ubuntu18.04 ssh 설치하기"></a>Ubuntu18.04 ssh 설치하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-73f72e7a-2a36-4d4f-9111-fa35d0daf141.png" alt></p><p>위 명령으로 ubuntu에 ssh를 설치하자.</p><p>설치된 ssh에 상세 설정을 변경하려면 아래 내용으로 수정해주자.</p><p>나는 그냥 디폴트 설정을 쓰려 하기때문에 생략하겠다.(포트 변경등을 하려면 수정해야한다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><p><img src="/images/2019/Untitled-8d467d52-fc52-4474-ad7f-b82d45210575.png" alt></p><p>해당 파일을 보면 디폴트 설정이 보이며 수정하려면 주석을 해제하고 수정하면 된다.</p><h3 id="호스트PC에서-게스트-Ubuntu에-ssh-접속하기"><a href="#호스트PC에서-게스트-Ubuntu에-ssh-접속하기" class="headerlink" title="호스트PC에서 게스트 Ubuntu에 ssh 접속하기"></a>호스트PC에서 게스트 Ubuntu에 ssh 접속하기</h3><p>호스트 pc인 windows10에서 putty라는 ssh 접속 프로그램을 사용할 것이다.</p><p>putty는 무료 프로그램이니 구글에서 검색해서 다운 받으면 된다.</p><p><img src="/images/2019/Untitled-3646d9ff-8a3a-4a6a-af2b-1f17c4c650e5.png" alt></p><p>위처럼 로컬호스트에 22번 포트로 접속경로를 입력하고 open을 눌러주자.</p><p><img src="/images/2019/Untitled-efcf3fe5-a26f-419f-a039-18260ef96aee.png" alt></p><p>정상적으로 접속이 된다면 위처럼 화면이 나올것이다 예를 눌러주자.</p><p><img src="/images/2019/Untitled-3a3bfc19-75b3-4eca-8544-76d6ae44d1ff.png" alt></p><p>위처럼 접속이 되는 것을 확인 할 수 있다.</p><p>아 참고로 ubuntu18.04 에서 root에 대한 정책이 변경되었는지, 디폴트로 접속이 되질 않는다.</p><p>뭔가 설정으로 root계정을 강제로 활성화 시켜줘야 사용이 가능한가보다.</p><p>그냥 아래 명령어로 ubuntu에 접속 계정을 확인한 다음에 접속하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://sancs.tistory.com/110" target="_blank" rel="external nofollow noopener noreferrer">https://sancs.tistory.com/110</a></p><p><a href="https://thdev.net/555" target="_blank" rel="external nofollow noopener noreferrer">https://thdev.net/555</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ssh </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>버추얼박스 ubuntu에 복사 붙여넣기(클립보드)</title>
      <link href="/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-copy-paste/"/>
      <url>/2019/08/17/ubuntu-20190817-ubuntu-virtualbox-copy-paste/</url>
      
        <content type="html"><![CDATA[<p>Virtualbox에 Ubuntu1804를 설치했다.</p><p>호스트 PC인 Windows10에서 복사한 내용을 게스트PC인 Virtualbox의 Ubuntu에 붙여넣기가 하고 싶은데, 되지가 않는다. </p><p>인터넷을 찾아보니 아주 간단하게 해결이 된다.</p><p>일단 Virtualbox Ubuntu에서 게스트 확장 프로그램을 설치해야한다.</p><p>장치 - 게스트 확장 CD 이미지 삽입을 클릭하자.</p><p><img src="/images/2019/Untitled-64ebf1d9-605e-4ccd-83f5-29c971289172.png" alt></p><p>OS 업그레이드 완료후 재시작 하면, virtualbox에서 장치 → 게스트 확장 CD 이미지 삽입을 클릭하자.</p><p><img src="/images/2019/Untitled-20a1651b-e860-41c4-9de2-30d9cc0ced26.png" alt></p><p>위와 같은 창이 열린다 실행을 클릭하면 자동으로 터미널이 열리고 무언가 설치가 된다.</p><p><img src="/images/2019/Untitled-3a61933d-32ad-437e-8533-95faaaed1e0d.png" alt></p><p>위처럼 Press Return to close this windows 라는 문구가 나오면 터미널에서 엔터를 클릭해서 터미널을 닫아주자.</p><p>그리고 우분투를 종료하자.</p><p>그리고 이미지의 설정에 들어가서 클립보드 공유를 양방향으로 설정하면 된다.</p><p><img src="/images/2019/Untitled-b0ca558c-612f-4882-8b91-d93540817187.png" alt></p><p>아래처럼 윈도우의 note에서 텍스트를 복사해서 게스트 우분투 터미널에 복사가 되는 것을 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-de71bf43-65aa-4424-abc7-95d326d55d9a.png" alt></p><p><img src="/images/2019/Untitled-8affdab9-eb74-4b42-a5cb-352b5b05a019.png" alt></p><p>끝!!!</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://extrememanual.net/8257" target="_blank" rel="external nofollow noopener noreferrer">https://extrememanual.net/8257</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> ubuntu1804 </tag>
            
            <tag> 복사 </tag>
            
            <tag> 붙여넣기 </tag>
            
            <tag> 클립보드 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox에 Ubuntu 18.04 설치하기</title>
      <link href="/2019/08/15/ubuntu-20190815-ubuntu-1084-virtualbox/"/>
      <url>/2019/08/15/ubuntu-20190815-ubuntu-1084-virtualbox/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>내가 VirtualBox에 Ubuntu 18.04를 설치하려는 이유는…</p><p>VirtualBox에 Ubuntu OS에 개발환경을 셋팅을 하려 하기 때문이다.</p><p>VirtualBox에 Ubuntu 개발환경을 이미지로 만들면, 회사에서 인터넷 망이든 개발망이든 자유롭게 내가 원하는 상태의 개발환경을 가질수 있을거라 생각된다.(지금은… 일단 구축해보고, 성능과 문제점, 사용상 불편함 등을 체크해 봐야 할것 같다.)</p><hr><h3 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h3><p>Vitualbox (공짜이니 구글에서 검색해서 windows10에 설치)</p><p>Ubuntu18.04.iso 파일(역시 구글에 금색해서 다운로드)</p><hr><h1 id="virtualbox에-Ubuntu1804-설치하기"><a href="#virtualbox에-Ubuntu1804-설치하기" class="headerlink" title="virtualbox에 Ubuntu1804 설치하기"></a>virtualbox에 Ubuntu1804 설치하기</h1><h3 id="virtualbox-이미지를-준비하자"><a href="#virtualbox-이미지를-준비하자" class="headerlink" title="virtualbox 이미지를 준비하자."></a>virtualbox 이미지를 준비하자.</h3><p>일단 먼저 설치된 virtualbox를 열고 머신 → 새로만들기를 클릭하자.</p><p><img src="/images/2019/Untitled-29b6f9a6-216a-4645-abb5-87db7e0b63b2.png" alt></p><p>그러면 다음과 같은 창이 열릴것이다.</p><p><img src="/images/2019/Untitled-7393009b-2b34-45b6-8d3b-c817fe930e99.png" alt></p><p>머신폴더는 여유공간이 넉넉한 드라이브를 선택해야 한다.</p><p>나는 50GB의 이미지를 생성할 예정이다.</p><p>종류와 버전은 그냥 두고 다음을 누르자.</p><p><img src="/images/2019/Untitled-9d1722ab-a739-475d-8733-075189a579d5.png" alt></p><p>메모리 크기를 8192MB로 잡았다. 나중에 수정이 가능하니 상황에 따라 적절하게 잡아주자.</p><p>다음을 눌러주자.</p><p><img src="/images/2019/Untitled-5559f8b2-4110-45b6-976e-221bde82f672.png" alt></p><p>지금 새 가상 하드 디스크 만들기를 선택하고 만들기를 클릭하자.</p><p><img src="/images/2019/Untitled-b007f218-c903-429f-99ad-da0367089374.png" alt></p><p>VDI를 선택하고 다음을 클릭하자.</p><p><img src="/images/2019/Untitled-8218d459-2e1b-49de-8a2d-e096a0d2132b.png" alt></p><p>고정 크기를 선택하고 다음을 누르자.</p><p><img src="/images/2019/Untitled-8d9ea907-aae8-48a6-9e7a-f5809137708e.png" alt></p><p>내 경우에는 개발환경을 위해 어느정도 넉넉한 공간이 필요할 것이라 생각되어 50GB를 고정으로 잡았다.</p><p>만들기를 클릭하자.</p><p><img src="/images/2019/Untitled-cdb526e2-48d8-4c5b-b366-1bef208f5c8f.png" alt></p><p>위 화면이 나오면서 이미지를 만들기 시작한다. 시간이 20분 정도 걸리니 커피를 한잔 하고 오자.</p><p><img src="/images/2019/Untitled-49c89ee1-535a-4602-85c2-23742375ace8.png" alt></p><p>시간이 지나면 이미지가 완성되고 위처럼 이미지가 생성된 것을 확인 할 수 있다.</p><p><img src="/images/2019/Untitled-85c0459e-e668-48ef-be24-1583862c8a47.png" alt></p><p>혹시 모르니 일단 안전을 위해 이미지 스냅샷을 만들어 놓자.</p><p><img src="/images/2019/Untitled-ac21b6bd-2fd3-4c52-8b1c-e9dba6a405fd.png" alt></p><p>스냅산 이름을 입력하고 확인을 누르자.</p><p><img src="/images/2019/Untitled-bf1cd512-0bd2-4379-b4f9-9abee85bbd6b.png" alt></p><p>위처럼 스냅샷을 확인 할수있다.</p><p>시간이 오래걸리는 작업등은 virtualbox의 스냅샷을 이용해 미리미리 저장해 놓다.</p><p>혹시나 뭔가 작업하다가 망가졌을 경우 아주 편리하다.</p><h3 id="우분투-설치전-이미지의-설정-조정"><a href="#우분투-설치전-이미지의-설정-조정" class="headerlink" title="우분투 설치전 이미지의 설정 조정."></a>우분투 설치전 이미지의 설정 조정.</h3><p><img src="/images/2019/Untitled-729249a5-e65b-4da7-86b2-316e8d80257d.png" alt></p><p>생성된 이미지를 마우스 우클릭 후 설정을 선택하자.</p><p><img src="/images/2019/Untitled-8bfd7ed4-4f7b-434c-bd7b-51d4c426770b.png" alt></p><p>설정 창에서 시스템으로 이동해서 마더보드 탭으로 진입하고 부팅순서에 플로피 디스크 항목을 선택 해재하자.</p><p><img src="/images/2019/Untitled-c2d7233f-05ea-42dd-ab0b-ca96eb83ba21.png" alt></p><p>프로세서 탭으로 이동해서 프로세서 개수를 최대치로 올려준다.</p><p>위에서 이미지 프로세스 설정으로 호스트 컴퓨터의 프로세스를 공유해서 같이 사용한다고 한다.</p><p><img src="/images/2019/Untitled-4c116825-11d9-4342-aee3-549a5f24009b.png" alt></p><p>디스플레이 항목으로 이동해서 화면탭으로 이동 후 비디오 메모리를 최대치로 올려준다.</p><p>그리고 확인을 눌러 설정창을 닫아 설정을 저장하자.</p><h3 id="이미지에-Ubuntu1804-설치하기"><a href="#이미지에-Ubuntu1804-설치하기" class="headerlink" title="이미지에 Ubuntu1804 설치하기"></a>이미지에 Ubuntu1804 설치하기</h3><p><img src="/images/2019/Untitled-507dc6c2-60ca-40cd-9881-440a23c3a5c7.png" alt></p><p>이미지를 우클릭후 시작 → 일반시작을 선택하자.</p><p><img src="/images/2019/Untitled-2e748880-2771-4c36-8319-0c3baa68dca6.png" alt></p><p>위처럼 이미지가 시동되면서 시동디스크를 선택하라는 창이 나온다. </p><p>미리 다운 받은 Ubuntu18.04.iso 파일을 선택하고 시작을 눌러주자.</p><p><img src="/images/2019/Untitled-84ff1b7f-1efb-4cb8-b5f1-5cd48054f884.png" alt></p><p>언어에서 한국어를 설치하고 Ubuntu 체험하기를 선택하자.</p><p>바로 Ubuntu를 설치하지 않고 체험하기를 선택하는 이유는 virtualbox에서 ubuntu를 설치할때 해상도가 맞지 않아 문제가 있기 때문에, 미리 해상도를 조절하고 설치하기 위함이다.</p><p><img src="/images/2019/Untitled-3a016c5c-33d8-47fa-b385-8fd5dfcde503.png" alt></p><p>위처럼 체험용 우분투가 열리고 파란식 표시를 따라서 환경설정으로 이동하자.</p><p><img src="/images/2019/Untitled-847b5a5a-2dae-4e0c-b25e-7ec456b2c327.png" alt></p><p>위처럼 환경 설정 창이 열리는데, 오른쪽 위의 네모를 선택해서 창을 작은창으로 변경한다.</p><p><img src="/images/2019/Untitled-43bd09da-f10e-48b6-8dee-4cf094dfaea9.png" alt></p><p>작아진 설정창에서 Devices를 찾아 선택하자.</p><p><img src="/images/2019/Untitled-6bc246fd-4c56-4e11-a4bf-c6472ef159cd.png" alt></p><p>Resolution을 선택하고 1360 x 768을 선택하자. 임시로 설치를 위한 해상도 이다 나중에 호스트 머신에 딱맞는 해상도 셋팅을 따로 할 것이다.</p><p><img src="/images/2019/Untitled-898b0944-0259-41c1-943c-5dcfe7e98e5c.png" alt></p><p>이 환경설정 창이 너무 커서 화면에 잘 안보이는 경우가 있는데 앞서 창의 크기를 작게 만들었기 때문에 창의 크기를 마우스로 적절하게 이동 시켜서 내용을 입력하고 적용 버튼을 클릭하자.</p><p><img src="/images/2019/Untitled-fcc302ad-e4e3-4cc4-a85a-b9d4a2fb4228.png" alt></p><p>위처럼 해상도가 변경된 것을 확인할 수 있다. Keep Changes를 클릭하자.</p><p><img src="/images/2019/Untitled-13090dd9-a216-449d-a527-c731012efa63.png" alt></p><p>바탕화면에 있는 Ubuntu 설치 아이콘을 선택하자.</p><p><img src="/images/2019/Untitled-a8506d71-4435-4f5d-9735-1f86dd848aba.png" alt></p><p>다시 언어 선택창이 나오는데, 한국어를 선택하고 계속하기를 클릭하자.</p><p><img src="/images/2019/Untitled-377d379b-33b7-4fa8-933d-449406b9f1b4.png" alt></p><p>키보드 레이아웃이 나오는데 기본설정을 그대로 두고 계속하기를 클릭하자.</p><p><img src="/images/2019/Untitled-3d5286c7-ab43-4110-81a7-5861b47462a9.png" alt></p><p>일반설치 선택을 유지하고 계속하기를 클릭하자.</p><p><img src="/images/2019/Untitled-4f81c62d-e35a-46f4-9714-c13a6b039d08.png" alt></p><p>설치형식에서 기타를 선택하고 계속하기를 누르자</p><p><img src="/images/2019/Untitled-bad2e82b-c643-44c0-a72f-c3281f6fe9c3.png" alt></p><p>/dev/sda 를 우클릭후 새 파티션 테이블을 선택하자.</p><p><img src="/images/2019/Untitled-d8de05f8-dbb7-4197-956d-2d7c226c672d.png" alt></p><p>계속하기를 클릭하자.</p><p><img src="/images/2019/Untitled-1aab587b-31fb-4e81-8f97-4909610da099.png" alt></p><p>위처럼 남은공간이라는 것이 생성된다.</p><p>우클릭 하고 추가를 눌러주자.</p><p><img src="/images/2019/Untitled-0c6f7598-0462-4e3a-96b4-237b4f849a43.png" alt></p><p>510mb, 주, 이공간이 시작되는 지점, EXT4 저널링 파일 시스템, /boot를 선택하고 OK를 클릭하자.</p><p><img src="/images/2019/Untitled-67ceb2ed-2ad5-4917-ab7f-8fce7cf2a050.png" alt></p><p>위처럼 /boot 마운트가 생성 되었다. </p><p>여기서 잠깐 버그 같은것이 있는데, 적용된 내용이 잘 안보이는 경우가 있다. 마우스 커서를 문질러주면 화면이 갱신되면서 보인다.</p><p><img src="/images/2019/Untitled-a7ed1d3e-0196-41b7-a8d5-d2944fb0136a.png" alt></p><p>다시 남은 공간을 우클릭하고 추가를 누른뒤 8192mb, 주, 이  공간이 시작되는 지점, 스왑영역을 선택하고 OK를 클릭하자.</p><p>이 설정은 가상메모리를 설정하는 부분이다. 일반적으로 메모리의 2배를 지정하지만 그냥 8192로 셋팅했다. 이미지의 메모리 셋팅을 8gb이상으로 사용할 예정이라 별 무리가 없어보인다.</p><p><img src="/images/2019/Untitled-d5c013a0-bcb1-4b2d-ade8-fce856dd7adc.png" alt></p><p>또 남은공간을 우클릭 → 추가를 누르고 10078, 논리, 이공간이 시작되는 지점 EXT4저널링 파일 시스템, /home 을 선택하고 OK를 눌러주자.</p><p><img src="/images/2019/Untitled-4e8dc80a-b3f4-4c76-988c-ca6d4bc49e23.png" alt></p><p>남은 공간을 마우스 우클릭 → 추가 후 크기는 손대지 않고, 주, 이공간이 시작되는 지점</p><p>EXT4 저널링 파일 시스템, / 를 선택하고 OK를 눌러주자.</p><p><img src="/images/2019/Untitled-51b92880-5238-4ed9-a0c7-754bd269c095.png" alt></p><p>위처럼 설정이 완료가 되었다.</p><p>지금 설치를 클릭하자.(화면에는 비활성화 처럼 보이는데 클릭하면 클릭이 된다.)</p><p><img src="/images/2019/Untitled-638dc4a3-5bf1-4084-931e-4a957f9dda9f.png" alt></p><p>위처럼 창이 열리고 계속하기를 클릭하자.</p><p><img src="/images/2019/Untitled-37c49464-4001-49e6-8dc9-d3cacc4b0c4c.png" alt></p><p>여기서 버그가 좀 있는데 우분투의 pc 이름과 root 비밀번호 입력창이 나오는데 위처럼 잘 안나오는 버그가 있다. </p><p><img src="/images/2019/Untitled-0aa88e53-7935-430a-823f-ddd0c2928b75.png" alt></p><p>왼쪽 상단에 파란색 아이콘을 선택하면 위처럼 재대로 보인다.</p><p>이름을 작성하고 root 비밀번호를 작성하고 로그인할때 암호입력을 선택하고 계속하기를 클릭하자.</p><p>그러면 이제 우분투 설치가 진행된다.</p><p>이것도 약 20~30분 걸리니 또 커피나 마시러 다녀오자.</p><p><img src="/images/2019/Untitled-fde8c7e6-08ec-4b7e-afbf-e40c9bd8192b.png" alt></p><p>설치가 완료되면 위처럼 창이 뜨는데 지금 다시시작을 클릭하여 리부트 하자.</p><p><img src="/images/2019/Untitled-19b7952a-290b-4054-b1e5-392065b29a94.png" alt></p><p>가상머신이 리부트 되면서 위처럼 Error가 발생하긴 하는데, 정상적으로 우분투가 시작되니 걱정하지 말자 위 error는 나중에 잡을 것이다.</p><p><img src="/images/2019/Untitled-b633b552-5c04-4a63-a763-92feba157ac6.png" alt></p><p>설치전 입력했던 root 비밀번호를 입력하고 로그인을 클릭하자.</p><p><img src="/images/2019/Untitled-f7a73600-7809-4498-91bd-c3638298fc3c.png" alt></p><p>위처럼 설치된 우분투가 실행된다.</p><p>이제 바로 할 것은, 우분투의 업그레이드다.</p><p><img src="/images/2019/Untitled-7ae3e4d9-edbd-4f63-b020-a0c33d6569b2.png" alt></p><p>보통 위처럼 소프트웨어 업데이터가 열리는데 지금 설치를 눌러 설치하자.</p><p>만약 수동으로 업데이트를 하려면 터미널을 열고 아래 명령어로 업데이트를 할 수 있다.</p><p><img src="/images/2019/Untitled-3af7d2d3-4099-4814-8ef7-2247c5b9ca8d.png" alt></p><p>터미널 창은 바탕화면을 마우스 우클릭하면 실행할수 있는 항목이 나온다.</p><pre><code>sudo apt-get updatesudo apt-get upgrade</code></pre><p><img src="/images/2019/Untitled-82b6b3ce-f242-4601-aa64-8215ca5d0e18.png" alt></p><p><img src="/images/2019/Untitled-9e2c1e49-483a-45e8-9e79-db5e62f594bd.png" alt></p><p>upgrade명령 이후 위처럼 물어본다. y를 눌러 진행시키자.</p><p>upgrade 명령으로 실제 OS가 업데이트가 되는데, 이것도 시간이 한참 걸린다.</p><p>upgrade 도중 뭔가 문제가 있다고 나올수가 있는데</p><p>나의 경우 아래 명령어를 한번씩 더해서 다시 업데이트를 해주니 정상적으로 완료가 되었다.</p><pre><code>sudo apt-get updatesudo apt-get upgrade</code></pre><p><img src="/images/2019/Untitled-8e694a7f-b2bc-4cb4-ad00-0ca219b9dca2.png" alt></p><p>OS가 업그레이드가 완료되면 우분투를 재시작 하자.</p><h3 id="VirtualBox-Ubuntu1804의-해상도-셋팅"><a href="#VirtualBox-Ubuntu1804의-해상도-셋팅" class="headerlink" title="VirtualBox Ubuntu1804의 해상도 셋팅"></a>VirtualBox Ubuntu1804의 해상도 셋팅</h3><p><img src="/images/2019/Untitled-64ebf1d9-605e-4ccd-83f5-29c971289172.png" alt></p><p>OS 업그레이드 완료후 재시작 하면, virtualbox에서 장치 → 게스트 확장 CD 이미지 삽입을 클릭하자.</p><p><img src="/images/2019/Untitled-20a1651b-e860-41c4-9de2-30d9cc0ced26.png" alt></p><p>위와 같은 창이 열린다 실행을 클릭하면 자동으로 터미널이 열리고 무언가 설치가 된다.</p><p><img src="/images/2019/Untitled-3a61933d-32ad-437e-8533-95faaaed1e0d.png" alt></p><p>위처럼 Press Return to close this windows 라는 문구가 나오면 터미널에서 엔터를 클릭해서 터미널을 닫아주자.</p><p>그리고 우분투를 종료하자.</p><p><img src="/images/2019/Untitled-0a0e5383-0d79-4fc2-9eff-3fc36f5bfacc.png" alt></p><p>virtualbox에서 이미지 설정으로 진입해서 디스플레이항목으로 들어가자.</p><p>그래픽 컨트롤러에서 VBoxVGA를 선택하고 확인을 눌러주자.</p><p>그리고 다시 이미지를 시작 시키자.</p><p><img src="/images/2019/Untitled-d67a4216-3aae-4b46-a8ab-3d2a94baebb3.png" alt></p><p>이번에 이미지가 시동될 때에는 아까 처음에 발생했던 error 메세지 문구가 사라졌다.</p><p><img src="/images/2019/Untitled-92169f2d-d1ac-4109-a9f3-2eca82860b57.png" alt></p><p>그리고 부팅이 완료되면 자동으로 virtualbox창의 크기에 맞게 자동으로 해상도가 변경되는 것을 확인 할 수 있다.</p><p>이제 virtualbox에서 우분투를 사용할 준비가 되어있다.</p><p>완료가 된 김에 virtualbox에서 스냅샷을 찍어 두도록 하자.</p><p>끝!!!!</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
            <tag> 해상도 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>리엑트(react) windows10 개발환경 셋팅</title>
      <link href="/2019/04/27/react-20190427-react-setting-up-react-devloment-enviroment/"/>
      <url>/2019/04/27/react-20190427-react-setting-up-react-devloment-enviroment/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>windows10에 react 개발환경 설정을 하는법을 설명하는 글이다.</p><p>순서는 다음과 같다.</p><ol><li>nodeJs, npm 설치</li><li>yarn 설치</li><li>visual studio code 설치</li><li>react 개발용 visual studio code 확자 플러그인 설치</li><li>create-react-app 도구 설치</li><li>create-react-app 도구로 react 프로젝트 생성하고 실행 확인</li></ol><h1 id="NodeJs와-npm-설치"><a href="#NodeJs와-npm-설치" class="headerlink" title="NodeJs와 npm 설치"></a>NodeJs와 npm 설치</h1><p><a href="https://nodejs.org/ko/" target="_blank" rel="external nofollow noopener noreferrer">https://nodejs.org/ko/</a> </p><p>위 사이트에서 LTS 버전 node를 다운 받아서 설치하자.</p><p>설치한 뒤 powershell에서 다음 명령으로 node, npm의 버전을 확인해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>버전 정보가 잘 나온다면 설치가 잘 된 것이다.</p><h1 id="yarn-설치"><a href="#yarn-설치" class="headerlink" title="yarn 설치"></a>yarn 설치</h1><p>yarn이란 npm과 비슷한 패키지 관리자이다. </p><p>다만 npm의 느린 속도등의 단점을 조금더 보안한 패키지 매니저 라고 한다.</p><p>npm만으로도 이번 실습을 진행할 수 있지만, yarn명령어를 사용할 예정이므로 설치해보자.</p><p><a href="https://yarnpkg.com/lang/en/" target="_blank" rel="external nofollow noopener noreferrer">https://yarnpkg.com/lang/en/</a></p><p>위 사이트로 이동해서 yarn을 다운 받아서 설치하자.<br>설치가 끝난 뒤에 powershell에서 다음 명령으로 yarn 버전을 확인해보자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn -v</span><br></pre></td></tr></table></figure><p>버전 정보가 잘 나온다면 설치가 잘 된 것이다.</p><h1 id="Visual-Studio-code-설치"><a href="#Visual-Studio-code-설치" class="headerlink" title="Visual Studio code 설치"></a>Visual Studio code 설치</h1><p><a href="https://code.visualstudio.com/" target="_blank" rel="external nofollow noopener noreferrer">https://code.visualstudio.com/</a></p><p>위 사이트로 이동하여 visual studio code를 설치하자.</p><h1 id="crate-react-app-도구-설치"><a href="#crate-react-app-도구-설치" class="headerlink" title="crate-react-app 도구 설치"></a>crate-react-app 도구 설치</h1><p>powershell에서 다음 명령으로 create-react-app 도구를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add create-react-app</span><br></pre></td></tr></table></figure><p>위 명령을 입력하면 powershell에서 무언가 다운받고 설치하게 된다. 완료를 기다리자.</p><h1 id="create-react-app-도구를-이용해서-react-프로젝트를-생성하고-실행해보자"><a href="#create-react-app-도구를-이용해서-react-프로젝트를-생성하고-실행해보자" class="headerlink" title="create-react-app 도구를 이용해서 react 프로젝트를 생성하고 실행해보자."></a>create-react-app 도구를 이용해서 react 프로젝트를 생성하고 실행해보자.</h1><p>이제 모든 준비는 끝났다.</p><p>powershell에서 다음 명령을 입력해서 react 프로젝트를 생성하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hello-react</span><br></pre></td></tr></table></figure><p>위 명령을 실행하면 무언가 진행이 되며, 완료가 되면 현재 경로에 hello-react 폴더가 생길 것이다.</p><p>만약 위 명령어가 동작하지 않는다면 다음 명령어로 시도해 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create-react-app hello-react</span><br></pre></td></tr></table></figure><p>혹시 위 명령어도 안된다면 아래 명령어로 프로젝트를 생성해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app hello-react</span><br></pre></td></tr></table></figure><p>파워쉘에서 생성된 hello-react 폴더로 진입하고 다음명령어로 visual studio code를 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>다음과 같이 create-react-app 도구가 생성산 react 프로젝트의 내부가 보일 것이다.</p><p><img src="/images/2019/20190427-react-setting-up-react-devloment-enviroment_1.png" alt="생성한 react 프로젝트 내부"></p><p>비주얼 스튜디오에서 터미널을 열고 아래 명령어를 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>그러면 자동으로 dev 웹서버가 동작하면서 지금 생성한 리액트 프로젝트구 구동된다.</p><p>그리고 역시 자동으로 기본 브라우저가 열리며 다음처럼 초기 화면이 나올것이다.</p><p><img src="/images/2019/20190427-react-setting-up-react-devloment-enviroment_2.png" alt="react 프로젝트 실행결과"></p><p>기본 포트는 3000번으로 설정 되어있다.</p><h1 id="react개발용-visual-studio-code-플러그인-설치"><a href="#react개발용-visual-studio-code-플러그인-설치" class="headerlink" title="react개발용 visual studio code 플러그인 설치"></a>react개발용 visual studio code 플러그인 설치</h1><p>설치 할 플러그인 항목</p><ul><li>EsLint : 자바스크립트 문법 체크</li><li>Relative Path : 상대 경로에 있는 파일경로를 편하게 작성</li><li>Guides : 들여쓰기 가이드라인 그려줌</li><li>ReactJs code snippents : 리액테 관련 스니펫 모음</li></ul><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> react </tag>
            
            <tag> 개발환경 </tag>
            
            <tag> 셋팅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 프로젝트 dependencies 일괄 버전 업데이트</title>
      <link href="/2019/04/11/node-20190411-node-update-dependencies/"/>
      <url>/2019/04/11/node-20190411-node-update-dependencies/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>node 프로젝트의 package.json 에는 node 프로젝트가 사용하는 여러개의 의존 라이브러리가 버전과 함께 명시되어있다.</p><p>시간이 지남에 따라 이 라이브러리들의 버전을 자연히 올라가게 된다.</p><p>이 글에서는 node 프로젝트에서 만료된 dependencies 를 확인하고 일괄적으로 최신 버전으로 업데이트 하는 방법을 기록하겠다.</p><h1 id="Node-프로젝트에서-만료된-dependency-확인하기"><a href="#Node-프로젝트에서-만료된-dependency-확인하기" class="headerlink" title="Node 프로젝트에서 만료된 dependency 확인하기"></a>Node 프로젝트에서 만료된 dependency 확인하기</h1><p>노드 프로젝트에서 다음 명령어로 만료된 의존 라이브러리들을 확인하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><p>내 헥소 블로그에서 실행해 보니 다음과 같이 말료된 라이브러리들이 보인다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm outdated</span><br><span class="line">Package                              Current  Wanted  Latest  Location</span><br><span class="line">hexo-deployer-git                      0.3.1   0.3.1   1.0.0  hexo-site</span><br><span class="line">hexo-generator-json-content            3.0.1   3.0.1   4.1.3  hexo-site</span><br><span class="line">hexo-generator-seo-friendly-sitemap   0.0.22  0.0.22  0.0.25  hexo-site</span><br><span class="line">hexo-server</span><br></pre></td></tr></table></figure><h1 id="Node-프로젝트에서-라이브러리-일괄-버전-업데이트-하기"><a href="#Node-프로젝트에서-라이브러리-일괄-버전-업데이트-하기" class="headerlink" title="Node 프로젝트에서 라이브러리 일괄 버전 업데이트 하기"></a>Node 프로젝트에서 라이브러리 일괄 버전 업데이트 하기</h1><p>다음 명령어 3줄을 순서대로 때려주자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line">ncu -u</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>결과</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm i -g npm-check-updates</span><br><span class="line">C:\Users\amagr\AppData\Roaming\npm\ncu -&gt; C:\Users\amagr\AppData\Roaming\npm\node_modules\npm-check-updates\bin\ncu</span><br><span class="line">C:\Users\amagr\AppData\Roaming\npm\npm-check-updates -&gt; C:\Users\amagr\AppData\Roaming\npm\node_modules\npm-check-updates\bin\npm-check-updates</span><br><span class="line">+ npm-check-updates@3.1.7</span><br><span class="line">added 154 packages from 80 contributors <span class="keyword">in</span> 9.7s</span><br><span class="line"></span><br><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ ncu -u</span><br><span class="line">Upgrading C:\Users\amagr\projects\hexo_blog\package.json</span><br><span class="line">[====================] 19/19 100%</span><br><span class="line"></span><br><span class="line"> hexo-deployer-git                    ^0.3.1  →  ^1.0.0</span><br><span class="line"> hexo-generator-archive               ^0.1.4  →  ^0.1.5</span><br><span class="line"> hexo-generator-index                 ^0.2.0  →  ^0.2.1</span><br><span class="line"> hexo-generator-json-content          ^3.0.1  →  ^4.1.3</span><br><span class="line"> hexo-generator-seo-friendly-sitemap  0.0.22  →  0.0.25</span><br><span class="line"> hexo-renderer-ejs                    ^0.3.0  →  ^0.3.1</span><br><span class="line"> hexo-renderer-stylus                 ^0.3.1  →  ^0.3.3</span><br><span class="line"> hexo-server                          ^0.2.0  →  ^0.3.3</span><br><span class="line"></span><br><span class="line">Run npm install to install new versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm install</span><br><span class="line">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.4: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\hexo-deployer-git\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.7: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">added 158 packages from 69 contributors, removed 28 packages, updated 30 packages and audited 3798 packages <span class="keyword">in</span> 12.346s</span><br><span class="line">found 11 vulnerabilities (6 low, 5 moderate)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p> <a href="https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> dependencies </tag>
            
            <tag> update </tag>
            
            <tag> version </tag>
            
            <tag> outdated </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript-webpack으로 빌드하기</title>
      <link href="/2019/03/21/typescript-20190321-typescript-webpack-build/"/>
      <url>/2019/03/21/typescript-20190321-typescript-webpack-build/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>어쩌다보니 typescript sdk를 사용할 일이 있었다.</p><p>내가 문제는 typescript를 잘 모른다는 것이다. ㅋㅋㅋ</p><p>angular 때문에 말은 많이 들었지만, 이거 신기한 녀석이다.</p><p>typescript로 만든 소스를 tsc를 이용해서 build를 하면 그 결과가 javascript 소스가 된다.</p><p>여기서 build할때 이 빌드 결과물을 es3으로 빌드할지 아님 es5, es6로 빌드할지 결정 할 수도 있다.</p><p>기본적으로 tsc(typescript 컴파일러)로 빌드를 하지만 webpack으로도 빌드가 가능하다.</p><p>이번 글에서는 간단한 typescript 코드와 그것을 webpack으로 빌드해서 하나의 js파일로 만들어 html에서 호출하는 것을 해보려한다.</p><p>정확하 typescript와 webpack을 공부한게 아니라 엉성한것을 감안하길 바란다.</p><h1 id="node-프로젝트-만들고-typescript-소스작성"><a href="#node-프로젝트-만들고-typescript-소스작성" class="headerlink" title="node 프로젝트 만들고 typescript 소스작성"></a>node 프로젝트 만들고 typescript 소스작성</h1><p>npm init으로 node 프로젝트를 생성한다.</p><p>내가 생성한 <em>package.json</em>은 다음과 같다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tsc-test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"es6-shim"</span>: <span class="string">"^0.35.5"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"^0.12.7"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^11.11.0"</span>,</span><br><span class="line">    <span class="attr">"ts-loader"</span>: <span class="string">"^5.3.3"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.3.3333"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사실 위 <em>package.json*은 *npm</em> 디펜던시 관리만 하게 될 것이다.</p><p>빌드는 <em>wepack</em>으로 할 것이다.</p><p>위 파일을가지고 <em>npm install</em> 명령어를 이용해서 모듈을 설치하자.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553182778149.png" alt="프로젝트 구조는 다음과 같다."></p><p>AccountService.ts 는 AccountVO.ts를 import해서 사용하고, main.ts 는 AccountService.ts를 inport해서 export 한다.</p><p>main.ts를 중심으로 외부에서 사용할 service를 노출시킨다.</p><p>main.ts는 일종의 service 컨트롤러 역할을 할 것이다.</p><p>이 main.ts를 entry point로 정해서 webpack에서 빌드하게되면 하나의 js파일이 생성되고 이 js파일을 index.html 파일에서 불러와서 main.ts에 등록된 AccountService.ts의 기능을 사용할수 있게 될 것이다.</p><p>파일을 하나씩 살펴보자.</p><p>/src/domain/AccountVO.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AccountI &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountVO <span class="keyword">implements</span> AccountI &#123;</span><br><span class="line">    <span class="keyword">private</span> _privateKey : <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _publicKey : <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _address : <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">privateKey : <span class="built_in">string</span> , publicKey : <span class="built_in">string</span>, address : <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>._privateKey = privateKey;</span><br><span class="line">        <span class="keyword">this</span>._publicKey = publicKey;</span><br><span class="line">        <span class="keyword">this</span>._address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getPrivateKey() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getPublicKey() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getAddress() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>굳이 인터페이스는 없어도 된다. 공부하느라…</p><p>/src/service/AccountServiceVO.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AccountVO</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../domain/AccountVO"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> createAccount () : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"createAcount called..."</span>);</span><br><span class="line">        <span class="keyword">const</span> user1 : AccountVO = <span class="keyword">new</span> AccountVO(<span class="string">"this is private key"</span>, <span class="string">"this is public key"</span>, <span class="string">"this is address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>별 내용은 없다 그냥 typescript 소스가 서로 import하면서 엮기는 모습을 보여주고 싶었다.</p><p>이렇게 그물처럼 엮인 소스를 webpack으로 빌드해서 하나의 단일 js 파일로 만드는 것이 신기하기 때문이다.</p><p>다음은 가장 중요한 main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AccountService</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./services/AccountService"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> _AccountService = <span class="keyword">new</span> AccountService();</span><br><span class="line"><span class="comment">//export const something = new somthing();</span></span><br></pre></td></tr></table></figure><p>webpack이 빌드할 entry point로 가장 중요한  typescript 파일이지만 내용은 별거 없다.</p><p>만약 여러개의 service를 등록하고 싶다면, 위 주석처럼 추가로 import해서 등록 하면 된다.</p><h1 id="typescript를-빌드할-webpack관련-파일"><a href="#typescript를-빌드할-webpack관련-파일" class="headerlink" title="typescript를 빌드할 webpack관련 파일"></a>typescript를 빌드할 webpack관련 파일</h1><p><img src="/images/2019/20190321-typescript-webpack-build/1553183379901.png" alt="webpack 관련파일"></p><p>위 이미지에서 표시된 두개의 파일이 typescript를 빌드할때 사용될 파일이다.</p><p>먼저 webpack.config.js 파일을 보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line"><span class="string">'main'</span>: <span class="string">'./src/main.ts'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line"><span class="comment">//filename: '[name].js',</span></span><br><span class="line">filename: <span class="string">'MAIN_TYPESCRIPT_SDK.js'</span>,</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">    library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode :<span class="string">'development'</span>,</span><br><span class="line">devtool: <span class="string">'source-map'</span>,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">use: [<span class="string">'ts-loader'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">resolve : &#123;</span><br><span class="line"><span class="comment">//root: __dirname,   </span></span><br><span class="line">modules: [</span><br><span class="line"><span class="string">'node_modules'</span>,</span><br><span class="line"><span class="comment">//'./src/components'</span></span><br><span class="line">],</span><br><span class="line">extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">node: &#123; <span class="attr">fs</span>: <span class="string">'empty'</span> , <span class="attr">net</span> : <span class="string">'empty'</span>, <span class="attr">tls</span> : <span class="string">'empty'</span>&#125;   <span class="comment">// 웹팩 compile 시 오류 처리</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>여기서 중요한 설정이 몇개 존재한다.</p><p>일단 webpack으로 typescript를 build하기 때문에 module에 ts-loader가 등록이 되어있어야 한다.</p><p>이 로더가 tsconfig.json을 참조하게 된다. tsconfig.json은 typescript를 어떻게 build할 것인가에 대한 설정이다.</p><p>위 파일에서 entry와 output을 주의깊게 봐야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="string">'main'</span>: <span class="string">'./src/main.ts'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.ts 파일을 entry point로 정한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line"><span class="comment">//filename: '[name].js',</span></span><br><span class="line">filename: <span class="string">'MAIN_TYPESCRIPT_SDK.js'</span>,</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">    library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br></pre></td></tr></table></figure><p>main.ts 를 기준으로 main.ts에 import된 모든 ts파일을 같이 빌드해서 하나의 js파일을 만드는데, 그 결과물 파일명은 MAIN_TYPESCRIPT_SDK.js 로 정했다.</p><p>그리고 이 파일이 생성되는 위치는 dist 폴더이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br></pre></td></tr></table></figure><p>그리고 MAIN_TYPESCRIPT_SDK.js 파일에 변수를 하나 내보낼 것인데 변수 var MAIN_TYPESCRIPT_SDK = 빌드된 main.ts 이렇게 정했다.</p><p>이제 tsconfig.json 파일을 보자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//"outFile": "./build/build.js",</span></span><br><span class="line">    <span class="comment">//"sourceRoot": "./src/",</span></span><br><span class="line">    <span class="comment">//"rootDir": "./src/",</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"compileOnSave"</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="attr">"buildOnSave"</span>: <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 파일은 typescirpt를 컴파일할때 사용하는 설정 파일 같다.</p><p>사실 이부부은 나도 잘 몰라서 뭐라 말을 못하겠다.</p><p>다만 빌드 결과물이 es5로 정했다.</p><h1 id="webpack으로-typescript-빌드하기"><a href="#webpack으로-typescript-빌드하기" class="headerlink" title="webpack으로 typescript 빌드하기"></a>webpack으로 typescript 빌드하기</h1><p>만약 webpack을 global로 설치했다면, 프로젝트 폴더에서 webpack명령어를 입력하면 된다.</p><p>나 같은 경우에는 global로 설치하지 않았기 때문에, node_module폴더에 webpack이 숨어있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하게 되면 아래처럼 webpack이 typescript를 빌드한다.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553184414251.png" alt="webpack 명령어 결과"></p><p>그럼 dist폴더를 보면 webpack.config.js에서 설정한 것 처럼 js 파일이 생긴다.</p><p> <img src="/images/2019/20190321-typescript-webpack-build/1553184482694.png" alt="dist폴더"></p><p>js파일 한개가 생성된 것을 확인했다.</p><h1 id="html에서-생성된-js파일을-불러와서-typescript에서-선언한-객체를-호출"><a href="#html에서-생성된-js파일을-불러와서-typescript에서-선언한-객체를-호출" class="headerlink" title="html에서 생성된 js파일을 불러와서 typescript에서 선언한 객체를 호출"></a>html에서 생성된 js파일을 불러와서 typescript에서 선언한 객체를 호출</h1><p>index.html 파일을 아래처럼 만들었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/MAIN_TYPESCRIPT_SDK.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.dir(MAIN_TYPESCRIPT_SDK);</span></span><br><span class="line">                MAIN_TYPESCRIPT_SDK._AccountService.createAccount();</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>별거 없다. </p><p>webpack.config.js에 설정한대로 생성된 js파일을 src로 가져오고 var로 내보낸 라이브러리 명으로 main.ts에 export한 typescript객체의 메소드를 호출한다.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553184647594.png" alt="크롬 브라우저 콘솔창"></p><p>위처럼 크롬 콘솔에서 잘 호출되는 것을 확인했다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>휴 어렵다.</p><p>타입스크립트도 잘모르고, 특히 지옥같은 웹팩은 더더욱 몰라서 어려웠다.</p><p>gradle도 그렇고 webpack도 진짜 설정이 어려운거 같다.</p><p>위 소스 github 주소는 아래와 같다.<br><a href="https://github.com/hanumoka/demo_typescript_webpack" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/hanumoka/demo_typescript_webpack</a></p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://trustyoo86.github.io/typescript/2018/01/09/typescript-webpack.html" target="_blank" rel="external nofollow noopener noreferrer">https://trustyoo86.github.io/typescript/2018/01/09/typescript-webpack.html</a></p><p><a href="https://medium.com/dailyjs/inserting-variables-into-html-and-javascript-with-webpack-80f33625edc6" target="_blank" rel="external nofollow noopener noreferrer">https://medium.com/dailyjs/inserting-variables-into-html-and-javascript-with-webpack-80f33625edc6</a></p><p><a href="https://stackoverflow.com/questions/34357489/calling-webpacked-code-from-outside-html-script-tag" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/34357489/calling-webpacked-code-from-outside-html-script-tag</a><br>특히 마지막 자료가 많이 도움되었다.</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> html </tag>
            
            <tag> script </tag>
            
            <tag> typescript </tag>
            
            <tag> webpack </tag>
            
            <tag> src </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker- docker toolbox 기본 ip 확인</title>
      <link href="/2019/01/31/docker-20190131-docker-toolbox-docker-machine-ip-default/"/>
      <url>/2019/01/31/docker-20190131-docker-toolbox-docker-machine-ip-default/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>기존에 docker for windows를 사용하다가 virtual box를 사용하고 싶어서.</p><p>docker tool box로 갈아탔다.( docker for windows보다는 불편하지만, 윈도우에서 ubuntu를 온전하게 사용하기 위해서는 어쩔수 없었다.)</p><p>문제는 docker toolbox로 생성한 컨티에너에 접속이 localhost로 안되는 것이었다.</p><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p>다양한 방법이 있겠지만, 복잡하게 네트워크를 변경하는 것보다 기본 도커아이피로 접속하면 된다.</p><p><strong>docker-machine ip default</strong> 를 입력하면</p><p>192.168.99.100 다음과 같은 ip 가 나온다 이 아이피로 접속하면된다.</p><p><img src="/images/20190131-docker-toolbox-docker-machine-ip-default_1.png" alt="docker toolbox ip확인하기"></p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverflow.com/questions/42866013/docker-toolbox-localhost-not-working/42886035" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/42866013/docker-toolbox-localhost-not-working/42886035</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip </tag>
            
            <tag> docker </tag>
            
            <tag> toolbox </tag>
            
            <tag> default_ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - system.out::println(double colone, method reference)</title>
      <link href="/2019/01/30/java-20190130-java8-system-out-println/"/>
      <url>/2019/01/30/java-20190130-java8-system-out-println/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>::(double conlon operator)이라고도 부르는것 같은데, 정식 명칭은 method reference라고 부른다.</p><h1 id="method-reference-이해하기"><a href="#method-reference-이해하기" class="headerlink" title="method reference 이해하기"></a>method reference 이해하기</h1><p>메소드 참조(method reference)는 메소드를 참조해서 매개변수의 정보 및 리턴 타입을 미리 알아내어, 람다식에서 사용하는 매개 변수를 생략하는 방식의 표현법이다.</p><p>말로 조금 풀어보자면 대상::메소드 가 있다면, 대상에서 메소드의 정보를 추출하여 람다식 처럼 익명 구현객체를 생성하는 것이다. 다만 참조하는 메소드의 매개변수를 생략 할 수 있다.</p><p>아래 단계별로 소스로 method reference를 알아보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; testList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1단계: 함수인터페이스를 익명구현객체로 구현</span></span><br><span class="line">testList.forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer x)</span> </span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2단계: 1단계를 람다식으로 간단하게 표현</span></span><br><span class="line">testList.forEach((x) -&gt; System.out.println(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3단계: 2단계를 더 간단하게 표현 : methed reference </span></span><br><span class="line">testList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method reference도 익명구현객체를 생상하므로 이처럼 참조변수에 할당 할 수 있다.</span></span><br><span class="line">   Consumer&lt;Integer&gt; c = System.out::println;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1~3단계 모두 익명구현객체를 생성하는 코드이다. 점점 약식화된 표현식이며 3단계가 method refernece이다.</p><p>람다식도 굉장시 간단하지만, 위처럼 참조하는 메소드의 매개변수에 어떠한 변화 없이 그냥 사용할경우 매개변수를 생략할 수 있다.</p><p>처음에는 뭔가 코드 가독성이 떨어지는 것 같았지만, 보다보니 간편한거 같기도 하다.</p><h1 id="사용법1"><a href="#사용법1" class="headerlink" title="사용법1"></a>사용법1</h1><p>메소드 참조는 정적 또는 인스턴스 메소드, 그리고 생성자도 참조 할 수 있다.</p><p><strong>참조할 메소드가 정적메소드인경우</strong></p><p>클래스::정적메소드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    System.out.println( x + <span class="string">"하하하"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; c2 = Test::talk;</span><br></pre></td></tr></table></figure><p><strong>참조할 메소드가 인스턴스 메소드인경우</strong></p><p>먼저 클래스 이용하여 객체를 생성한뒤, 아래처럼 참조변수를 이용해서 메소드를 참조한다.</p><p>참조변수::메소드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    System.out.println( x + <span class="string">"하하하"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; c3 = t1::talk;</span><br></pre></td></tr></table></figure><h1 id="사용법2"><a href="#사용법2" class="headerlink" title="사용법2"></a>사용법2</h1><p>람다식에서 실행될 코드 컨텍스트 내부에는 람다식 외부의 클래스 멤버의 메소드를 사용할 수도 있고, 람다식에 매개변수의 멤버 메소드를 사용할 수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) -&gt; &#123; a.instanceMethod(b); &#125;</span><br></pre></td></tr></table></figure><p>메소드 참조에서 위 코드를 아래처럼 표현할 수 있다.</p><p>클래스 :: instanceMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="comment">//람다방식</span></span><br><span class="line">ToIntBiFunction&lt;A, B&gt; f1 = (x, y) -&gt; x.testB(y);</span><br><span class="line">System.out.println(f1.applyAsInt(a, b));</span><br><span class="line"><span class="comment">//메소드 참조방식</span></span><br><span class="line">ToIntBiFunction&lt;A, B&gt; f2 = A::testB;</span><br><span class="line">System.out.println(f2.applyAsInt(a, b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="생성자-참조"><a href="#생성자-참조" class="headerlink" title="생성자 참조"></a>생성자 참조</h1><p>람도식으로 생성자를 호출해서 객체를 생성할 수 있다.</p><p>(a, b) -&gt; { return new 클래스(a, b); }</p><p>메소드 참조역시 람다처럼 생성자 참조가 가능하다.</p><p>클래스 :: new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line">String id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name, String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//람다 방식</span></span><br><span class="line">Function&lt;String, Account&gt; f1 = (x) -&gt; &#123; <span class="keyword">return</span> <span class="keyword">new</span> Account(x); &#125;;</span><br><span class="line">Account ac1 = f1.apply(<span class="string">"오레오"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메소드참조방식, 함수적인터페이스 타입을 이용해서 오버로딩된 생성자를 선택적 호출할수 있다.(Function)</span></span><br><span class="line">Function&lt;String, Account&gt; f2 = Account::<span class="keyword">new</span>;</span><br><span class="line">Account ac2 = f2.apply(<span class="string">"메로나"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메소드참조방식, 함수적인터페이스 타입을 이용해서 오버로딩된 생성자를 선택적 호출할수 있다.(BiFunction)</span></span><br><span class="line">BiFunction&lt;String, String ,Account&gt; f3 = Account::<span class="keyword">new</span>;</span><br><span class="line">Account ac3 = f3.apply(<span class="string">"초코파이"</span>, <span class="string">"오예스"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>method referece는 람다를 더 간결하게 표현하는 문법니다.<br>하지만 개인적으로 너무 간결하여 코드의 가독성이 떨어지는 것이 아닌가 생각해본다.<br>List의 foreach에 System.out::println 정도 쓰기에는 좋아보이긴 한다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8</a></p><p><a href="https://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> 람다 </tag>
            
            <tag> double_colone </tag>
            
            <tag> method_reference </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu에 docker 설치하기</title>
      <link href="/2019/01/29/ubuntu-20190129-ubuntu-install-docker/"/>
      <url>/2019/01/29/ubuntu-20190129-ubuntu-install-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>virtual box에 설치한 ubuntu에 docker를 한번 설치해보자.</p><p>docker가 ubuntu에 최적헤 되어있다고 해서, docker for windows를 포기하고 virtual box에 ubuntu를 설치해서 사용해 보려고 한다.</p><h1 id="ubuntu에서-docker-설치하기"><a href="#ubuntu에서-docker-설치하기" class="headerlink" title="ubuntu에서 docker 설치하기"></a>ubuntu에서 docker 설치하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl - fsSL http://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p><img src="/images/20190129-ubuntu-install-docker_1.png" alt="명령1"></p><p>위  명령어를 입력하면 OK라고 나올 것이다.<br>아 물론 curl 이 없으면 미리 설치하자.</p><p>그리고 아래 명령어를 입력하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><p><img src="/images/20190129-ubuntu-install-docker_2.png" alt="명령2"></p><p>그리고 아래 명령어를 입력해서 docker-ce를 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h1 id="docker-확인"><a href="#docker-확인" class="headerlink" title="docker 확인"></a>docker 확인</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker info</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 설치된 docker의 정보가 보일것이다. (안보인다면 문제가 있는 것)</p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu - vim설치(vi 방향키 입력오류 해결)</title>
      <link href="/2019/01/29/ubuntu-20190129-ubuntu-install-vim/"/>
      <url>/2019/01/29/ubuntu-20190129-ubuntu-install-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Virtual box에 ubuntu를 설치한뒤, vi를 열어보니 이상하게도 키보드의 방향키 입력시 A, B 등의 알파뱃 대문자가 입력되었다.<br>인터넷을 찾아보니 골치아픈 vi를 버리고 vim을 설치해서 사용하라는 글을 확인했다.<br>ubuntu에 vim을 설치하고 vi보다는 좋은 vim 기능을 사용해보자.</p><h1 id="ubuntu-vim-설치"><a href="#ubuntu-vim-설치" class="headerlink" title="ubuntu vim 설치"></a>ubuntu vim 설치</h1><p>ubuntu 터미널에서 아래 명령어로 vim을 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install</span><br></pre></td></tr></table></figure><p>이제 vi 대신 vim을 사용할 수 있다. 다행스럽게도 방향키는 정상적으로 입력된다.</p><h1 id="vim-편리한-기능-활성화"><a href="#vim-편리한-기능-활성화" class="headerlink" title="vim 편리한 기능 활성화"></a>vim 편리한 기능 활성화</h1><p>아래 명렁어를 터미널에 입력하여 vim 설정파일을 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>그리고 방금 생성한 vimrc 파일에 아래 내용채워 vim 기능을 활성화 하자.</p><p>set number            “ 줄 번호 표시<br>set tabstop=4         “ tab을 4칸으로<br>set ignorecase      “ 검색시 대소문자 구별하지 않음<br>set hlsearch         “ 검색시 하이라이트<br>set fileencodings=utf-8,euc-kr    “ 파일인코딩 형식<br>set bs=indent,eol,start    “ backspace 키 사용<br>set ruler              “ 상태표시줄 커서 위치 표시<br>set title               “ 제목 표시<br>set showmatch    “ 매칭되는 괄호 표시<br>set nowrap         “ 자동 줄바꿈 해제<br>set wmnu           “ tab 자동완성시 가능한 목록 표시</p><p>syntax on        “ 문법 하이라이트</p><p><img src="/images/20190129-ubuntu-install-vim_1.png" alt="vimrc 파일"></p><p>설정이 활성화 되며 위처럼 줄번호 등 편리한 기능이 적용된다.</p><p>끝!!! </p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vi </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 우분투 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git - Large files detected(오류)</title>
      <link href="/2019/01/24/git-20190124-git-error-Large-files-detected/"/>
      <url>/2019/01/24/git-20190124-git-error-Large-files-detected/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>springboot 프로젝트를 github에 push 하던 도중 아래와 같은 error를 만났다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-EU9BLID MINGW64 ~/Desktop/Project/nao (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line">Enumerating objects: 54, done.</span><br><span class="line">Counting objects: 100% (54/54), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (30/30), done.</span><br><span class="line">Writing objects: 100% (33/33), 156.51 MiB | 344.00 KiB/s, done.</span><br><span class="line">Total 33 (delta 20), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (20/20), completed with 16 local objects.</span><br><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br><span class="line">remote: error: Trace: 83b0de65c389cb962e5f8d4559f073aa</span><br><span class="line">remote: error: See http://git.io/iEPt8g for more information.</span><br><span class="line">remote: error: File hanumoka-nao.tar is 186.06 MB; this exceeds GitHub's file size limit of 100.00 MB</span><br><span class="line">To https://github.com/hanumoka/nao.git</span><br><span class="line"> ! [remote rejected] master -&gt; master (pre-receive hook declined)</span><br><span class="line">error: failed to push some refs to 'https://github.com/hanumoka/nao.git'</span><br></pre></td></tr></table></figure><p><img src="/images/20190124-git-error-Large-files-detected_1.png" alt="오류 이미지1"></p><p>위 오류의 문제는 Large files detected, 즉 100매가를 넘어가는 파일은 github에 올릴수가 없다.</p><p>깜빡하고 테스트로 생성한 spring docker 이미지(hanumoka-nao.tar)때문에 push를 거절 당한 것이다.</p><p>그런데 문제는 저 파일을 제거하고 다시 commit을 한 상태에서도 계속 위 오류가 나는 것이다.<br>(일반적으로 해당 삭제하고 commit, push하면 되야되는데 뭔가 알수없는 문제가 있었던거 같다.)</p><p>그래서 인터넷을 찾아보니 삭제된 파일이 git에 제대로 인식이 안된듯 했다.</p><p>아래 명령어를 이용해서 해당 파일의 캐쉬를 삭제 했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch hanumoka-nao.tar'</span><br></pre></td></tr></table></figure><p>그런데 문제는 위 명령어로 강제로 캐쉬를 날려버리면 git 로컬과 원격 리파지토리의 history가 엉킨다.</p><p>따라서 push 를 하려면 pull을 하라고 메세지가 나오며, 정작 git pull을 하면 아래처럼 오류와 함께 pull이 되지 않는다.</p><p><img src="/images/20190124-git-error-Large-files-detected_2.png" alt="오류 이미지2"></p><p>fatal: refusing to merge unrelated historeis 오류를 인터넷에 찾아보니, 원격저장소와 로컬저장소의 history가 매칭이 안되서 발생하는 오류이다.</p><p>문제가 되던 대용량 파일의 캐쉬를 삭제할때 히스토리가 꼬인것 같다.</p><p>아래 명령어를 이용해서 문제가 발생한 master브랜치에서 히스토리가 엉킨것을 무시하고 강제로 pull을 받았다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>엉킨 히스토리를 무시하고 pull했기 때문에 master 브랜치와 다른 원격저장소의 파일의 충돌이 난다.</p><p>충돌을 모두 해결한뒤 commit, push 를 하면 된다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p>대용량 파일이 없는데도 계속 오류 해결방법<br><a href="https://stackoverflow.com/questions/21168846/cant-remove-file-from-git-commit" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/21168846/cant-remove-file-from-git-commit</a></p><p>히스토리가 영켜 발생하는 문제 해결방법<br><a href="https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
            <tag> push </tag>
            
            <tag> large_files </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - javascript 객체를 HTML form의 input에 맵핑하기(Tip code)</title>
      <link href="/2019/01/23/javascript-20190123-javascript-object-to-form/"/>
      <url>/2019/01/23/javascript-20190123-javascript-object-to-form/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>웹 개발하다보면, 흔하게 해야 하는 Javascript 객체를 HTML의 form 내부의 input에 맵핑하는 함수이다.</p><p>javascript공부를 게을리해 Jquery만 사용하다보니, 이런것 하나 짜는데 한 세월이다.</p><p>반성하자.</p><p>아래 함수는 javascript 객체의 프로퍼티명과 일치하는 name을 갖는 input태그를 form에서 찾아 값을 맵핑하는 함수이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//자바스크립트 객체를 html에 맵핑, formId: html form id string, paramObj : javascript 객체</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFormbyObjcet</span>(<span class="params">formId, paramObj</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> frm_element = <span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">        <span class="keyword">var</span> inputListObj = frm_element.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> paramObj)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(paramObj[index]);</span><br><span class="line">            <span class="keyword">if</span> (inputListObj.hasOwnProperty(index)) &#123;</span><br><span class="line">               inputListObj[index].value = paramObj[index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//__for</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//__setFormbyObjcet</span></span><br></pre></td></tr></table></figure><p><img src="/images/20190123-javascript-object-to-form_1.png" alt="hansontable grid에 특정 row 선택시 form맵핑에 적용해보았다."></p><h1 id="수정1-input-type-별로-맵핑하기"><a href="#수정1-input-type-별로-맵핑하기" class="headerlink" title="수정1 - input type 별로 맵핑하기"></a>수정1 - input type 별로 맵핑하기</h1><p>음 조금 이상하다. 위에서 getElementsByTagName(‘input’)에서 input type =’image’ 엘리먼트는 가져오지 못한다.<br>그래서 소스를 아래처럼 수정했다.</p><p>form document를 가져올때 document.forms로 가져오게 수정했다.</p><p>input type이 text가 아닌 image인경우 값을 src에 맵핑하게 수정했다.</p><p>크흠 javascript 책을 다시 봐야겠다. 기억이 한개도 안나네…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//자바스크립트 객체를 html에 맵핑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFormbyObjcet</span>(<span class="params">formId, paramObj</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> frm_element = <span class="built_in">document</span>.forms[formId].getElementsByTagName(<span class="string">"input"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> paramObj)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (frm_element.hasOwnProperty(index)) &#123;</span><br><span class="line">           <span class="keyword">if</span>(frm_element[index].type === <span class="string">"text"</span>)&#123;</span><br><span class="line">            frm_element[index].value = paramObj[index];</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(frm_element[index].type === <span class="string">"image"</span>)&#123;</span><br><span class="line">            frm_element[index].src = paramObj[index];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;<span class="comment">//__if</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//__for</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//__setFormbyObjcet</span></span><br></pre></td></tr></table></figure><p><img src="/images/20190123-javascript-object-to-form_2.png" alt="수정1 코드 적용 결과"></p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
            <tag> HTML </tag>
            
            <tag> form </tag>
            
            <tag> input </tag>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10에 Ubuntu설치하기</title>
      <link href="/2019/01/22/windows-20190122-windows10-install-ubuntu/"/>
      <url>/2019/01/22/windows-20190122-windows10-install-ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Windows10에서 docker를 사용하기 위해 docker for windows를 설치해서 사용중이다.</p><p>나름 불편함 없이 쓰고 있었지만, 역시나 docker가 ubuntu커널 기반이라 불편한 점이 생길수 밖에 없었다.</p><p>그것은 docker에서 컨테이너의 데이터를 영속적으로 관리하는 volume을 접근하는것이 어려웠다.</p><p>docker for windows에서 docker create volume으로 volume을 생성했는데, 대체 이것이 어디에 있는지 찾을 수가 없었다.</p><p><a href="https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes</a></p><p>위 링크를 보니 ubuntu에서 docker를 사용할 경우 docker volume의 위치를 명확히 파악할 수 있지만, mac의 경우 상당히 번거로운 작업을 해야 한다고 답변이 있었다.</p><p>위 링크를 보고 docker for windows에서 volume 위치를 찾지를 포기하고 그냥 windows10에 Microsoft Store에서 ubuntu를 설치해서 docker를 실행할 예정이다.</p><p>이번글은 windows10에 ubuntu를 설치해서 실행하는 글이다.</p><h1 id="windows10에-Microsoft-store에서-ubuntu를-찾아-설치하자"><a href="#windows10에-Microsoft-store에서-ubuntu를-찾아-설치하자" class="headerlink" title="windows10에 Microsoft store에서 ubuntu를 찾아 설치하자"></a>windows10에 Microsoft store에서 ubuntu를 찾아 설치하자</h1><p><img src="/images/20190122-windows10-install-ubuntu_1.png" alt="Microsoft sotre에서 ubuntu설치하기"></p><p>좋은 세상이다. Windows에서 그냥 우분트를 다운로드 해서 설치할수가 있다니, 위 이미지처럼 ubuntu다운받아서 설치하면 된다.</p><p>그러나 정작 실행해보니 다음과 같은 오류와 ubuntu실행이 안된다.</p><p><img src="/images/20190122-windows10-install-ubuntu_2.png" alt="오류내용: wslregisterdistribution failed with error: 0x8007019e"></p><p>구글신에게 여쭤보니 Windows의 리눅스 기능이 비활성화 되어 있어서 발생하는 오류였다.</p><p><img src="/images/20190122-windows10-install-ubuntu_3.png" alt="Windows 기능에서 Linux용 Windows 하위 시스템 항목을 활성화하고 저장하자."></p><p>위 설정을 하고 리부팅을 하면 ubuntu실행을 해보자.</p><p><img src="/images/20190122-windows10-install-ubuntu_4.png" alt="windows ubuntu실행 확인"></p><p>위 처럼 동작을 확인 할 수 있다.</p><p>끝!</p><h1 id="추가"><a href="#추가" class="headerlink" title="추가"></a>추가</h1><p><a href="https://medium.com/rkttu/wsl%EC%97%90%EC%84%9C-native-docker-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-ff75b1627a87" target="_blank" rel="external nofollow noopener noreferrer">https://medium.com/rkttu/wsl%EC%97%90%EC%84%9C-native-docker-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-ff75b1627a87</a></p><p>windows10위에 설치한 unbuntu에 docker를 설치하여 실행하는 것 역시 한계가 있어보인다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> windows10 </tag>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 설치 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot - docker 이미지로 만들어 실행하기</title>
      <link href="/2019/01/21/springBoot-20190121-springboot-deploy-docker/"/>
      <url>/2019/01/21/springBoot-20190121-springboot-deploy-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>SpringBoot로 생성한 스프링 프로젝트를 docker 이미지로 만들어서 동작시키는 예제를 만들어보겠다.</p><h1 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h1><p>윈도우에 docker for windows를 설치</p><p>윈도우에 maven 설치</p><p>springboot 웹 프로젝트 준비</p><h1 id="Springboot-웹-프로젝트로-jar파일-생성"><a href="#Springboot-웹-프로젝트로-jar파일-생성" class="headerlink" title="Springboot 웹 프로젝트로 jar파일 생성"></a>Springboot 웹 프로젝트로 jar파일 생성</h1><p>SpringBoot로 생성한 웹 프로젝트를 준비했다.</p><p>그리고 tomcat대신 undertow로 was를 설정했다. 실습을 진행하는데 별 차이는 없다.</p><p>스프링 프로젝트 폴더에서 아래 메이븐 명령어를 실행해서 jar파일을 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>clean : target폴더 내부의 파일들을 지운다.</p><p>pakcage : target폴더에 maven프로젝트를 빌드하고 실행가능한 jar or war로 파일을 패키징한다.</p><p><img src="/images/20190121-springboot-deploy-docker_1.png" alt="mvn clean package 실행결과"></p><p>콘솔에서 빌드 성공과 그 결과인 target폴더 내부에 jar파일을 확인 할 수 있다.</p><p>이번에 springboot를 공부하면서 가장 충격적인 것이, 저 jar 파일이다.</p><p>SpringBoot는 SpringFramework를 감싸고 있는 일종의 자동화된 개발, 실행환경을 제공한다.</p><p>spring-boot-starter-parent가 제공하는 내장 WAS 실행환경이 존재하기 때문에, SpringBoot로 생성한 스프링 웹 프로젝트는 별도의 tomcat과 같은 was없이 단독으로 jar파일로 실행으로 웹 프로젝트를 실행 할 수 있다. 정말 신세계인거 같다.</p><p>생성된 jar 파일을 아래 명령어로 실행하여 스프링 웹 프로젝트가 동작하는지 확인해 보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/nao-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><img src="/images/20190121-springboot-deploy-docker_2.png" alt="프로젝트 폴더에서 명령어를 입력하면 된다."></p><p><img src="/images/20190121-springboot-deploy-docker_3.png" alt="실행을 확인 할 수 있다."></p><p>동작을 확인 했으니, cntr z 키를 눌러 서비스를 종료하자.</p><h1 id="SpringBoot웹-프로젝트의-jar로-도커-이미지-만들기"><a href="#SpringBoot웹-프로젝트의-jar로-도커-이미지-만들기" class="headerlink" title="SpringBoot웹 프로젝트의 jar로 도커 이미지 만들기"></a>SpringBoot웹 프로젝트의 jar로 도커 이미지 만들기</h1><p>이제 생성한 jar파일을 이용해서 도커 이미지를 만들자.</p><p>프로젝트 폴더에 파일명: Dockfile 로 txt파일을 만들자. </p><p>그리고 내용을 아래로 채운다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">ADD target/nao-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line">ENV JAVA_OPTS=""</span><br><span class="line">ENTRYPOINT ["java","-jar","/app.jar"]</span><br></pre></td></tr></table></figure><p>위 Dockfile을 이용하여 Dock Image를 생성할 것이다.</p><p>FROM : 베이스 이미지를 지정한다.<br>ADD : 현재 경로기존의 jar파일을 복사해서 app.jar파일로 만들어 이미지에 적제한다.<br>ENV : 환경변수<br>ENTRYPOINT : 이미지가 동작하면서 실행시킬 명령어를 입력한다. 결국 이미지가 run 되면 java -jar /app.jar 를 실행하게 된다.</p><p>이제 파일을 생성했으니 아래 명령어로 Dockfile을 이용해서 DockImage를 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --tag hanumoka-nao:0.1 .</span><br></pre></td></tr></table></figure><p>-t옵션을 이용하여 생성하는 이미지의 이름은 hanumoka-nao로 지정한다.</p><p>마지막에 . 를 잊지말자(현제 명령어 실행 위치의 Dockfile을 사용하겠다는 의미이다.)</p><p><img src="/images/20190121-springboot-deploy-docker_4.png" alt="이미지가 생성된 것을 확인"></p><h1 id="생성한-docker-이미지를-실행하여-스프링-웹프로젝트-동작-확인"><a href="#생성한-docker-이미지를-실행하여-스프링-웹프로젝트-동작-확인" class="headerlink" title="생성한 docker 이미지를 실행하여 스프링 웹프로젝트 동작 확인"></a>생성한 docker 이미지를 실행하여 스프링 웹프로젝트 동작 확인</h1><p>아래 명령어를 이용하여 방금 생성한 이미지를 실행하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 58080:58080 hanumoka-nao:0.1</span><br></pre></td></tr></table></figure><p>-p옵션을 이용하여 호스트의 포트와 docker이미지의 포트를 연결해 주자.</p><p><img src="/images/20190121-springboot-deploy-docker_5.png" alt="스프링 프로젝트가 동작하는 것을 확인 할 수 있다."></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>도커도 잘 모르고, 스프링 부트도 잘 모르니 여기저기에서 막히는 부분이 많다.</p><p>springboot를 보니 docker로 이미지 생성을 위한 전용 jar도 제공하는 듯하다.</p><p>흠, 지금 고민이 되는 부분은 docker에 올린 스프링 프로젝트에서 생성하는 로그파일을 볼수가 없다는 것이다.</p><p>뭔가 방법이 있을거 같은데…</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="http://tech.cloudz-labs.io/posts/docker/docker-start/" target="_blank" rel="external nofollow noopener noreferrer">http://tech.cloudz-labs.io/posts/docker/docker-start/</a></p><p><a href="http://wonwoo.ml/index.php/post/268" target="_blank" rel="external nofollow noopener noreferrer">http://wonwoo.ml/index.php/post/268</a></p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> docker </tag>
            
            <tag> springboot </tag>
            
            <tag> dockfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot-mobile클라이언트 구별하기</title>
      <link href="/2019/01/09/springBoot-20190109-springboot-mobile/"/>
      <url>/2019/01/09/springBoot-20190109-springboot-mobile/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>스프링에서 리퀘스트를 요청하는 클라이언트가 desktop인지 mobile인지 등을 구별하는 내용을 정리한다.<br>데스크탑 브라우저의 요청은 데스크탑용 뷰를, 모바일인 브라우저의 요청에는 모바일용 뷰를 응답하는 예제이다.</p><h1 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h1><p>예제는 spring boot 2버전이다.<br>사용할 라이브러리는 spring-mobile-starter 라는 라이브러리인데, 이 라이브러리는 springboot 2.x 버전이 되면서 deprecated가 되어 자동으로 버전관리가 되지 않는다.</p><p>이 예제는 springboot2.x 버전에서 spring-mobile-starter를 강제로 주입해서 사용하고 있다.<br>현재 springboot2.x에서 spring-mobile-starter를 대체하는 라이브러리나 기술을 확인하지 못하고 있다.<br>아시는분 댓글좀…</p><h1 id="라이브러리-추가-및-설정"><a href="#라이브러리-추가-및-설정" class="headerlink" title="라이브러리 추가 및 설정"></a>라이브러리 추가 및 설정</h1><p>앞서 말했듯이 실습환경은 java8, springboot2, spring5, maven 환경이다.</p><p><strong>pom.xml</strong> 아래 내용을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.mobile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-mobile-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot 1.5버전 대에서는 자동으로 버전관리가 되지만, springboot 2버전부터 제외된 라이브러리라 강제로 적용하였다.</p><p><strong>application.profiles</strong> 파일에 아래 내용을 추가하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.mobile.devicedelegatingviewresolver.enabled:true</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix&#x3D;normal&#x2F;</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix&#x3D;mobile&#x2F;</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix&#x3D;tablet&#x2F;</span><br></pre></td></tr></table></figure><p>맨위 설정은 요청의 종류에 따라서 뷰 리졸버의 접두어로 경로를 붙이는 것을 활성화 하는 것이다.<br>그리고 그 아래부터 normal 요청에는 뷰 리졸버의 앞에 normal이라는 경로를 추가한다는 것이다.<br>그 아래는 mobile인경우, 또 그 아래는 tablet인 경우의 설정이다.</p><h1 id="controller-설정"><a href="#controller-설정" class="headerlink" title="controller 설정"></a>controller 설정</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mobile.device.Device;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mobile.device.DeviceUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HomeController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value=&#123;<span class="string">"/"</span>, <span class="string">"/index"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Device device, Model model, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Device deviceFromRequest = DeviceUtils.getCurrentDevice(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (device.isMobile()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello mobile user!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (device.isTablet()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello tablet user!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello desktop user!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"device: "</span> + device);</span><br><span class="line">        logger.info(<span class="string">"device form request: "</span> + deviceFromRequest);</span><br><span class="line">        logger.info(<span class="string">"device platform: "</span> + device.getDevicePlatform());</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="string">"hanumoka"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컨트롤러의 device 객체를 통해서 클라이언트의 종류를 확인 할 수 있다.<br>내부적으로 http 요청 헤더의 user agent 값을 통해서 구별한다.<br>application.properties의 설정으로 인해 http 요청에 따라 다른 경로의 index.html을 응답하게 된다.<br>예를 들어 일반 컴퓨터의 브라우저에서 위 컨트롤러에 접근한다면 /normal/index.html이<br>모바일 브라우저에서 위 컨트롤러로 접근한다면 /mobile/index.html이<br>테블릿 브라우저에서 위 컨트롤러로 접근한다면 /tablet/index.html을 응답하게 된다.</p><h1 id="뷰-파일-구성"><a href="#뷰-파일-구성" class="headerlink" title="뷰 파일 구성"></a>뷰 파일 구성</h1><p><img src="/images/20190109-springboot-mobile_1.png" alt="폴더구조와 html파일들"></p><p>nomal, mobile, tablet 폴더를 만들고 그 내부의 index.html 파일을 생성했다.<br>참고로 이 예제는 thymeleaf가 적용되어있지만, 무시해도 상관 없다.</p><h1 id="실행결과"><a href="#실행결과" class="headerlink" title="실행결과"></a>실행결과</h1><p>간단하게 크롬브라우저에서 테스트 했다.</p><p><img src="/images/20190109-springboot-mobile_2.png" alt="일반 브라우저에서 접근"></p><p><img src="/images/20190109-springboot-mobile_3.png" alt="모바일 브라우저에서 접근 "></p><p><img src="/images/20190109-springboot-mobile_4.png" alt="테블릿 브라우저에서 접근"></p><h1 id="spring-mobile-starter-테스트-예제"><a href="#spring-mobile-starter-테스트-예제" class="headerlink" title="spring-mobile-starter 테스트 예제"></a>spring-mobile-starter 테스트 예제</h1><p>참고로 spring-mobile-starter가 적용된 컨트롤러 테스트 코드를 추가한다.<br>주의 할 점은 WebMvcTest 어노테이션으로는 Device 객체를 생성하지 못해 테스트를 할 수가 없다.<br>SpringBootTest, AutoConfigureMockMvc 어노테이션으로 테스트를 할 수 있다.<br>그리고 요청의 header의 user agent 값을 변경하여 결과를 확인 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hanumoka.portfolio.nao.web.HomeController;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.core.StringContains.containsString;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class">//@<span class="title">WebMvcTest</span>(<span class="title">HomeController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">"/"</span>)</span><br><span class="line">                .header(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36"</span>)</span><br><span class="line">                .accept(MediaType.TEXT_HTML))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(view().name(<span class="string">"index"</span>))</span><br><span class="line">                .andExpect(model().attribute(<span class="string">"name"</span>, is(<span class="string">"hanumoka"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        mockMvc.perform(get("/")</span></span><br><span class="line"><span class="comment">                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36")</span></span><br><span class="line"><span class="comment">                .accept(MediaType.TEXT_HTML))</span></span><br><span class="line"><span class="comment">                .andExpect(view().name(containsString("desktop")))</span></span><br><span class="line"><span class="comment">                .andExpect(status().isOk())</span></span><br><span class="line"><span class="comment">                .andDo(print())</span></span><br><span class="line"><span class="comment">                .andExpect(view().name("index"))</span></span><br><span class="line"><span class="comment">                .andExpect(model().attribute("name", is("hanumoka")));*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverrun.com/ko/q/10317311" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverrun.com/ko/q/10317311</a></p><p>springboot2.0 spring mobile 디펜던시 <a href="https://stackoverflow.com/questions/53133226/how-to-use-device-resolver-for-spring-boot-2-00" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/53133226/how-to-use-device-resolver-for-spring-boot-2-00</a></p><p><a href="http://cpdev.tistory.com/50" target="_blank" rel="external nofollow noopener noreferrer">http://cpdev.tistory.com/50</a></p><p><a href="http://codingdojang.com/scode/297" target="_blank" rel="external nofollow noopener noreferrer">http://codingdojang.com/scode/297</a></p><p><a href="https://www.slipp.net/questions/439" target="_blank" rel="external nofollow noopener noreferrer">https://www.slipp.net/questions/439</a></p><p><a href="http://arahansa.github.io/docs_spring/device.html" target="_blank" rel="external nofollow noopener noreferrer">http://arahansa.github.io/docs_spring/device.html</a></p><p><a href="https://medium.com/@hun/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-bf6e03de29fc" target="_blank" rel="external nofollow noopener noreferrer">https://medium.com/@hun/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-bf6e03de29fc</a></p><p><a href="https://coding-factory.tistory.com/32" target="_blank" rel="external nofollow noopener noreferrer">https://coding-factory.tistory.com/32</a></p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
            <tag> mobile </tag>
            
            <tag> device </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot - thymeleaf layout dialect(tympeleaf 레이아웃 적용하기)</title>
      <link href="/2019/01/07/springBoot-20190107-springboot-thymeleaf-layout-dialect/"/>
      <url>/2019/01/07/springBoot-20190107-springboot-thymeleaf-layout-dialect/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>예전에 spring4 레거시 프로젝트 + xml 설정환경에서 tymeleaf 템플릿 엔진과 thymeleaf layout dialect(tymeleaf 레이아웃)를 적용했었다.<br>이번에는 springboot에 thymeleaf와 thymeleaf layout dialect를 적용해 보겠다.</p><p>개발환경: java8, springboot2, spring5, maven</p><h1 id="라이브러리-추가"><a href="#라이브러리-추가" class="headerlink" title="라이브러리 추가"></a>라이브러리 추가</h1><p>pom.xml에 thymeleaf와 thymeleaf layout dialect를 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;version&gt;2.3.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>thymeleaf는 thymeleaf템플릿 엔진을 사용하기 위한 기초 라이브러리이며, thymeleaf-layout-dialect는 thymeleaf템플릿 엔진 기반 레이아웃을 구성할때 필요한 라이브러리이다.<br>자애로운 spring-boot-starter-parent께서 위 둘의 버전관리를 자동으로 해주시니, version을 생략해도 된다.<br>본인의 경우 2.1.1 버전이 적용되었다.</p><h1 id="html파일로-레이아웃-구성"><a href="#html파일로-레이아웃-구성" class="headerlink" title="html파일로 레이아웃 구성"></a>html파일로 레이아웃 구성</h1><p><img src="/images/20190107-springboot-thymeleaf-layout-dialect_1.png" alt="폴더구조와 html파일들"></p><p>springboot web 프로젝트에서 기본적으로 resources/templates에서 뷰를 찾는다.<br>template/layout/default.html은 thymeleaf의 레이아웃이 되는 파일이다.<br>template/fragments/config.html template/fragments/footer.html template/fragments/header.html 파일은 defaout.html 레이아웃의 내부를 구성하는 부품 화면이 된다.<br>template/index.html은 핵심인 contents가 되는 페이지이다.</p><hr><p><strong>default.html</strong></p><p>이 파일이 thymeleaf 레이아웃을 잡아주는 핵심파일이 된다.<br>head th:replace는 head 영역의 부속 페이지를 말한다. 부속페이지는 fragments/config(html을 생략한다.) 그리고 그 파일의 configFragment 태그를 잘라와 사용한다는 의미이다.<br>header footer도 비슷한 의미이다.<br>layout이 되는 html의 태그는 xmlns:layout=”<a href="http://www.ultraq.net.nz/thymeleaf/layout&quot;를" target="_blank" rel="external nofollow noopener noreferrer">http://www.ultraq.net.nz/thymeleaf/layout&quot;를</a> 삽입해야 한다.<br>layout:fragment=”content” 부분은 서버의 요청별로 달라지는 컨텐츠 페이지가 된다.(index.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lagn</span>=<span class="string">"ko"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"fragments/config :: configFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer :: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>config.html</strong></p><p>head의 공통적인 부분을 담당하는 페이지이다.<br>css, js 파일따위를 관리 할 수 있다.<br>특의한 점은 &lt;th:block layout:fragment=”css”&gt; &lt;th:block layout:fragment=”script”&gt; 인데, 레이아웃의 content가 되는 index.html에 작성된 css나, js를 가져와서 적용하는 부분이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"configFragment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 컨텐츠페이지의 CSS 영역이 들어감 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-2.2.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 컨텐츠페이지의 스크립트 영역이 들어감 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>footer.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"footerFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid gold"</span>&gt;</span></span><br><span class="line">        Footer영역입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>header.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:fragment</span>=<span class="string">"headerFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid green"</span>&gt;</span></span><br><span class="line">        header.html 입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;a th:href="@&#123;/index&#125;"&gt;index 페이지 이동&lt;/a&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>index.html</strong></p><p>컨텐츠가 되는 index.html 페이지이다.<br>html 태그의 어트리뷰트가 다름을 주의하자.<br>layout:decorator 로 이 페이지가 렌더링 될때 사용살 layout을 지정한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout:decorator</span>=<span class="string">"layout/default"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html 고유 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html 고유 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red"</span>&gt;</span></span><br><span class="line">        index.html 입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="실행결과"><a href="#실행결과" class="headerlink" title="실행결과"></a>실행결과</h1><p><img src="/images/20190107-springboot-thymeleaf-layout-dialect_2.png" alt="springboot thymeleaf 레이아웃 적용 결과"></p><p>간단하게 동작을 확인할 수 있다.<br>spring개발팀이 밀고 있어써 그런지 thymeleaf의 설정법은 기타 템플릿 엔진보다 간편한것 같다.</p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
            <tag> tymeleaf </tag>
            
            <tag> tymeleaf_layout </tag>
            
            <tag> tymeleaf_layout_dialect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java - POJO vs Java Bean</title>
      <link href="/2019/01/06/java-20190106-java-pojo-vs-bean/"/>
      <url>/2019/01/06/java-20190106-java-pojo-vs-bean/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Java 개발을 하다보면, 누구나 자동으로 접할수 밖에 없는 단어라면 아마도 POJO, Bean 이라는 것이 있다.<br>대충 보면 이 둘의 의미가 비슷한거 같기도하고, 아닌거 같기도 하다.<br>이번에 그 차이를 한번 정리해 본다.</p><h1 id="POJO란"><a href="#POJO란" class="headerlink" title="POJO란"></a>POJO란</h1><p>POJO란 Plain Old Java Object의 약자로,말 그대로 평범하고 오래된 Java Object라는 의미로, 순수한 Java Object를 의미한다.<br>2000년 9월 세미나에서 마틴파울러옹이 J2EE를 까면서 내세운 단어이다.<br>과거 EJB, Strust같은 프레임워크는 비지니스 로직을 구현하기 위한 클래스를 코딩할 때 프레임워크의 특정 인터페이스등의 상속을 강요하였고, 그 결과 비지니스 로직을 코딩해야할 시간에 상속을 구현하기 위한 관용적인 코딩작업을 불필요하게 해야 했었다.<br>이렇게 프레임워크가 비지니스 로직에 특정 프레임워크의 기술에 관련된 코딩을 강제하는 것을, 침투적인 프레임워크라 하는데 무의미하고 관용적인 코딩의 반복외에도 이식성등 여러가지 문제를 가지고 있다. </p><p>객체지향의 가장 중요한 개념중 하나의 느슨한 의존관계를 역행하는 이런 침투적인 프레임워크의 문제점을 강조하기 위해 마틴파울러옹은 POJO라는 말을 만들었고 이 POJO라는 말은 Java 진영외에도 다양한 프로그래밍 진영에서 사용하게 되었다.</p><p>POJO른 조금 구체적으로 설명하자면, 특정 기술에 종속되지 않은 순수한 JAVA Object라고 말할 수 있겠다.</p><h1 id="JAVA-Bean-이란"><a href="#JAVA-Bean-이란" class="headerlink" title="JAVA Bean 이란"></a>JAVA Bean 이란</h1><p>Java bean? Java 콩? 이게 무슨 말일까?<br>Java Bean은 데이터를 표현하기 위한 Java 클래스를 만들때의 규약이다.</p><p>아래 규칙을 지킨 Java 클래스는 Java bean이라고 부른다.</p><ul><li>모든 클래스의 프로퍼티는 private이며 getter, setter 메소드로 제어한다.</li><li>인자가 없는 public 생성자가 있어야 한다.</li><li>Serializable 인터페이스를 구현해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serailVersionUID = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountVO</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java bean 규약은 Java EE 프레임워크에서 데이터를 저장할 Java 클래스를 만들때 제안하는 일종의 규약이다.<br>Java bean 규약은 jdk1.1부터 시작되었으며, Java 진영의 다양한 시스템에서 Java 클래스로 데이터를 공유를 위한 표준으로 사용되고 있다.</p><h1 id="POJO와-JAVA-BEAN은-같다"><a href="#POJO와-JAVA-BEAN은-같다" class="headerlink" title="POJO와 JAVA BEAN은 같다?"></a>POJO와 JAVA BEAN은 같다?</h1><p>Java bean은 POJO이다.<br>그리나 POJO는 Java bena이 아니다.</p><p>POJO는 java bean 보다 범주가 더 넓은 개념이다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://searchmicroservices.techtarget.com/answer/What-is-a-Java-Bean-Why-it-is-useful-in-J2EE" target="_blank" rel="external nofollow noopener noreferrer">https://searchmicroservices.techtarget.com/answer/What-is-a-Java-Bean-Why-it-is-useful-in-J2EE</a><br><a href="http://www.avajava.com/tutorials/lessons/what-is-a-javabean.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.avajava.com/tutorials/lessons/what-is-a-javabean.html</a><br><a href="https://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly</a><br><a href="https://stackoverflow.com/questions/12517905/what-is-java-pojo-class-java-bean-normal-class" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/12517905/what-is-java-pojo-class-java-bean-normal-class</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> pojo </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-ApplicationRunner, CommandLineRunner(스프링부트 구동시 동작시킬 코드실행)</title>
      <link href="/2019/01/04/springBoot-20190104-spring-applicationRunner/"/>
      <url>/2019/01/04/springBoot-20190104-spring-applicationRunner/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Spring boot 어플리케이션을 시작시키면서 동시에 동작시킬 코드가 있다면, ApplicationRunner와 CommandLineRunner 인터페이스를 구현한 bean을 사용하면 된다.</p><h1 id="사용법-예시"><a href="#사용법-예시" class="headerlink" title="사용법 예시"></a>사용법 예시</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============ApplicationRunner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============ApplicationRunner2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============CommandLineRunner1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 인터페이스 모두 함수형 인터페이스이며, 구현한 run메소드의 파라미터인 args를 통해서 springboot어플리케이션 실행시 전달받은 파라미터(Program arguemnts) 값을 읽어올수 있다.<br>VM Opions값은 읽어 올수 없다.</p><p><strong>실행결과</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.<span class="number">1</span>.<span class="number">1</span>.RELEASE)</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">24</span>.<span class="number">445</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : Starting NaoApplication on DESKTOP-EU9BLID with PID <span class="number">14840</span> (C:\Users\amagr\Desktop\Project\nao\target\classes started by amagr <span class="keyword">in</span> C:\Users\amagr\Desktop\Project\nao)</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">24</span>.<span class="number">449</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : No active profile <span class="built_in">set</span>, falling back to default profiles: default</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">519</span>  WARN <span class="number">14840</span> --- [           main] io.undertow.websockets.jsr               : UT026010: Buffer pool was <span class="keyword">not</span> <span class="built_in">set</span> on WebSocketDeploymentInfo, the default pool will be used</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">539</span>  INFO <span class="number">14840</span> --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">539</span>  INFO <span class="number">14840</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed <span class="keyword">in</span> <span class="number">1043</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">729</span>  INFO <span class="number">14840</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">931</span>  INFO <span class="number">14840</span> --- [           main] org.xnio                                 : XNIO version <span class="number">3</span>.<span class="number">3</span>.<span class="number">8</span>.Final</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">940</span>  INFO <span class="number">14840</span> --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version <span class="number">3</span>.<span class="number">3</span>.<span class="number">8</span>.Final</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">988</span>  INFO <span class="number">14840</span> --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) <span class="number">1290</span> (http) with context <span class="built_in">path</span> ''</span><br><span class="line">포트:<span class="number">1290</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">991</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : Started NaoApplication <span class="keyword">in</span> <span class="number">1</span>.<span class="number">854</span> seconds (JVM running <span class="keyword">for</span> <span class="number">2</span>.<span class="number">285</span>)</span><br><span class="line">============ApplicationRunner</span><br><span class="line">============CommandLineRunner1</span><br><span class="line">============ApplicationRunner2</span><br></pre></td></tr></table></figure><p>springboot 구동시 시작된 뒤, ApplicationRunner, CommandLineRunner 인터페이스로 구현한 run메소드가 동작하는 것을 확인 할 수 있다.<br>위 처럼, Order어노테이션으로 이들간의 동작 순서를 지정 할 수도 있다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne" target="_blank" rel="external nofollow noopener noreferrer">https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne</a></p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> ApplicationRunner </tag>
            
            <tag> CommandLineRunner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 임베디드 undertow 설정</title>
      <link href="/2019/01/04/springBoot-20190104-springboot-undertow/"/>
      <url>/2019/01/04/springBoot-20190104-springboot-undertow/</url>
      
        <content type="html"><![CDATA[<h1 id="undertow-언더토우"><a href="#undertow-언더토우" class="headerlink" title="undertow(언더토우)"></a>undertow(언더토우)</h1><p>undertow는 Tomcat, jetty와 같은 웹서버이다.<br>JBoss 진영의 새로 도입된 웹서버로, 웹서버와 서블릿 컨테이너 기능을 제공한다.<br>Java언어로 작성되었다.<br>초경량 웹서버라 가볍다.<br>NON-Blocking API와 Bloking API 모두 지원한다.<br>Apache License, version 2.0을 따르는 오픈소스이다.<br>Java Servlet 3.1과 WebSocker을 구현하고 http upgrade를 지원한다.</p><p><a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/" target="_blank" rel="external nofollow noopener noreferrer">https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/</a></p><p>위 글에서 tomcat, jetty, undertow의 성능을 단순 비교한 내용이 있는데, 솔직히 성능에서 차이는 별로 없었다.(물론 단순한 테스트이긴 함)<br>undertow가 tomcat,jetty에 비해 약간 좋은 성능을 보여주기는 한다.</p><p>tomcat과 jetty와 달리 언더토우는 default로 HTTP Persistent connections(HTTP persistent connection, also called HTTP keep-alive, or HTTP connection reuse)를 응답헤더에 포함하고 있다.(http2가 나온 마당에 중요한 특이점은 아니다.)</p><p>springboot에서 undertow사용시 https설정이 tomcat사용시 https설정보다 훨씬 간편하다.</p><h1 id="springboot에서-undertow설정"><a href="#springboot에서-undertow설정" class="headerlink" title="springboot에서 undertow설정"></a>springboot에서 undertow설정</h1><p>간단하다. default 설정인 tomcat을 제외시키고 undertow를 추가해주면 된다.<br>내 경우 maven 프로젝트이므로 pom.xml의 dependency를 아래처럼 수정해면 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exclusion을 통해 default tomcat 임베드 서블릿컨테이너를 제외시키지 않으면, undertow를 추가한다 하더라도 tomcat으로 실행이 된다.<br>반드시 제외하자.</p><p><img src="/images/20190104-springboot-undertow_1.png" alt="실행결과"></p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="http://www.opennaru.com/jboss/undertow-is-web-server-in-wildfly-and-jboss-eap7/" target="_blank" rel="external nofollow noopener noreferrer">http://www.opennaru.com/jboss/undertow-is-web-server-in-wildfly-and-jboss-eap7/</a></p><p><a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/" target="_blank" rel="external nofollow noopener noreferrer">https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/</a></p><p><a href="http://undertow.io/" target="_blank" rel="external nofollow noopener noreferrer">http://undertow.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springBoot </tag>
            
            <tag> undertow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intelliJ Comunity에 SpringBoot 프로젝트 생성하기</title>
      <link href="/2019/01/04/intelliJ-20190104-intelliJ-Comunity-springboot-settting/"/>
      <url>/2019/01/04/intelliJ-20190104-intelliJ-Comunity-springboot-settting/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>스프링 개발을 해오면서, 주로 전자정부프레임워크, 이클립스, STS등을 사용해 왔었다.<br>intelliJ ide가 넘사벽으로 좋다고 이야기는 많이 들어 봤으나, 유료인데다 월단위 라이센스라 선뜻 당기지 않았다.</p><p>그러던 와중 인프런 인강에서 springboot 프로젝트를 intelliJ comunity에서도 개발할수 있는 방법을 알게되어 이렇게 정리한다.<br>intellyJ Comunity 버전이라고 무료버전이 있긴한데, 자체적으로 스프링프로젝트 생성을 제공하지 않는 것을 극복할수 있는 것이다.</p><h1 id="intelliJ-comunity-다운로드"><a href="#intelliJ-comunity-다운로드" class="headerlink" title="intelliJ comunity 다운로드"></a>intelliJ comunity 다운로드</h1><p><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="external nofollow noopener noreferrer">https://www.jetbrains.com/idea/download/#section=windows</a></p><p>위 페이지로 가서 Community를 다운로드 받으면 된다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_1.png" alt="역시 무료버전이라 기능이 많이 제한되어 있다."></p><p>아 물론 기존에 java가 설치와 환경변수 설정이 선행되어야 한다.<br>그리고 springboot 프로젝트를 위해 jdk8버전 이상이 필요하다.</p><h1 id="Spring-initializr에서-SpringBoot-프로젝트-생성"><a href="#Spring-initializr에서-SpringBoot-프로젝트-생성" class="headerlink" title="Spring initializr에서 SpringBoot 프로젝트 생성"></a>Spring initializr에서 SpringBoot 프로젝트 생성</h1><p>여기서 무료버전이라 intelliJ에서 제공하지 않는 springboot프로젝트를 대신 생성해주는 Spring initializr가 필요하다.</p><p><a href="https://start.spring.io/" target="_blank" rel="external nofollow noopener noreferrer">https://start.spring.io/</a></p><p>위 주소가 Spring initializr, 즉 springboot 프로젝트를 생성해주는 곳이다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_2.png" alt="Spring initializr"></p><p>입맛에 맞게 설정한뒤, generate project 버튼을 클릭하면 zip 파일을 하나 내려받게 된다.</p><p>그 파일을 압축해제후 intelliJ comunity 버전으로 열면된다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_3.png" alt="실행결과"></p><p>maven 디펜던시를 다 받고 난뒤 run을 하게 되면 springboot 프로젝트가 정상적으로 동작하는 것을 확인 할 수 있다.</p><p>끝!</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="https://start.spring.io/" target="_blank" rel="external nofollow noopener noreferrer">https://start.spring.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> intelliJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ </tag>
            
            <tag> springBoot </tag>
            
            <tag> SpringInitializr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Widnows10 openJDK 설치(JUlU)</title>
      <link href="/2019/01/02/java-20190102-java-install-openjdk-10-julu/"/>
      <url>/2019/01/02/java-20190102-java-install-openjdk-10-julu/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>오라클의 돈독에 개발용 java jdk도 유료화가 결정되었다.<br>Windows 10에 오라클 JDK가 아닌 openjdk를 설치해보자.</p><h1 id="Zulu-openJDK-다운로드-하기"><a href="#Zulu-openJDK-다운로드-하기" class="headerlink" title="Zulu openJDK 다운로드 하기"></a>Zulu openJDK 다운로드 하기</h1><p><a href="https://www.azul.com/downloads/zulu/zulu-windows/" target="_blank" rel="external nofollow noopener noreferrer">https://www.azul.com/downloads/zulu/zulu-windows/</a> 로 이동하자.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_1.png" alt="재밌게도 java의 마지막 공짜 update날짜를 카운팅하고 있다."></p><p><img src="/images/20190102-java-install-openjdk-10-julu_2.png" alt="java6 버전부터 현재 최신 11버전까지 openjdk를 제공한다."></p><p>server용이 아닌 client용으로 원하는 jdk를 다운받자.</p><p>서버용은 zip, 윈도우용은 msi 형태로 jdk가 제공된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_3.png" alt="이런식으로 실행하여 설치하면 된다."></p><p>ZULU로 설치할 경우 기존 oracle jdk와 다르기 zulu라는 폴더로 설치가 된다.</p><p>만약 환경변수를 설정할대 이 폴더를 적용해주면 된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_4.png" alt="zulu openjdk 환경변수설정"></p><p>JAVA_HOME, path, classpath 환경변수를 zulu폴더 기준으로 잡아주면된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_5.png" alt="환경변수를 잡아주면 잘 동작한다."></p><p>끝! 오라클 JDK와 이제 손절해야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> openjdk </tag>
            
            <tag> zulu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>최대공약수 재귀(recursion)함수 feat. 유클리드 호제법</title>
      <link href="/2018/12/28/algorithm-20181228-algorithm-recursion-greatest-common-divisor/"/>
      <url>/2018/12/28/algorithm-20181228-algorithm-recursion-greatest-common-divisor/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>인프런에서 무료 알고리즘 강좌를 듣고있다.<br>아 코딩테스트 넘나 어려운것…</p><p>여튼 순환 혹은 재귀함수를 이용하여 최대공약수를 구하는 예제인데, 참으로 신박해서 정리해본다.<br>기원전 300년 전 유클리드라는 아저씨가 유클리드 호제법이라고 최대공약수를 구하는 공식을 만들어 놓으셨다.<br>아래 코드는 그 유클리드 호제법을 이용한 최대공약수를 구하는 예제이다.</p><p><strong>Java 코드</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(gcd(<span class="number">10</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( q == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gcd(q, p % q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Python 코드</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> q == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(q, p % q)</span><br><span class="line"></span><br><span class="line">result = gcd(<span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">print(<span class="string">'최대공약수:'</span>,result)</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>이거 알고리즘 보다, 중등수학부터 다시 봐야 할것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> recursion </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 최대공약수 </tag>
            
            <tag> 호제법 </tag>
            
            <tag> 유클리드 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python - 파이썬 공부시작 pip conda anaconda miniconda</title>
      <link href="/2018/12/21/python-20181221-python-anaconda-miniconda/"/>
      <url>/2018/12/21/python-20181221-python-anaconda-miniconda/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>예전에 한번 책을 대충 훑어본적이 있긴한데, 기억이 가물가물해서 이번에 다시 파이썬책을 읽어보았다.<br>몇 년이 지나도 과거에 한번 본적이 있어서인지, 아니면 파이썬 자체가 너무 쉬워서인지 2~3일 정도 책을 보니 대충 문법정도는 익힐수 있었다.</p><p>책을 본 뒤, 인프런에 Python 강좌영상을 보는데 왠걸 파이썬 개발환경을 구성할 때 파이썬 공식 홈페이지에서 파이썬 개발도구를 다운로드 하는 것이 아니라 miniconda라는 것을 다운로드 한다.<br>잉? 이건 뭐지? 일종의 패키지관리도구인가? PIP라는게 있는데?</p><p>pip, Conda, MinoConda, Anaconda의 대충 용어정리를 좀 해봐야겠다.</p><h1 id="파이썬의-pip"><a href="#파이썬의-pip" class="headerlink" title="파이썬의 pip"></a>파이썬의 pip</h1><p>pip는 파이썬전용 공식 패키지 메니저이다. Node의 npm과 같은 역할은 하는 녀석이다.<br>pip도 파이썬으로 만들어 졌으며, 오픈소스이다.<br>뭔가 필요한 모듈이 있다면, 그것을 pip로 다운로드해서 import하여 사용할수 있다.<br>이 pip는 파이썬 재단에서 Python 3.4 버전부터 공식적으로 제공하는 패키지 관리도구이며, 오직 Python 모듈 패키지만 사용할수 있다.</p><p>만약 파이썬이 설치되어 있다면 아래처럼 pip list 명령어로 이미 설치된 파이썬 모듈, 패키지등을 확인할수 있다.</p><p><img src="/images/20181221-python-anaconda-miniconda_1.png" alt="레이아웃 구조"></p><p>pip의 기초 명령어는 다음과 같다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage // 특정 패키지 다운로드</span><br><span class="line">pip uninstall SomePackage  //특정 패키지 삭제</span><br><span class="line">pip install SomePackage==1.0.4  // 특정 패키지의 특정 버전으로 설치</span><br><span class="line">pip install --upgrade SomePackage  // 특정 패키지 업그레이드</span><br><span class="line">pip list  // 설치된 패키지 목록 확인</span><br></pre></td></tr></table></figure><h1 id="Anaconda와-Miniconda-파이썬-배포판"><a href="#Anaconda와-Miniconda-파이썬-배포판" class="headerlink" title="Anaconda와 Miniconda 파이썬 배포판"></a>Anaconda와 Miniconda 파이썬 배포판</h1><p>아나콘다란 파이썬과 R의 데이터 과학과 머신러닝을 위한 오픈소스 배포판이다.<br>즉 Anaconda는 파이썬용 그리고 R용 두가지가 존재한다.</p><p>파이썬 Anaconda 배포판은 파이썬 + conda + 데이터과학과 머신러닝을 위한 패키지(약150)를 포함하며, 이 많은 라이브러리 때문에 설치할때 3GB 정도의 많은 용량이 필요하다.</p><p>파이썬 Miniconda 배포판은 Anaconda의 경량버전으로, 파이썬 + conda 로 구성되어 있다.<br>따라서 파이썬 학습용으로는 Miniconda가 적당해 보인다. 필요한 모듈은 그때마다 즉시 설치해서 사용하면 되기 때문이다.</p><p>미니콘다 설치경로 <a href="https://conda.io/miniconda.html" target="_blank" rel="external nofollow noopener noreferrer">https://conda.io/miniconda.html</a></p><h1 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h1><p>Continuum Analytics에서 재공하는 일종의 파이썬 배포판인 Anaconda의 패키지 메니저이다.<br>이것 역시 오픈소스이며, 파이썬으로 만들어졌다.<br>pip와는 다른 anaconda repository에서 필요한 모듈을 다운로드 받는다.<br>Conda도 일종의 패키지 관리자이며 추가로 환경관리자(enviroment)이다.<br>여기서 환경관리자 부분은 잘 모르겠다. vitualenv라는 가상환경을 제공한다고 하는데 일종의 격리된 프로그램 실행환경을 말하는 것 같다.(머신러닝같은 영역에서 사용하는 듯 하나 정확히 모르겠다.)<br>pip와는 다르게 파이썬 뿐만 아니라 R, Ruby, Lua, Java, C, C++, FORTRAN등등 다양한 언어에서도 사용이 가능하다.</p><h1 id="그래서-파이썬-공부할때-뭘-설치할까"><a href="#그래서-파이썬-공부할때-뭘-설치할까" class="headerlink" title="그래서 파이썬 공부할때 뭘 설치할까"></a>그래서 파이썬 공부할때 뭘 설치할까</h1><p>파이썬을 공부하면서 머신러닝을 공부할 생각이니 miniconda를 설치할 생각이다.<br>물론 파이썬 재단에서 재공하는 파이썬 core를 설치하고 추가로 conda를 설치할수 있다고 하는데, 별로 추천되지 않는듯 하다.<br><strong>miniconda를 설치해도 conda만 사용하는 것이 아니라 pip도 사용이 가능하다.</strong></p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p>점프투파이썬 pip <a href="https://wikidocs.net/15134" target="_blank" rel="external nofollow noopener noreferrer">https://wikidocs.net/15134</a></p><p>pip vs conda <a href="https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda</a></p><p>pip vs conda <a href="https://hashcode.co.kr/questions/3873/conda%EC%99%80-pip%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94" target="_blank" rel="external nofollow noopener noreferrer">https://hashcode.co.kr/questions/3873/conda%EC%99%80-pip%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94</a></p><p>conda doc <a href="https://conda.io/docs/" target="_blank" rel="external nofollow noopener noreferrer">https://conda.io/docs/</a></p><p>아나콘다 vs 미니콘다 <a href="https://stackoverflow.com/questions/45421163/anaconda-vs-miniconda" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/45421163/anaconda-vs-miniconda</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
            <tag> conda </tag>
            
            <tag> anaconda </tag>
            
            <tag> miniconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node Express에서 Handlebars layout body script처리(helper사용)</title>
      <link href="/2018/12/10/node-20181210-node-express-handlebars-add-body-script-style/"/>
      <url>/2018/12/10/node-20181210-node-express-handlebars-add-body-script-style/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>음 저번에 Express에 Handlebars 템플릿으로 레이아웃을 만들었다.</p><p><a href="/2018/11/28/node-20181128-node-express-handlerbars/">Express Node에 Handlebars 템플릿엔진 적용하기.</a></p><p><img src="/images/20181128-node-express-handlebars_1.png" alt="레이아웃 구조"></p><p>위와 같이 레이아웃은 말끔히 만들었지만, 문제가 하나 있었다.</p><p>index.hbs에서 jquery를 호출 할 수가 없었다.</p><p>그 이유는 레이아웃을 담당하는 main.hbs에서 대부분의 script와 style등을 load하는데 그 순서가 다음과 같이 되어 있었기 때문이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/stylesheets/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.11.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-migrate-1.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 경우 body에서 Jquery를 사용할 경우 아직 로드되지 않는 jquery에 접근하기 때문에 문제가 발생 할 수도 있다.</p><p>위와 같은 문제를 해결하기 위해 handlebars의 helper를 사용하여, 서버에서 handlebars 페이지를 렌더링 할때 body의 script와 style을 가져와 레이아웃을 담당하는 main.hbs에 적용 할 수 있다.</p><h1 id="Handlebars-layout에-helper-사용하기"><a href="#Handlebars-layout에-helper-사용하기" class="headerlink" title="Handlebars layout에 helper 사용하기"></a>Handlebars layout에 helper 사용하기</h1><p>아래는 layout을 담당하는 main.hbs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/stylesheets/style.css"</span>&gt;</span></span><br><span class="line">    &#123;&#123;&#123;_sections.style&#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.11.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-migrate-1.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;&#123;&#123;_sections.script&#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위의 _sections는 handlebars의 helper를 호출하는 부분이다. </p><p>그리고 body에 들어갈 index.hbs는 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my home page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#section 'script'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert( <span class="string">"I'm ready!"</span> );</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;/section&#125;&#125;</span><br></pre></td></tr></table></figure><p>위 index.hbs 내부의 section 감싸진 부분은 main.hbs의 _sections.script로 옮겨져 서버에서 렌더링 되므로, index.hbs에서 main.hbs에서 로드하는 기타 자원들이 로드되었는지 여부를 걱정 할 필요가 없어진다.</p><p>그리고 express의 app.js 의 handelbars셋팅은 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">app.engine( <span class="string">'hbs'</span>, hbs( &#123;</span><br><span class="line">  extname: <span class="string">'hbs'</span>,</span><br><span class="line">  defaultLayout: <span class="string">'main'</span>,</span><br><span class="line">  layoutsDir: __dirname + <span class="string">'/views/layouts/'</span>,</span><br><span class="line">  partialsDir: __dirname + <span class="string">'/views/partials/'</span>,</span><br><span class="line">  helpers : &#123;</span><br><span class="line">    inc : <span class="function"><span class="keyword">function</span>(<span class="params">number, options</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//return parseInt(value) + 1;</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">typeof</span>(number) === <span class="string">'undefined'</span> || number === <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increment by inc parameter if it exists or just by one</span></span><br><span class="line">    <span class="keyword">return</span> number + (options.hash.inc || <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    section: <span class="function"><span class="keyword">function</span>(<span class="params">name, options</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>._sections) <span class="keyword">this</span>._sections = &#123;&#125;;</span><br><span class="line">                <span class="keyword">this</span>._sections[name] = options.fn(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ) );</span><br><span class="line"></span><br><span class="line">app.set( <span class="string">'view engine'</span>, <span class="string">'hbs'</span> );</span><br></pre></td></tr></table></figure><p>위의 설정중 section이라는 helper를 이용하여 index.hbs의 script, style을 레이아웃을 담당하는 main.hbs에 불러와 렌더링 할 수 있다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverflow.com/questions/25300017/how-to-ensure-the-javascript-is-at-the-bottom-of-the-code-in-express-handlebars" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/25300017/how-to-ensure-the-javascript-is-at-the-bottom-of-the-code-in-express-handlebars</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
            <tag> handlebars </tag>
            
            <tag> template </tag>
            
            <tag> layout </tag>
            
            <tag> body </tag>
            
            <tag> helper </tag>
            
            <tag> script </tag>
            
            <tag> style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk version history(jdk 버전간 차이)</title>
      <link href="/2018/12/08/java-20181208-java-jdk-version-history/"/>
      <url>/2018/12/08/java-20181208-java-jdk-version-history/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk-버전"><a href="#jdk-버전" class="headerlink" title="jdk 버전"></a>jdk 버전</h1><h2 id="JDK1-1"><a href="#JDK1-1" class="headerlink" title="JDK1.1"></a>JDK1.1</h2><p>1997년 : RMI, JDBC, reflection, JIT, inner Class 개념포함</p><h2 id="JDK1-2"><a href="#JDK1-2" class="headerlink" title="JDK1.2"></a>JDK1.2</h2><p>1998년 : Java SE 1.2, ME 1.2, EE 1.2 발표(J2EE라는 명칭 사용시작)<br>java가 세가지 버전으로 나뉨.<br>Swing이 SE에 포함, Corba IDL(이종 기기간 함수호출 스팩), Collection Framework 포함</p><h2 id="JDK-1-3"><a href="#JDK-1-3" class="headerlink" title="JDK 1.3"></a>JDK 1.3</h2><p>2000년도<br>HotSpot(Sun에서 만든 JIT 구현), JNDI(java 네이밍, 디렉토리 인터페이스 J2EE스펙) 포함</p><h2 id="JDK-1-4"><a href="#JDK-1-4" class="headerlink" title="JDK 1.4"></a>JDK 1.4</h2><p>2002년도<br>JCP(Java Community Process)에 의해서 오픈소스 정책으로 자바가 관리되기 시작한 버전<br>Java 2 Security 모델의 확립(Sandbox)<br>Java Web Start 포함 (Java Applet이 브라우저에서 돌아가는 것과 다르게, 외부 sandbox에서 동작)<br>Language : assert 도입<br>API : Reqular Expression, Assert keyword, Security 2 version(현재 security model), Non Blocking IO(NIO)</p><h2 id="JDK-1-5"><a href="#JDK-1-5" class="headerlink" title="JDK 1.5"></a>JDK 1.5</h2><p>2004년<br>기능적으로 가장 많은 변화가 생긴 버전<br>Language : Generics, annotation, auto boxing, enum, vararg, foreach, static imports 도입<br>API : java.utio.concurrent APi, scanner class<br>J2EE라는 명칭이 Java EE로 개칭</p><h2 id="JDK-1-6"><a href="#JDK-1-6" class="headerlink" title="JDK 1.6"></a>JDK 1.6</h2><p>2006년<br>기능에 큰 변화 없음, 보안 성능강화<br>JVM/Swing에 있어 많은 성능향상(synchronization, compiler, Gc, start-up time)<br>G1(Garbage Fist) GC도입</p><h3 id="Interned-String-이슈"><a href="#Interned-String-이슈" class="headerlink" title="Interned String 이슈"></a>Interned String 이슈</h3><p>Java6 이하 버전의 경우 신규 생성된 String은 PermGen(런타임시 크기가 변경되지 않는 메모리)에 위치하며, 동일한 String의 경우 Pooling.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String test0 = <span class="string">"test"</span>; <span class="comment">// 내부적으로 new String 호출후 intern()메소드를 자동으로 호출한다.</span></span><br><span class="line">String test1 = <span class="keyword">new</span> String(<span class="string">"test"</span>).intern();  </span><br><span class="line"></span><br><span class="line">String test2 = <span class="keyword">new</span> String(<span class="string">"test"</span>);  <span class="comment">// 이 코드는 위 코드보다 메모리상 효율 적이지 못하다.</span></span><br></pre></td></tr></table></figure><p>java6 이후 String이 저장되는 메모리가 PermGet에서 heap으로 변경되어, heap size 튜닝으로 Out.of.memeory를 극복(절대적 해결이 아님)할 수 있다.<br>java 임베디드 쪽에서 성능이슈라 웹에서는 별로 신경을 안써도 될 내용 같다.</p><h2 id="JDK-1-7"><a href="#JDK-1-7" class="headerlink" title="JDK 1.7"></a>JDK 1.7</h2><p>2011년<br>JVM : Dynamic Language support<br>Language : Switch문 인자로 String 허용, try-resource, generics 타입추론, 숫자에서 undersocre 사용</p><h3 id="숫자-언더스코어"><a href="#숫자-언더스코어" class="headerlink" title="숫자 언더스코어"></a>숫자 언더스코어</h3><p>조건 : 반드시 숫자 사이에만 올 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> moneyWon = <span class="number">19000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> moneyWon2 = <span class="number">19_000_000_000</span>;  <span class="comment">// 숫자 언더스코어, 숫자의 가독성 상승</span></span><br></pre></td></tr></table></figure><h2 id="JDK-1-8"><a href="#JDK-1-8" class="headerlink" title="JDK 1.8"></a>JDK 1.8</h2><p>2014<br>오라클로 인수된 후 첫번째 버전<br>JDK 1.5이후 가장 큰 언어적 변화(Lambda및 함수형 프로그래밍,Interface default method)<br>JEP에 의해서 새로운 기능들이 발의되기 시작<br>Language : Lambda expression, Defauit Method Ingerface, functional programming for MapReduce style 지원, default method를 이용한 다중상속 지원, 메소드 참조<br>API : Nashorn(JS엔진), new Date and Tiem API, stream api, Collection에 대한 함수형화<br>병렬처리에 적합한 구조</p><h2 id="JDK-1-9"><a href="#JDK-1-9" class="headerlink" title="JDK 1.9"></a>JDK 1.9</h2><p>2016 예정<br>Modular System (jigsaw) 지원 예정<br>Money API 지원예정<br>JAVA Shell 지원예정<br>변수에 대한 타입 추론 지원예정(var, val)<br>OpenCL 이용한 자동화된 병렬 프로그래밍 지원 예정</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="http://koreateam.co.kr/162" target="_blank" rel="external nofollow noopener noreferrer">http://koreateam.co.kr/162</a><br><a href="https://01010011.blog/2016/12/29/java6-java7%EC%9D%84-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/" target="_blank" rel="external nofollow noopener noreferrer">https://01010011.blog/2016/12/29/java6-java7%EC%9D%84-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/</a><br><a href="http://seosh81.info/?p=739" target="_blank" rel="external nofollow noopener noreferrer">http://seosh81.info/?p=739</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JDK </tag>
            
            <tag> VERSION </tag>
            
            <tag> HISTORY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 interface의 public default, public static 메소드(default메소드와 접근제어자 혼동)</title>
      <link href="/2018/12/03/java-20181203-java8-interface-public-default-static/"/>
      <url>/2018/12/03/java-20181203-java8-interface-public-default-static/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>아! 자과감 들고 괴로워…<br>이 글은 java8의 interface의 public default 메소드를 보며 햇갈렸던 내용을 정리한다.</p><h1 id="Java8의-public-default와-public-static-메소드"><a href="#Java8의-public-default와-public-static-메소드" class="headerlink" title="Java8의 public default와 public static 메소드"></a>Java8의 public default와 public static 메소드</h1><p>Java8에서 확장성을 위해 Interface에 default, static 메소드라는 것을 추가했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">testInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//상수</span></span><br><span class="line">  타입 상수명 = 값;</span><br><span class="line">  <span class="comment">//추상메소드 </span></span><br><span class="line">  타입 메소드명(매개변수,...);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//디폴트 메소드</span></span><br><span class="line">  <span class="keyword">default</span> 타입 메소드명(매개변수,...)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//정적 메소드</span></span><br><span class="line">  <span class="keyword">static</span> 타입 메소드명(매개변수,...)&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디폴트 메소드는 인터페이스를 구현한 객체에서 호출할수 있으며, 정적메소드는 인터페이스명으로 접근하여 호출할수 있다.<br>직관 적이며 간단하다.</p><p>그런데 자바 책을 복습겸 책을 뒤적이다보니, 이런 설명을 보았다.</p><ul><li>인터페이스의 디폴트 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.</li><li>인터페이스의 정적 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.</li></ul><p>즉 컴파일 될때 아래처럼 public 접근제어자가 추가된다는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">testInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//디폴트 메소드</span></span><br><span class="line">  [<span class="keyword">public</span>] <span class="keyword">default</span> 타입 메소드명(매개변수,...)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//정적 메소드</span></span><br><span class="line">  [<span class="keyword">public</span>] <span class="keyword">static</span> 타입 메소드명(매개변수,...)&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>원래 java의 interface의 메소드는 기본적으로 public 접근 제한을 갖고, 인터페이스를 구현하는 클래스는 public 보다 낮은 접근 제한으로 작성할수 없다.</strong><br>따라서 당연한 소리일 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestIn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> String <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"디폴트 메소드"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fn2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"정적 메소드"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fn3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 직접 타이핑으로 public default 메소드를 인터페이스에 선언할 수도 있다.</p><p><strong>여기가 내가 햇갈린 부분인데, java의 접근제어자 default와 java8의 interface내부에 선언된 default 메소드이다.</strong><br>나는 위 코드를 보고, fn1메소드는 public 접근제어자와 default 접근제어자를 중복으로 갖는것인가? 라고 착각했다.</p><p>아이고 copy &amp; paste만 하다보니, 확실히 감이 떨어졌다.</p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul><li><p>interface에 선언된 default라는 키워드는 접근제어자가 아니고, default method를 선언하기 위한 키워드이다.</p></li><li><p>그리고 default 접근제어자는 사실 default 키워드로 명시하지 않으며, 또한 어떠한 접근제어자 키워드도 사용하지 않는다.</p></li></ul><p><strong>default 접근제어 클래스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"메소드"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//디폴트 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>클래스의 default 필드</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//디폴트 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//디폴트 접근제어 멤버변수</span></span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//디폴트 접근제어 메소드</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>아이고, 아는것보다 모르는게 점점 많아지는 것은 기분탓이겠지.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> interface </tag>
            
            <tag> default </tag>
            
            <tag> public </tag>
            
            <tag> default_method </tag>
            
            <tag> public_default </tag>
            
            <tag> 접근제어자 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery noConflict</title>
      <link href="/2018/12/02/jquery-20181202-jquery-noConflict/"/>
      <url>/2018/12/02/jquery-20181202-jquery-noConflict/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>인터넷에서 MIT 라이센스의 bootstrap 테마를 조물락 거리는 중.</p><p>Jquery의 $ 별칭이 동작을 안하는 경우가 있었다.</p><p>찾아보니 Jquery의 noConflict라는 기능이었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.noConflict();</span><br><span class="line"></span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bootstrap 테마의 main.js를 보니 위처럼 전역에 $.noConflict 라는 것이 호출되어 있었고, jquery를 사용할 때 별칭 대신 JQuery키워드로 되어 있었다.</p><h1 id="Jquery의-noConflcit"><a href="#Jquery의-noConflcit" class="headerlink" title="Jquery의 noConflcit"></a>Jquery의 noConflcit</h1><p>Jquery 라이브러리를 포함해서 다른 자바스크립트 라이브러리에서도 $라는 특수문자를 함수 또는 변수명으로 사용한다.<br>Jquery에서 $ 특수문자는 JQuery의 별칭으로, 별다른 기능이 없다.<br>따라서 Jquery와 다른 기타 javascript 라이브러리를 사용할 경우, $ 특수문자의 충돌을 대비해서 Jquery에서 $ 특수문자 사용권한을 다른 라이브러리에 위힘하는 것이<br>$.noConflcit 이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"other_lib.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$.noConflict();</span></span><br><span class="line"><span class="javascript">jQuery( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Code that uses jQuery's $ can follow here.</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">// Code that uses other library's $ can follow here.</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 처럼 Jquery와 다른 javascript를 동시에 사용할 경우, 만약 other_lib.js가 $ 특수문자를 내부적으로 사용할 경우, Jquery에서 $사용 권한을 포기할 필요가 있다.<br>위 처럼 전역 스코프에서 $.noConflict 메소드를 호출하여 권한을 포기하면 other_lib.js에서 $ 특수문자를 사용할 수 있다.<br>다만 위처럼 Jquery.ready 내부에서 $를 사용할수 있기는 하지만, 이 경우 $ 특수문자가 어디 라이브러리에 속해있는지 햇갈릴수 있어서 별로인 방법같다.</p><h1 id="Jquery-두가지-버전을-같이-사용할-경우-noConflict"><a href="#Jquery-두가지-버전을-같이-사용할-경우-noConflict" class="headerlink" title="Jquery 두가지 버전을 같이 사용할 경우 noConflict"></a>Jquery 두가지 버전을 같이 사용할 경우 noConflict</h1><p>이런 상황이 있는지는 모르겠으나, 두가지 버전의 Jquery를 동시에 사용해야 할 경우 noConflict를 통해 Jquery 버전을 구별해서 코딩 할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery.noConflict demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.10.2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Before $.noConflict(true)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.6.2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> $log = $( <span class="string">"#log"</span> );</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">$log.append( <span class="string">"2nd loaded jQuery version ($): "</span> + $.fn.jquery + <span class="string">"&lt;br&gt;"</span> );</span></span><br><span class="line"> </span><br><span class="line"><span class="actionscript"><span class="comment">// Restore globally scoped jQuery variables to the first version loaded</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// (the newer version)</span></span></span><br><span class="line"> </span><br><span class="line"><span class="actionscript">jq162 = jQuery.noConflict( <span class="literal">true</span> );</span></span><br><span class="line"> </span><br><span class="line"><span class="handlebars"><span class="xml">$log.append( "<span class="tag">&lt;<span class="name">h3</span>&gt;</span>After $.noConflict(true)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>" );</span></span></span><br><span class="line"><span class="javascript">$log.append( <span class="string">"1st loaded jQuery version ($): "</span> + $.fn.jquery + <span class="string">"&lt;br&gt;"</span> );</span></span><br><span class="line"><span class="actionscript">$log.append( <span class="string">"2nd loaded jQuery version (jq162): "</span> + jq162.fn.jquery + <span class="string">"&lt;br&gt;"</span> );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 소스를 보면 두개의 Jquery 라이브러리를 동시에 load해서 사용하고 있다.<br>마지막으로 load된 1.6.2 버전의 Jquery가 뒤에 로드가 되었기 때문에 Jquery에 대한 </p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://www.codingfactory.net/10795" target="_blank" rel="external nofollow noopener noreferrer">https://www.codingfactory.net/10795</a><br><a href="https://api.jquery.com/jquery.noconflict/" target="_blank" rel="external nofollow noopener noreferrer">https://api.jquery.com/jquery.noconflict/</a></p><p>많은 자바스크립트 라이브러리들은 사용한다 $ 를 함수 또는 변수명으로, Jquery 에서 하는 것 처럼.<br>Jquery 경우에는, $ 는 Jquery의 별칭일 뿐이다.<br>따라서 모든 기능은 $ 별칭 없이 유효하다.<br>만약 당신이 또다른 자바스크립트 라이브러리 를 사용하길 원한다면 Jquery와 같이,<br>$ 키워드의 사용권한을 다른 라이브러리로 되돌려라. $.noConfilct() 를 호출함으로써<br>Jquery가 초기화 하는 동안 $의 old refereces 들은 저장된다.<br>noconfilct()는 간단히 그것들을 원복 시킨다.</p><p>만약 몇가지 이유 때문에 Jquery  두 버전을 로드했을 경우, 두번째 제이쿼리 버전에서 $.noConflict(true)를 호출하는 것은 return 할 것이다.<br>the globally scoped jQuery variables 를 첫번째 제이쿼리의 버전에게</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java - 정수 오버플로 확인(Check int overflow)</title>
      <link href="/2018/12/02/java-20181202-java-int-add-overflow/"/>
      <url>/2018/12/02/java-20181202-java-int-add-overflow/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>음 Java에서 숫자 연산을 할때 고려해야 해야할 점이 여러개 있다.</p><p>실수 연산의 경우 부동소수점에 의한 정밀도<br>float 타입에 정수를 할당 할 경우 float 타입의 가수범위등…</p><p>하지만 가장 기본이 되는것은 역시 해당 타입이 표현할수 있는 숫자범위를 초과하는 값을 할당 할 경우이다.</p><p>다음 코드는 int 두값을 더할 때, 그 결과가 int 타입에 저장할 때 그 범위가 초가되면 ArithmeticException를 발생시키는 코드이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckOverflowExmaple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"맥스:"</span> + Integer.MAX_VALUE);</span><br><span class="line">System.out.println(<span class="string">"민:"</span> + Integer.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = safeAdd(<span class="number">2000000000</span>, -<span class="number">2000000000</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">safeAdd</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( right&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt; (Integer.MAX_VALUE - right)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"오버플로어 발생2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt;(Integer.MIN_VALUE - right)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"오버플로어 발생2"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> overflow </tag>
            
            <tag> code </tag>
            
            <tag> int </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 싱글톤(singleton) 클래스</title>
      <link href="/2018/12/02/java-20181202-java-singleton/"/>
      <url>/2018/12/02/java-20181202-java-singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>java에서 싱글톤 객체를 생성하는 클래스 예제이다.</p><p>핵심은 클래스의 생성자를 private로 설정하여, 외부에서 생성자 호출을 막고 static를 이용하는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Test t1 = Test.getInstance(); </span><br><span class="line"></span><br><span class="line">t1.doSomething();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//싱글톤으로 설계된 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Test singleton = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Test.singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//생성자를 private로 가려 외부로부 호추을 막는다.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"나는 싱글톤 클래스 TEST이다."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 싱글톤 </tag>
            
            <tag> singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql workbench 쿼리 결과창(result grid) 보이게 하기(Windows)</title>
      <link href="/2018/12/02/mysql-20181202-mysql-workbench-bug-not-showing-result-grid/"/>
      <url>/2018/12/02/mysql-20181202-mysql-workbench-bug-not-showing-result-grid/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Mysql의 무료 DB관리툴로 Mysql Workbencn라는 것이 있다.<br>공짜! 공짜! 공짜! 툴이라 굉장히 호감이 가는 툴이다.<br>하지만 8버전 이후 버그가 많아진 듯 하다.</p><p>내 경우에는 쿼리의 결과칭이 보이지 않았다.</p><p><img src="/images/20181202-mysql-workbench-bug-not-showing-result-grid_1.png" alt="이렇게 쿼리를 실행한 결과가 보이는 result grid가 나오지 않는 경우가 있다."></p><p>구글링을 해보니 Mysql workbench 8.0.11 버전 이후로 Mac OS에서 위와 같은 문제가 자주 발생한다고 한다.</p><p>그런데… 난 Windows인데 쿼리의 결과창이 안보인다.</p><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p>일단 workbench를 리스타트 한다.</p><p><img src="/images/20181202-mysql-workbench-bug-not-showing-result-grid_2.png" alt="번개와 돋보기 모양 아이콘을 클릭한다."></p><p>위 아이콘을 클릭하면 아래처럼 바로 grid result창이 나온다.</p><p><img src="/images/20181202-mysql-workbench-bug-not-showing-result-grid_3.png" alt="result gird를 선택하자."></p><p>별 내용은 없다.</p><p>하지만 workbench에서 버그가 발생한 상태에서 workbench 리스타트를 하지 않고 result grid창을 다시 열어도, 막상 쿼리를 실행시키면 result grid가 사라진다.</p><p>반드시 workbench 재시작 이후에 result grid를 열어주자.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://stackoverflow.com/questions/28038580/how-to-hide-view-result-grid-in-mysql-workbench" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/28038580/how-to-hide-view-result-grid-in-mysql-workbench</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> workbench </tag>
            
            <tag> result </tag>
            
            <tag> grid </tag>
            
            <tag> 결과창 </tag>
            
            <tag> 쿼리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node Express에 handlebars 템플릿엔진 적용하기(레이아웃적용)</title>
      <link href="/2018/11/28/node-20181128-node-express-handlerbars/"/>
      <url>/2018/11/28/node-20181128-node-express-handlerbars/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Node Express환경에서 Pug와 EJS템플릿 엔진을 많이 사용하는 듯 하다.<br>내가 보고 있는 책에서도 Pug위주의 예제로 진행이 되었다.</p><p>하지만 막상 Express예제 프로젝트를 만들어 써보니 Pug이녀석 여간 까다로운 것이 아니다.<br>익숙해 진다면 굉장히 쉽게 태그를 작성할수는 있지만, 문제는 HTML문법을 너무 회손한다는 것이다.</p><p>즉, 인터넷에서 쉽게 구할수 있는 bootstrap 템플릿 같은것을 적용하기가 어렵다는 소리이다.<br>차선책으로 EJS를 써볼까 했으나, 이것도 영 HTML 친화적이지 못한것 같았다. 더군다나 jsp 스크립틀릿 같아서…</p><p>구글링을 해보니 handlebars라는 템플릿을 찾게 되었다.<br>얼마전에 Spring 웹프로젝트 예제를 만들때 thymeleaf와 고민했던 그 템플릿 엔진을 Node에서도 사용할수 있었다.</p><p>handlebars는 다른 템플릿 엔진에 비해 상대적으로 HTML을 거의 회손하지 않았고, 서버사이드뿐만 아니라 클라이언트 사이드에서도 단독으로 동작할수 있는 장점이 있다.</p><p><a href="https://www.slant.co/versus/181/184/~handlebars-js_vs_ejs" target="_blank" rel="external nofollow noopener noreferrer">https://www.slant.co/versus/181/184/~handlebars-js_vs_ejs</a><br>위 사이트에서 Handlebars.js와 EJS를 비교하는 설문을 했는데 Handlebars가 더 많은 지지를 받고 있다.</p><p>이 글은 내가 예제로 Express 프로젝트에 Handlebars 템플릿 엔진을 적용하는 글이다.<br>Handlerbars 템플릿 적용 말고도, mysql 시퀄라이저등 다른 설정도 포함한 글이다.</p><p>참고로 Node에서 express-handlebars라는 모듈을 사용한다.</p><h1 id="기초-Express-프로젝트-생성-수동생성"><a href="#기초-Express-프로젝트-생성-수동생성" class="headerlink" title="기초 Express 프로젝트 생성(수동생성)"></a>기초 Express 프로젝트 생성(수동생성)</h1><p>참고로 책을 보고 따라한 예제이며, Express cli를 사용하지 않고 수동으로 프로젝트를 생성했다.(템플릿 엔진을 선택하기 싫어서…)<br>개개인 입맛에 맞게 Express 프로젝트를 생성해도 된다.</p><p>프로젝트 폴더로 backend라는 폴더를 만들고, 다음 명령어로 node 프로젝트 생성</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>생성된 package.json를 아래처럼 수정</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"backend"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"bnad_of_coder express backend"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"nodemon app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"hanumoka"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysqlDB와-sequleize를-사용하기-위해-모듈-설치"><a href="#mysqlDB와-sequleize를-사용하기-위해-모듈-설치" class="headerlink" title="mysqlDB와 sequleize를 사용하기 위해 모듈 설치"></a>mysqlDB와 sequleize를 사용하기 위해 모듈 설치</h2><p>handlebars를 적용하는데 필요없다면 넘어가자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g sequelize-cli</span><br><span class="line">npm i sequelize mysql2</span><br><span class="line">sequelize init</span><br></pre></td></tr></table></figure><p>시퀄라이저 기본폴더 4개 생성됨 config, migrations, models, seeders</p><p>수동으로 views, routers, public, passport를 만들어준다.</p><h2 id="backend-폴더에-app-js-파일을-생성한다"><a href="#backend-폴더에-app-js-파일을-생성한다" class="headerlink" title="backend 폴더에 app.js 파일을 생성한다."></a>backend 폴더에 app.js 파일을 생성한다.</h2><p>app.js파일은 pakcage.json에서 설정한대로 Express의 엔트리 파일이 된다.</p><h2 id="Express와-그-관련-모듈과-express-handlebars를-설치한다"><a href="#Express와-그-관련-모듈과-express-handlebars를-설치한다" class="headerlink" title="Express와 그 관련 모듈과, express-handlebars를 설치한다."></a>Express와 그 관련 모듈과, express-handlebars를 설치한다.</h2><p>기타 모듈들을 추가한다. 템플릿 엔진은 handlebars를 사용한다.<br><strong>express-handlebars</strong>라는 모듈을 설치해야 한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br><span class="line">npm i cookie-parser</span><br><span class="line">npm i express-session</span><br><span class="line">npm i morgan</span><br><span class="line">npm i connect-flash</span><br><span class="line">npm i express-handlebars</span><br><span class="line">npm i -g nodemon</span><br><span class="line">npm i -D nodemon</span><br></pre></td></tr></table></figure><p>nodemon모듈은 서버 코드에 수정이 발생하면 자동으로 재시작 해준다.<br>실행되는 콘솔에서 rs를 입력해서 수동으로 재시작 할 수 있다.<br>nodemon은 개발용(배포용 아님)이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i dotenv</span><br></pre></td></tr></table></figure><p>dotenv 모듈을 추가 설치하고, backend 폴더에 .env 파일을 만들고 아래 내용을 채운다.<br>이 것은 서버에서 쿠키, 세션용 비밀키 관리용이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COOKIE_SECRET&#x3D;hanumokasecret</span><br></pre></td></tr></table></figure><h2 id="app-js-파일을-아래처럼-수정"><a href="#app-js-파일을-아래처럼-수정" class="headerlink" title="app.js 파일을 아래처럼 수정"></a>app.js 파일을 아래처럼 수정</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> hbs = <span class="built_in">require</span>(<span class="string">'express-handlebars'</span>);   <span class="comment">// handlebars 템플릿 엔진</span></span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">const</span> flash = <span class="built_in">require</span>(<span class="string">'connect-flash'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config();  <span class="comment">// 비밀키 관리</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//TEST</span></span><br><span class="line"><span class="keyword">const</span> userTestRouter = <span class="built_in">require</span>(<span class="string">'./routes/test/user_test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//** handlebars 핵심 설정 시작 **//</span></span><br><span class="line">app.engine( <span class="string">'hbs'</span>, hbs( &#123;</span><br><span class="line">  extname: <span class="string">'hbs'</span>,</span><br><span class="line">  defaultLayout: <span class="string">'main'</span>,    <span class="comment">// 기본 레이아웃 파일 main.hbs 지정, 요청에 따라 레이아웃을 변경할수 있다.</span></span><br><span class="line">  layoutsDir: __dirname + <span class="string">'/views/layouts/'</span>,  <span class="comment">// 헨들바템플릿의 레이아웃 파일의 위치</span></span><br><span class="line">  partialsDir: __dirname + <span class="string">'/views/partials/'</span> <span class="comment">// 파티셜이란: 레이아웃을 채울 header.hbs, left.hbs, footer.hbs 파일의 위치</span></span><br><span class="line">&#125; ) );</span><br><span class="line"></span><br><span class="line">app.set( <span class="string">'view engine'</span>, <span class="string">'hbs'</span> ); <span class="comment">// handlebars파일의 확장자를 hbs로 사용.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//** handlebars 핵심 설정 끝 **//</span></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">8001</span>);</span><br><span class="line"></span><br><span class="line">app.use(morgan(<span class="string">'dev'</span>));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser(process.env.COOKIE_SECRET));</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  secret: process.env.COOKIE_SECRET,</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    httpOnly: <span class="literal">true</span>,</span><br><span class="line">    secure: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br><span class="line">app.use(flash());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TEST ROUTER</span></span><br><span class="line">app.use(<span class="string">'/test'</span>, userTestRouter);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">  err.status = <span class="number">404</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(app.get(<span class="string">'port'</span>), <span class="string">'번 포트에서 대기중'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Handlerbars관련-디렉토리와-파일들"><a href="#Handlerbars관련-디렉토리와-파일들" class="headerlink" title="Handlerbars관련 디렉토리와 파일들"></a>Handlerbars관련 디렉토리와 파일들</h1><p>위의 app.js에서 Handlebars의 핵심 소스를 추리면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hbs = <span class="built_in">require</span>(<span class="string">'express-handlebars'</span>);</span><br><span class="line"></span><br><span class="line">app.engine( <span class="string">'hbs'</span>, hbs( &#123;</span><br><span class="line">  extname: <span class="string">'hbs'</span>,</span><br><span class="line">  defaultLayout: <span class="string">'main'</span>,</span><br><span class="line">  layoutsDir: __dirname + <span class="string">'/views/layouts/'</span>,</span><br><span class="line">  partialsDir: __dirname + <span class="string">'/views/partials/'</span></span><br><span class="line">&#125; ) );</span><br><span class="line"></span><br><span class="line">app.set( <span class="string">'view engine'</span>, <span class="string">'hbs'</span> );</span><br></pre></td></tr></table></figure><p>그리고 주요 파일들은 아래와 같다.<br>파일들을 생성해주자.</p><p>디폴트 레이아웃 : views/layouts/main.hbs<br>레이아웃에 사용할 header : views/partials/header.hbs<br>레이아웃에서 사용할 footer : views/partials/footer.hbs<br>레이아웃에서 사용할 leaf : views/partials/left.hbs<br>인덱스 페이지 : views/index.hbs</p><p><img src="/images/20181128-node-express-handlebars_2.png" alt="내 폴더구조"></p><p><img src="/images/20181128-node-express-handlebars_1.png" alt="예상하는 레이아웃 구조"></p><p>중요한 것은 레이아웃을 담당하는 main.hbs일 것이다.</p><p>아래는 main.hbs 이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  &#123;&#123;&gt; header &#125;&#125;</span><br><span class="line">  &#123;&#123;&gt; left &#125;&#125;</span><br><span class="line">  ...</span><br><span class="line">  &#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class="line">  ...</span><br><span class="line">  &#123;&#123;&gt; footer &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>body와 나머지의 무스타치 표현이 살작 다른것을 확인 할 수 있다. body는 라우터에서 바꿔줄 페이지의 컨텐츠가 된다.</p><p>나머지 header.hbs, footer.hbs, left.hbs와 index.hbs에는 대충 구별할수 있게 텍스트를 쳐주자.</p><p>예를 들어 header.hbs에는 아래처럼</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>헤더 입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 app.js에 기본 인덱스 라우터가 설정되어 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>서버를 npm start로 실행하고 <em><a href="http://localhost:8001" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8001</a></em> 로 접근하면, 레이아웃이 적용된 index.hbs 파일이 보이는 것을 확인 할 수 있다.</p><p><a href="http://avilos.codes/server/nodejs/node-js-express-and-handlebars/" target="_blank" rel="external nofollow noopener noreferrer">http://avilos.codes/server/nodejs/node-js-express-and-handlebars/</a> 이 글을 보면, 라우팅 할때 레이아웃을 변경할수도 있다.</p><p>나는 부트스트랩4 템플릿 <a href="https://github.com/puikinsh/ElaAdmin를" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/puikinsh/ElaAdmin를</a> 적용하여 다음과 같이 화면이 나온다.</p><p><img src="/images/20181128-node-express-handlebars_3.png" alt="index.hbs"></p><p>그리고 body페이지를 하나 추가하고 아래처럼, body가 바뀌는 것을 확인 할 수 있다.</p><p><img src="/images/20181128-node-express-handlebars_4.png" alt="test.hbs"></p><p>예제끝!!!</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="http://avilos.codes/server/nodejs/node-js-express-and-handlebars/" target="_blank" rel="external nofollow noopener noreferrer">http://avilos.codes/server/nodejs/node-js-express-and-handlebars/</a></p><p><a href="https://stackoverflow.com/questions/16385173/node-js-express-handlebars-js-partial-views" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/16385173/node-js-express-handlebars-js-partial-views</a></p><p><a href="https://github.com/ericf/express-handlebars" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/ericf/express-handlebars</a></p><p>핸들바 문법<br><a href="https://programmingsummaries.tistory.com/381" target="_blank" rel="external nofollow noopener noreferrer">https://programmingsummaries.tistory.com/381</a></p><p>부트스트렙4 어드민 테마<br><a href="https://github.com/puikinsh/ElaAdmin" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/puikinsh/ElaAdmin</a></p><h1 id="기타-Express-favicon-처리-위-예제와-상관-없음"><a href="#기타-Express-favicon-처리-위-예제와-상관-없음" class="headerlink" title="기타. Express favicon 처리(위 예제와 상관 없음)"></a>기타. Express favicon 처리(위 예제와 상관 없음)</h1><p>파비콘이 없어서 404 뜨는 경우.<br><a href="https://www.npmjs.com/package/serve-favicon" target="_blank" rel="external nofollow noopener noreferrer">https://www.npmjs.com/package/serve-favicon</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install serve-favicon</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(favicon(path.join(__dirname, <span class="string">'public'</span>, <span class="string">'favicon.ico'</span>)))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Add your routes here, etc.</span></span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
            <tag> handlebars </tag>
            
            <tag> template </tag>
            
            <tag> 템플릿 </tag>
            
            <tag> 템플릿엔진 </tag>
            
            <tag> 핸들바 </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java - 함수형 인터페이스 API(람다의 활용1)</title>
      <link href="/2018/11/24/java-20181124-java-lambda2/"/>
      <url>/2018/11/24/java-20181124-java-lambda2/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>자바의 람다는 자바언어에서 쉽고 간편하게 함수를 선언해서 사용하기위한 수단이다.<br>하지만 자바는 객체 지향언어이고 기본적인 프로그래밍의 단위는 Class이다.</p><p>자바에서 구현하는 함수는 이 class의 범위를 벗어 날수가 없다.<br>함수적 인터페이스(추상클래스가 하나뿐인 인터페이스)를 구현하여 함수를 생성하고 사용하는 매커니즘을 통해서 함수형 프로그래밍을 지원하며, 람다식은 이것에 특화된 문법일 뿐이다.<br>실질적으로 함수 한개를 생성해서 사용하는 것 뿐이지만, 결과적으로는 함수적 인터페이스를 즉흥적으로 구현한 익명객체의 메소드를 사용하게 되는 것이다.</p><p>여기서 고민해볼게 생긴다.<br>재사용이 필요없고, 즉흥적으로 함수를 구현하기 위해서 익명객체를 생성하는것 까지는 넘어간다 하더라도, 일일이 구현해야 할 함수적 인터페이스를 만들어 줘야 하나?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logString</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">  System.out.println(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logInt</span><span class="params">(Int value)</span></span>&#123;</span><br><span class="line">  System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 위 처럼 인자만 다르고 하는 일은 똑같은 함수를 구현하기위해 인터페이스를 두개나 만들어야 하는 것인가?<br>위와 같은 고민은 전혀 할 필요가 없다.<br>정답은 java.util.function 표준 API 패키지에 있다.<br>Java8에서는 기능적으로 분류된 자주 사용햘 만한 함수형 인터페이스를 API로 제공하고 있기때문에, 그냥 해당 API의 인터페이스를 입맛에 맞게 구현해서 사용하면 된다.</p><h1 id="기본으로-제공되는-함수적-인터페이스의-종류"><a href="#기본으로-제공되는-함수적-인터페이스의-종류" class="headerlink" title="기본으로 제공되는 함수적 인터페이스의 종류"></a>기본으로 제공되는 함수적 인터페이스의 종류</h1><table><thead><tr><th>종류</th><th>추상 메소드 특징</th><th>비고</th></tr></thead><tbody><tr><td>Consumer</td><td>매개값은 있고, 리턴값은 없음</td><td></td></tr><tr><td>Supplier</td><td>매개값은 없고, 리턴값은 있음</td><td></td></tr><tr><td>Function</td><td>매개값도 있고, 리턴값도 있음</td><td>주로 매개값을 연산하고 결과를 리턴</td></tr><tr><td>Operator</td><td>매개값도 있고, 리턴값도 있음</td><td>주로 매개값을 연산하고 결과를 리턴</td></tr><tr><td>Predicate</td><td>매개값은 있고, 리턴 값은 boolean</td><td>매개값을 조사하고 true/false를 리턴</td></tr></tbody></table><p>java.util.function에서 제공하는 인터페이스들은 위의 메소드 특징에 따라서 5형태의 카테고리로 나뉜다.<br>추상 메소드의 특징으로 인터페이스를 고른 뒤, 전달한 인자의 종류에 따라서 구체적인 인터페이스를 골라 사용하면 된다.</p><p>java.util.function 오라클 DOC<br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external nofollow noopener noreferrer">https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html</a></p><p>Doc문서에서 카테고리별로 정렬을 안해줘서, 보기가 좀 불편한데 인터페이스와 그 추상메소드는 굉장히 직관적이라 알기만 한다면 쉽게 사용할수 있다.</p><h2 id="Cunsunmer"><a href="#Cunsunmer" class="headerlink" title="Cunsunmer"></a>Cunsunmer</h2><p>인자를 받고 메소드에서 리턴없이 소모시킨다.<br>인자만 다를 뿐 추상 메소드명은 전부 accept인 것이 특징이다.</p><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>Consumer<t></t></td><td>void accept(T t)</td><td>객체 T를 받아 소비</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>void accept(T t, U u)</td><td>객체 T와 U를 받아 소비</td></tr><tr><td>DoubleConsumer</td><td>void accept(double value)</td><td>double 값을 받아 소비</td></tr><tr><td>intConsumer</td><td>void accept(int value)</td><td>int 값을 받아 소비</td></tr><tr><td>LongConsumer</td><td>void accept(long value)</td><td>long 값을 받아 소비</td></tr><tr><td>ObjDoubleConsumer<t></t></td><td>void accept(T t, double value)</td><td>객체 T와 double 값을 소비</td></tr><tr><td>ObjIntConsumer<t></t></td><td>void accept(T t, int value)</td><td>객체 T와 int 값을 받아 소비</td></tr><tr><td>ObjLongConsumer<t></t></td><td>void accept(T t, long value)</td><td>객체 T와 long 값을 받아 소비</td></tr></tbody></table><p>아래처럼 간단히 값을 출력하는 함수를 만들때 사용할 수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CunsummerExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; c1 = t -&gt;  System.out.println(t);</span><br><span class="line"></span><br><span class="line">c1.accept(<span class="string">"Consumer를 이용해서 로그를 찍어 봅시다."</span>);</span><br><span class="line"></span><br><span class="line">BiConsumer&lt;String, String&gt; c2 = (t, u) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">String result = <span class="string">"Log:"</span> + t + u;</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">c2.accept(<span class="string">"헛둘헛둘"</span>, <span class="string">"셋둘셋둘"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p>인자가 없으며 리턴값이 존재 한다.<br>리턴하는 값의 타입에 따라 getXXX형태의 추상메소드를 갖는 것이 특징이다.</p><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>Supplier<t></t></td><td>T get()</td><td>T 객체를 리턴</td></tr><tr><td>BooleanSupplier</td><td>boolean getAsBoolean()</td><td>boolean 값을 리턴</td></tr><tr><td>DoubleSupplier</td><td>double getAsDouble()</td><td>double 값을 리턴</td></tr><tr><td>intSupplier</td><td>int getAsint()</td><td>int 값을 리턴</td></tr><tr><td>LongSupplier</td><td>long getAsLong()</td><td>long 값일 리턴</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.IntSupplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">IntSupplier myAge = () -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">32</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"내 나이:"</span> + myAge.getAsInt());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>이 인터페이스의 용도는 인자의 타입을 변형하여 새로운 타입으로 값을 리턴하는 것이다.<br>즉 일종의 형변환 전용 함수형 인터페이스가 되겠다.<br><strong>매개인자 타입과 리턴값의 타입이 다르다.</strong></p><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>Function&lt;T, R&gt;</td><td>R apply(T t)</td><td>객체 T를 객체 R로 매핑</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td>R apply(T t, U u)</td><td>객체 T와 U를 객체 R로 매핑</td></tr><tr><td>DoubleFunction<r></r></td><td>R apply(double value)</td><td>double을 객체 R로 매핑</td></tr><tr><td>intFunction<r></r></td><td>R apply(int value)</td><td>int를 객체 R로 매핑</td></tr><tr><td>intToDoubleFunction</td><td>double applyAsDouble(int value)</td><td>int를 double로 매핑</td></tr><tr><td>intToLongFunction</td><td>long applyAsLong(int value)</td><td>int를 long로 매핑</td></tr><tr><td>LongToDoubleFunction</td><td>double applyAsDouble(long value)</td><td>long을 doube로 매핑</td></tr><tr><td>LongToIntFunction</td><td>int applyAsInt(long value)</td><td>long을 int로 매핑</td></tr><tr><td>ToDoubleBiFunction&lt;T,U&gt;</td><td>double applyAsDouble(T t, U u)</td><td>객체 T와 U를 double로 매핑</td></tr><tr><td>ToDoubleFunction<t></t></td><td>double applyAsDouble(T value)</td><td>객체 T를 double로 매핑</td></tr><tr><td>ToIntBiFunction&lt;T,U&gt;</td><td>int applyAsInt(T t, U u)</td><td>객체 T와 U를 int로 매핑</td></tr><tr><td>ToIntFunction<t></t></td><td>int applyAsInt(T value)</td><td>객체 T를 int로 매핑</td></tr><tr><td>ToLongBiFunction&lt;T,U&gt;</td><td>long applyAsLong(T t, u)</td><td>객체 T와 U를 long으로 매핑</td></tr><tr><td>ToLongFunction<t></t></td><td>long applyAsLong(T value)</td><td>객체 T를 long으로 매핑</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Function&lt;Human, String&gt; f1 = t -&gt; t.name;</span><br><span class="line">System.out.println(f1.apply(<span class="keyword">new</span> Human()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">public</span> String name = <span class="string">"hanumoka"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><p>Function과 동일한 형태의 applyXXX라는 메소드를 가지고 있다.<br>하지만 매개값의 타입변환의 역활보다 <strong>매개값을 이용하여 연산을 수생한 후 동일한 타입으로 리턴값</strong>을 제공하는 역할을 한다.<br><strong>매개인자의 타입과 리턴값의 타입이 동일</strong></p><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>BinaryOperator<t></t></td><td>T apply(T t1, T t2)</td><td>동일한 타입의 t1, t2를 연산후 T를 리턴</td></tr><tr><td>UnaryOperator<t></t></td><td>T apply(T)</td><td>T를 연산한 후 T를 리턴</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java_lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operator1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Integer&gt; b1 = (t, u) -&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> (t * u);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(b1.apply(<span class="number">3</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">UnaryOperator&lt;Integer&gt; u1 = (t)-&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> t + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>DoubleBinaryOperator</td><td>double applyAsDouble(double, double)</td><td>두개의 double 연산 후 double 리턴</td></tr><tr><td>DoubleUnaryOperator</td><td>double applyAsDouble(double)</td><td>한 개의 double 연산후 double리턴</td></tr><tr><td>intBinaryOperator</td><td>int applyAsInt(int, int)</td><td>두 개의 int 연산후 int 리턴</td></tr><tr><td>intUnaryOperator</td><td>int applyAsInt(int)</td><td>한개의 int연산후 int리턴</td></tr><tr><td>LongBinaryOperator</td><td>long applyAsLong(long, long)</td><td>두개의 long 연산후 long 리턴</td></tr><tr><td>LongUnaryOperator</td><td>long applyAsLong(long)</td><td>한 개의 long 연산후 long리턴</td></tr></tbody></table><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p>Prediacate는 매개 값을 이용하여 true, false를 리턴한다.</p><table><thead><tr><th>인터페이스명</th><th>추상 메소드</th><th>설명</th></tr></thead><tbody><tr><td>Predicate<t></t></td><td>boolean test(T t)</td><td>객체 T를 통해 boolean리턴</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>boolean test(T t, U u)</td><td>객체 T와 U를 통해 통해 boolean리턴</td></tr><tr><td>DoublePredicate</td><td>boolean test(double value)</td><td>double 값을 통해 boolean리턴</td></tr><tr><td>intPredicate</td><td>boolean test(int value)</td><td>int값을 통해 boolean 리턴</td></tr><tr><td>LongPredicate</td><td>boolean test(long value)</td><td>long값을 통해 booean 리턴</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> 람다 </tag>
            
            <tag> Lamdba </tag>
            
            <tag> Consumer </tag>
            
            <tag> Supplier </tag>
            
            <tag> Function </tag>
            
            <tag> Operator </tag>
            
            <tag> Predicate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node Express에 sequelize를 이용해 mysql접속하기</title>
      <link href="/2018/11/23/node-20181123-express-setting-sequelize/"/>
      <url>/2018/11/23/node-20181123-express-setting-sequelize/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Express 프로젝트에 sequelize(시퀄라이저)를 이용하여 로컬에 있는 mysql에 접속하는 예제를 정리해본다.</p><p>미리 로컬에 mysql을 설치하고, 스키마와 계정을 생성 해놨다.</p><h1 id="테스트용-Express-프로젝트-생성하기"><a href="#테스트용-Express-프로젝트-생성하기" class="headerlink" title="테스트용 Express 프로젝트 생성하기"></a>테스트용 Express 프로젝트 생성하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express backend --view=pug</span><br></pre></td></tr></table></figure><p>위 명령어로 express 프로젝트를 생성한다.</p><h1 id="시퀄라이저-sequelize-란"><a href="#시퀄라이저-sequelize-란" class="headerlink" title="시퀄라이저(sequelize)란"></a>시퀄라이저(sequelize)란</h1><p>promise기반 Node.js환경의 ORM(Object-relational Mapping)이다.</p><p>이것을 통해 Exrpess와 MariaDB, PostgreSQL, SQLite, MSSQL등과 연동이 가능하다.</p><p>내가 알고 있던 Mybatis와 같은 ORM과는 약간 DB에 대한 접근방식이 다르다.</p><p>Mybatis같은 경우 sql 쿼리를 xml로 관리하고, 이 파일을 이용하여 DB의 entity와 자바의 객체를 맵핑하는 방법으로 DB에 접근한다.</p><p>Express서버의 시퀄라이저 설정으로 DB의 entity와 entity간의 관계를 javascript로 선언하고, Express에서 시퀄라이저 문법을 통해서 DB에 접근한다.</p><p>Mybatis에 익숙한 나에게는 굉장히 낮선 방식이다.</p><h2 id="시퀄라이저의-특징"><a href="#시퀄라이저의-특징" class="headerlink" title="시퀄라이저의 특징"></a>시퀄라이저의 특징</h2><p>1.DB Entity정의를 시퀄라이저의 model(js파일)로 정의할수 있다.<br>2.DB의 Entity의 관계역시 시퀄라이저에서 정의할수 있다.<br>3.Express에서 시퀄라이저의 Model을 이용하여 DB의 entity에 접근 하여 CRUD등을 할 수 있다.<br>4.Express 서버에서 시퀄라이저에 선언된 Entity정의와 그 관계정의(테이블간 fk등…)을 이용하여 서버에 테이블과 그 관계를 생성할수 있다.</p><p>여기서 애매한 것이 4번인데, 예를들어 Express서버를 실행할때 시퀄라이저에 선언된 DB의 model정보를 통해 DB에 테이블을 생성하고 그 Model간의 관계까지 생성할수 있다.<br>즉 개발자가 DB에 접근하여 DDL을 직접 날려 테이블을 생성하는 것이 아니라, 서버에 DB설계를 시퀄라이저를 통해 하고 서버가 start할때마다 DB에 그 내용을 반영 할수 있는 것이다.</p><p>이것은 어떻게 보면 굉장히 편리한 방법일수도 있지만, 특히 개인프로젝트인 경우에는 더더욱…<br>하지만 팀으로 개발을 하거나, DB설계를 ERD를 이용하여 하는 경우 필요 없는 기능이라 생각된다.</p><h1 id="Express서버에-시퀄라이저-sequelize-연동하기"><a href="#Express서버에-시퀄라이저-sequelize-연동하기" class="headerlink" title="Express서버에 시퀄라이저(sequelize) 연동하기"></a>Express서버에 시퀄라이저(sequelize) 연동하기</h1><p>Express 프로젝트 폴더인 backend폴더에 cmd로 이동하여 아래 명령어로 시퀄라이저를 설치하고 시퀄라이저 초기화 셋팅을 하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i sequelize mysql2</span><br><span class="line">npm i -g sequelize-cli</span><br><span class="line">sequelize init</span><br></pre></td></tr></table></figure><p>현재 나는 Express프로젝트인 backend폴더에서 위 명령어로 필요한 모듈을 설치하고 마지막 sequelize init명령어를 통해서 express 서버에 sequelize환경을 셋팅한다.</p><p>sequelize init명령어를 실행하면 프로젝트 폴더에서 config, models, migrations, seeders 폴더라 생성된다.</p><p><img src="/images/20181123-express-setting-sequelize_1.png" alt="sequelize init 실행결과로 생성된 폴더"></p><p>여기에서 시퀄라이저의 기본적인 동작 과정을 집고 넘어가자.</p><p><img src="/images/20181123-express-setting-sequelize_2.png" alt="Express와 sequelize연동시 동작과정"></p><p>크게 1번과, 2번 루트로 나눌수 있다.</p><p>1번일경우 DB의 스키마 엔티티관리를 고전적인? 방법으로 DB에서 관리 할때</p><p>2번일 경우 DB의 스키마 엔티티관리를 Express서버에서 models폴더에 js파일로 선언한 엔티티(테이블)와 그 관계들(테이블간 1:1, 1:n, n:M관계)를 읽어서 DB 스키마에 적용한다.</p><p>2번일 경우 express서버가 시작될때 추가 옵션을 통해서 DB 스키마를 깨끗이 지우고(테이블과 그 관계등을), 시퀄라이저에서 js파일로 선언된 엔티티로 테이블과 그 관계를 성성할수 있다.</p><p>즉 DB 스키마 관리를 express내부에서 자바스크립트로 관리 할수 있다는 장점이 있다.</p><p>그러나, 난 꼰대라서 DB는 분리해서 entity를 관리하는것아 편하다. </p><p>ERD로 DB를 설계하는 것이 편하기 때문이다.</p><h2 id="1번-방법-시퀄라이저-연동-시퀄라이저에서-DB-Entity를-관리하는-방식"><a href="#1번-방법-시퀄라이저-연동-시퀄라이저에서-DB-Entity를-관리하는-방식" class="headerlink" title="1번 방법 시퀄라이저 연동(시퀄라이저에서 DB Entity를 관리하는 방식)"></a>1번 방법 시퀄라이저 연동(시퀄라이저에서 DB Entity를 관리하는 방식)</h2><p>config/config.json 파일은 시퀄라이저가 DB에 접근하는 정보를 저장한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"hanumoka"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"band_of_coder"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span>,</span><br><span class="line">    <span class="attr">"operatorsAliases"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"test"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"database_test"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"production"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"database_production"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>나는 위처럼 development에 로컬 mysql 정보를 입력했다.<br>이 파일은 접근할 DB 접건정보 뿐만 아니라 define이라는 시퀄라이저 부가옵션을 추가적으로 줄 수도 있다.</p><p>models/index.js 파일을 아래처럼 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV || <span class="string">'development'</span>;</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'config'</span>, <span class="string">'config.json'</span>))[env];</span><br><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, config);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize;</span><br><span class="line"></span><br><span class="line"><span class="comment">//모델정보를 읽어온다.</span></span><br><span class="line">db.User = <span class="built_in">require</span>(<span class="string">'./user'</span>)(sequelize, Sequelize);</span><br><span class="line">db.Comment = <span class="built_in">require</span>(<span class="string">'./comment'</span>)(sequelize, Sequelize);</span><br><span class="line"></span><br><span class="line"><span class="comment">//모델간의 관계를 정의한다.</span></span><br><span class="line">db.User.hasMany(db.Comment, &#123; <span class="attr">foreignKey</span>: <span class="string">'commenter'</span>, <span class="attr">sourceKey</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">db.Comment.belongsTo(db.User, &#123; <span class="attr">foreignKey</span>: <span class="string">'commenter'</span>, <span class="attr">targetKey</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><p>위 모델관계는 user : comment = 1:N 관계정의이다.</p><p>1:1, 1:n, n:m관계등을 정의 가능하며, 이렇게 정의한 것들을 express서버가 동작할때 DB에 DDL로 적용할수 있다.</p><p>자세한 내용은 시퀄라이저 공식문서를 참고하자.</p><p>models/user.js 파일은 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: DataTypes.STRING(<span class="number">20</span>),</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      type: DataTypes.INTEGER.UNSIGNED,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    married: &#123;</span><br><span class="line">      type: DataTypes.BOOLEAN,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    comment: &#123;</span><br><span class="line">      type: DataTypes.TEXT,</span><br><span class="line">      allowNull: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    created_at: &#123;</span><br><span class="line">      type: DataTypes.DATE,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      defaultValue: sequelize.literal(<span class="string">'now()'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>models/comment.js 파일은 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'comment'</span>, &#123;</span><br><span class="line">    comment: &#123;</span><br><span class="line">      type: DataTypes.STRING(<span class="number">100</span>),</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    created_at: &#123;</span><br><span class="line">      type: DataTypes.DATE,</span><br><span class="line">      allowNull: <span class="literal">true</span>,</span><br><span class="line">      defaultValue: sequelize.literal(<span class="string">'now()'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>models/user.js와 models/comment.js는 DB의 엔티티 즉, 테이블을 정의 하는 것이다.</p><p>데이터 타입, key, not null등 다양한 기능들을 시퀄라이저 문법을 통해 정의 해야 한다.<br>ORM을 위해 시퀄라이저에서 엔티티를 정의하는 문법을 새로 배워야 한다는 것은, 좀 문제가 있다고 본다.</p><p>이것은 2번 방법에서 좀더 나은방법으로 해결해보자.</p><p>시퀄라이저의 자세한 문법은 구글에서 공식페이지에서 확인해보길 바란다.</p><p>Express프로젝트의 app.js폴더로 이동해서 시퀄라이저를 등록하자.</p><p>아래 내용을 app.js에 추가하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sequelize = <span class="built_in">require</span>(<span class="string">'./models'</span>).sequelize;   <span class="comment">// mysql 시퀄라이저 모델</span></span><br><span class="line">sequelize.sync();    <span class="comment">//서버가 실행될때 시퀄라이저의 스키마를 DB에 적용시킨다.</span></span><br></pre></td></tr></table></figure><p><img src="/images/20181123-express-setting-sequelize_3.png" alt="app.js에 시퀄라이저 적용"></p><p>위 두줄의 명령으로인해, express 프로젝트가 start될때 시퀄라이저 models/index.js와 models/user.js, models/comment.js를 이용하여 DB 스키마에 테이블과 그 관계를 DDL로 생선한다.</p><p>그럼 한번 express start를 시작해보자.</p><p><img src="/images/20181123-express-setting-sequelize_4.png" alt="깨끗한 DB상황"></p><p>위를 보면 현재 테이블이 하나도 없는 것이 보인다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=backend:* npm start</span><br></pre></td></tr></table></figure><p>위 명령어를 실행하자.</p><p><img src="/images/20181123-express-setting-sequelize_5.png" alt="express 실행결과"></p><p>서버가 실행되면서 Create table등의 로그가 보일것이다. </p><p>sequelize.sync();가 동작하면서 앞서 시퀄라이저로 정의한 것들이 DB에 테이블따위로 생성되는 것이다.</p><p>다시 DB를 확인해보자.</p><p><img src="/images/20181123-express-setting-sequelize_6.png" alt="생성된 테이블 확인"></p><p>위처럼 models폴더에 js파일로 선언한 시퀄라이저 엔티티가 DB에 테이블로 생성된 것을 확인 할 수 있다.</p><p>주의할점은 시퀄라이저가 생성한 table명을 보면 뒤에 s가 붙어있다. 즉 model명의 복수형태로 테이블을 만든다.</p><p>일단 테스트를 위해 user테이블에 더미데이터를 하나 추가하고 pug에서 조회해 보자.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">values</span>(<span class="string">'1'</span>, <span class="string">'hanumoka'</span>, <span class="number">32</span>, <span class="literal">false</span>, <span class="string">'코딩은 재밌어'</span>, <span class="keyword">now</span>());</span><br></pre></td></tr></table></figure><p>/routes/userManager.js 파일을 생성하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">'../../models'</span>).User;</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> User.findAll();  </span><br><span class="line">    res.render(<span class="string">'userManager'</span>, &#123;users&#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">    next(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>require로 models에 접근해 User라는 모델을 가져온다.<br>User의 첫걸자가 대문자인것을 주의하자.<br>시퀄라이저는 promise, async 방식 두가지 방법을 지원하며 위 예제는 ansyc방식의 전체 조회예제이다.</p><p>아래는 userManager.pug 파일이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    meta(charset&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    title 시퀄라이즈 서버</span><br><span class="line">    style.</span><br><span class="line">      table &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      table th, table td &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">      &#125;</span><br><span class="line">  body</span><br><span class="line">    table#user-list</span><br><span class="line">      thead</span><br><span class="line">        tr</span><br><span class="line">          th ID</span><br><span class="line">          th 이름</span><br><span class="line">      tbody</span><br><span class="line">        for user in users</span><br><span class="line">          tr</span><br><span class="line">            td&#x3D; user.id</span><br><span class="line">            td&#x3D; user.name</span><br><span class="line">    br</span><br></pre></td></tr></table></figure><p>express의 app.js에 라우터 routes/userManager.js를 등록하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userManagerRouter = <span class="built_in">require</span>(<span class="string">'./routes/backend_pug/userManager'</span>);</span><br><span class="line">app.use(<span class="string">'/usermanager'</span>, userManagerRouter);</span><br></pre></td></tr></table></figure><p>그리고 서버를 재시작후 url로 접근하면 다음과 같이 조회되는것을 확인 할수 있다.</p><p><img src="/images/20181123-express-setting-sequelize_7.png" alt="생성된 테이블 확인"></p><p>지금까지 간단하게 Express와 시퀄라이저를 연동해서 mysql에 테이블을 조회하는 예제를 진행해 보았다.</p><p>하지만 서버에서 엔티티를 관리하고 생성하는 방법은 개인적으로 불편해서 2번방법을 생각해 보았다.</p><h2 id="2번-방법-진화된-시퀄라이저-연동-DB는-DB에서-따로-관리하는-방식"><a href="#2번-방법-진화된-시퀄라이저-연동-DB는-DB에서-따로-관리하는-방식" class="headerlink" title="2번 방법 진화된 시퀄라이저 연동(DB는 DB에서 따로 관리하는 방식)"></a>2번 방법 진화된 시퀄라이저 연동(DB는 DB에서 따로 관리하는 방식)</h2><p>1번 방법처럼 Expess에서 시퀄라이저를 이용하여 엔티티를 생성하고 그 관계를 만들어서 프로젝트 개발과 DB를 통합으로 개발 관리하는것은 일견 유용해보인다.</p><p>하지만 보편적으로 팀으로 프로젝트를 개발하고, DB는 DBA나 별도 관리자가 따로 관리할 것이다.</p><p>개인적으로 가장큰 문재는 ERD로 DB를 설계하는 것이 편한데, 1번 방법일 경우 ERD를 개발에 쓰기가 어렵다는 것이다.</p><p>그리고 시퀄라이저에서 엔티티를 생성하기 위한 모델정의 문법을 따로 배워야 한다는 것은…. 뭔가 영양가가 없어보이는 공부라고 생각되었다.</p><p>2번 방법으로 연동한 express sequelize연동 환경에서 개발프로세스는 다음과 같다.</p><ol><li>1번 방법에서는 express서버가 실행될 때 sequelize모델을 DB에 생성했지만, 이것을 제거한다. 즉 DB스키마는 Express에서 건드리지 않는다.</li><li>1번 방법에서는 models폴더에 각각 테이블이 될 model들을 js파일로 생성했지만, 거꾸로 DB에서 그정보를 읽어 자동으로 js파일을 생성한다.(sequelize-auto)</li><li>workbench를 이용하여 ERD를 생성하고 DB스키마는 ERD로 생성관리한다.</li><li>테이블명과 필드명은 underscore를 사용한다.</li></ol><p>하나하나 실습으로 해보자.</p><h3 id="workbench로-ERD로-DB-스키마-정의"><a href="#workbench로-ERD로-DB-스키마-정의" class="headerlink" title="workbench로 ERD로 DB 스키마 정의"></a>workbench로 ERD로 DB 스키마 정의</h3><p>일단 기존 테이블을 다 drop 하고 다음처럼 ERD를 간단하게 만들었다.</p><p><img src="/images/20181123-express-setting-sequelize_8.png" alt="예제 ERD"></p><p>workbench로 ERD를 만드는 방법은 구글링을 하길 바란다.</p><p>database-forward to Database를 이용해서 ERD를 이용해 테이블을 생성했다.</p><p><img src="/images/20181123-express-setting-sequelize_9.png" alt="ERD로 생성된 테이블"></p><h3 id="Express가-시작될-때-table생성-못하게-설정"><a href="#Express가-시작될-때-table생성-못하게-설정" class="headerlink" title="Express가 시작될 때 table생성 못하게 설정"></a>Express가 시작될 때 table생성 못하게 설정</h3><p>간단하다.</p><p>Express의 app.js에 위에서 설정한 시퀄라이저 부분을 다 제거하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var sequelize = require('./models').sequelize;   // mysql 시퀄라이저 모델</span></span><br><span class="line"><span class="comment">//sequelize.sync();    //서버가 실행될때 시퀄라이저의 스키마를 DB에 적용시킨다.</span></span><br></pre></td></tr></table></figure><p>난 위처럼 둘다 주석처리 했다.<br>이제 Express가 시작될 때 DB 스키마를 건드리는 걱정을 안해도 된다.</p><h3 id="DB-테이블을-자동으로-models폴더에-js파일로-생성하기"><a href="#DB-테이블을-자동으로-models폴더에-js파일로-생성하기" class="headerlink" title="DB 테이블을 자동으로 models폴더에 js파일로 생성하기."></a>DB 테이블을 자동으로 models폴더에 js파일로 생성하기.</h3><p>sequelize-auto라는 라이브러리를 사용하면 된다.<br><a href="https://github.com/sequelize/sequelize-auto" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/sequelize/sequelize-auto</a></p><p>express 프로젝트에 sequelize-auto를 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sequelize-auto</span><br><span class="line">npm install -g mysql</span><br></pre></td></tr></table></figure><p>그리도 다음과 같은 형태의 명령으로 현재 mysql 로컬 DB의 테이블을 이용하여 시퀄라이저 models폴더에 js들을 자동으로 생성할수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize-auto -o "./models" -d sequelize_auto_test -h localhost -u my_username -p 5432 -x my_password -e postgres</span><br></pre></td></tr></table></figure><p>내 로컬의 경우 다음과 같다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize-auto -o "./models" -d band_of_coder -h localhost -u hanumoka -p 3306 -x password -e mysql</span><br></pre></td></tr></table></figure><p><img src="/images/20181123-express-setting-sequelize_10.png" alt="sequelize-auto 실형결과1"></p><p>models폴더에 index.js파일 하나뿐이 없는 상태에서 위 명령어를 실행 했다.<br>로그에서 무언가 쿼리같은것이 실행되는 것을 확인 할 수 있다.</p><p><img src="/images/20181123-express-setting-sequelize_11.png" alt="sequelize-auto 실형결과2"></p><p>위처럼 자동으로 user.js, user_post.js 파일이 자동으로 models폴더 내부에 생성된 것을 확인 할수 있다.</p><p>DB스키마 관리는 그냥 기존의 SQL, workbench, erd등으로 관리하고 sequelize-auto라이브러리를 이용하여 시퀄라이저의 문법을 공부할 필요가 없어진다.</p><h3 id="sequelize-models-index-js-업그레이드"><a href="#sequelize-models-index-js-업그레이드" class="headerlink" title="sequelize models/index.js 업그레이드"></a>sequelize models/index.js 업그레이드</h3><p>models/index.js 파일은 시퀄라이저 핵심 엔트리 파일이다.</p><p>자동으로 models폴더를 읽어서 js파일을 적재할수 있게 수정하자.</p><p>수정된 models/index.js 파일은 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV || <span class="string">'development'</span>;</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'config'</span>, <span class="string">'config.json'</span>))[env];</span><br><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, config);</span><br><span class="line"></span><br><span class="line">fs</span><br><span class="line">  .readdirSync(__dirname)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (file.indexOf(<span class="string">"."</span>) !== <span class="number">0</span>) &amp;&amp; (file !== <span class="string">"index.js"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = sequelize.import(path.join(__dirname, file));</span><br><span class="line">    db[model.name] = model;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'model.name:'</span> + model.name);  <span class="comment">// 테스트로그 model명..</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(db).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">modelName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"associate"</span> <span class="keyword">in</span> db[modelName]) &#123;</span><br><span class="line">    db[modelName].associate(db);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><h3 id="시퀄라이저-config-config-json-수정"><a href="#시퀄라이저-config-config-json-수정" class="headerlink" title="시퀄라이저 config/config.json 수정"></a>시퀄라이저 config/config.json 수정</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"hanumoka"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"band_of_coder"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span>,</span><br><span class="line">    <span class="attr">"operatorsAliases"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"define"</span>: &#123;</span><br><span class="line">        <span class="attr">"timestamps"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"underscored"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"test"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"database_test"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"production"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"database_production"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>define을 추가했다. timestamps가 true이면 시퀄라이저가 생성하는 DDL, DML에 createAt, updateAt, deleteAt 컬럼들을 자동으로 생성한다.<br>난 필요가 없어 제거했다.</p><p>그리고 테이블명과 컬럼명을 스네이크케이스로 선언하므로 underscored를 true로 선언했다.<br>사실 현재는 필요없는 설정이다. 이 설정은 시퀄라이저가 DB에 DDL을 날릴때 적용되는 옵션같다.<br>DML에서는 필요없는듯…</p><p>/routes/userManager.js 파일을 다음과 같이 조금 수정</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'../../models'</span>).user;</span><br><span class="line"><span class="comment">//var User = require('../../models').User;</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> userModel.findAll();</span><br><span class="line">    res.render(<span class="string">'userManager'</span>, &#123;users&#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">    next(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>model require부분만 조금 수정되었다. 이번에는 user가 모두 소문자인것을 주의하자.</p><p>userManager.pug 아주 조금 수정 id대신 email로 변경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    meta(charset&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    title 시퀄라이즈 서버</span><br><span class="line">    style.</span><br><span class="line">      table &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      table th, table td &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">      &#125;</span><br><span class="line">  body</span><br><span class="line">    table#user-list</span><br><span class="line">      thead</span><br><span class="line">        tr</span><br><span class="line">          th email</span><br><span class="line">          th 이름</span><br><span class="line">      tbody</span><br><span class="line">        for user in users</span><br><span class="line">          tr</span><br><span class="line">            td&#x3D; user.email</span><br><span class="line">            td&#x3D; user.name</span><br><span class="line">    br</span><br></pre></td></tr></table></figure><p>서버를 실행하고 그 결과를 확인해보자.</p><p><img src="/images/20181123-express-setting-sequelize_12.png" alt="2번방법 시퀄라이저연동 최종결과"></p><p>데이터가 없어서 조회결과는 없지만, 정상동작하는 것을 확인 할 수 있다.</p><p>로그에서도 model.name이 잘 나온다.</p><p>그리고 조회 했을때 select 쿼리도 잘 찍히는 것을 확인 할 수 있다.</p><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>대충 시퀄라이저를 내 입맛에 맞게 수정했다.<br>아직 남아있는 것은 2번 시퀄라이저 연동환경에서 테이블관의 관계, 즉 엔티티의 관계도 자동으로 설정되었으면 좋겠는데… 이건 아직 테스트를 안해보았다.</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> 시퀄라이저 </tag>
            
            <tag> sequelize </tag>
            
            <tag> sequelize-auto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 세로선 제거하기(disable wrap-guide)</title>
      <link href="/2018/11/16/atom-20181116-atom-hide-wrap-guide/"/>
      <url>/2018/11/16/atom-20181116-atom-hide-wrap-guide/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#들어가기">들어가기</a></li><li><a href="#세로선-제거하기">세로선 제거하기</a></li><li><a href="#마무리">마무리</a></li><li><a href="#참고-사이트">참고 사이트</a></li></ul><!-- /TOC --><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>atom에디터에서 왜있는지 영문을 모를 세로선의 이름은 wrap-guide라고 한다.</p><p><img src="/images/20181116-atom-hide-wrap-guide_1.png" alt="이렇게 글씨가 wrap-guide에 겹쳐 보인다."></p><p>음 해상도가 높아서 잘 안보이네.</p><p>그렇다면</p><p>atom툴에서 File - Stylesheet눌러 stylee.less 파일을 열어 맨아래에</p><p>다음을 추가하여 더 강력한 세로선을 셋팅할수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">atom-text-editor</span> <span class="selector-class">.wrap-guide</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20181116-atom-hide-wrap-guide_2.png" alt="아 세로선에 뿅간다."></p><p>이 시야를 가리는 wrap-guide가 무슨 용도인지 찾아보니.</p><p>코드가 가로로 너무 길어지는 것을 경계하라는 경계선이라고 한다.</p><p>디폴트로 가로 80 column(패키지에서 변경이 가능해보인다.)되어 있으며, wrap-guide 패키지 github에는 심지어 Don’t corss the line 이라고 적혀있다.</p><p><img src="/images/20181116-atom-hide-wrap-guide_3.png" alt="atom wrap-package 깃허브페이지"></p><p>하지만 구글에서도 보니 많은 사람이 눈에 거슬리는지 불편해 하고 있다. ㅋㅋㅋㅋ</p><h1 id="세로선-제거하기"><a href="#세로선-제거하기" class="headerlink" title="세로선 제거하기"></a>세로선 제거하기</h1><p>atom툴에서 File - Stylesheet눌러 stylee.less 파일에 아래 코드를 추가해서 세로선을 숨기는 방법이 있기도 하지만…</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">atom-text-editor</span><span class="selector-pseudo">::shadow</span> &#123;</span><br><span class="line">    .wrap-guide &#123;</span><br><span class="line">        <span class="selector-tag">visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wrap-guide는 atom 패키지이므로 이 패키지를 꺼버리면 된다.</p><p>atom에서 <strong>Ctrl + ,</strong> 를 눌러 Settings로 이동하여 Packages탭을 선택한 뒤, wrap-guide를 검색하여 disabled하면 된다.</p><p><img src="/images/20181116-atom-hide-wrap-guide_4.png" alt="atom wrap-package 깃허브페이지"></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>응 난 그냥 둘래. 귀가 얇거든… 팔락 팔락</p><h1 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h1><p><a href="https://atom.io/packages/wrap-guide" target="_blank" rel="external nofollow noopener noreferrer">https://atom.io/packages/wrap-guide</a><br><a href="https://discuss.atom.io/t/what-is-this-vertical-line-running-through-my-code/6774/3" target="_blank" rel="external nofollow noopener noreferrer">https://discuss.atom.io/t/what-is-this-vertical-line-running-through-my-code/6774/3</a></p>]]></content>
      
      
      <categories>
          
          <category> atom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> atom </tag>
            
            <tag> wrap-guide </tag>
            
            <tag> 세로선 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 람다식(Lamdba Expressions) 개념정리</title>
      <link href="/2018/11/16/java-20181116-java-lambda/"/>
      <url>/2018/11/16/java-20181116-java-lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="람다식이란"><a href="#람다식이란" class="headerlink" title="람다식이란"></a>람다식이란</h1><p>이 람다식은 수학자 알론조(Alonzo Church)가 발표한 람다 계산법에서 사용된 식으로, 이를 제자 존 매카시(John Macarthy)가 프로그래밍 언어에 도입했다.</p><p>Java8 버전부터 이 림다식(Lamdba Expressions)을 지원하게 되었다.</p><p>람다식은 익명함수(anonymouse function)을 생성하기 위한 식으로 객체 지향 언어보다는 함수 지향 언어에 가깝다.</p><p>람다식의 형태는 매개변수를 가진 코드 블록이지만, 런타임 시에는 익명 구현 객체(추상메소드를 한개 포함한)를 생성한다.</p><p><strong>람다식 -&gt; 매개 변수를 가진 코드 블록 -&gt; 익명 구현 객체</strong></p><p>위 설명처럼 람다식이란 일종의 함수형 프로그래밍에 적합한 문법적 표현방식이다. 그리고 이 람다 문법은 자바 뿐만아니라 스칼라와 같은 다른 언어에서도 지원하고 있다.</p><p>함수형 프로그래밍은 병렬처리와 이벤트 지향 프로그래밍에 적합하며, 딥러닝이나 빅데이터와 더불어 일종의 문법적 트렌드처럼 관심을 받고 있다.</p><p>Java에서도 이런 트렌드를 따라갈 필요를 느낀것 같으며, 람다식은 그 문법적 간결성으로 기존의 자바 문법보다 쉽게 함수를 표현할수 있다.</p><p>그러나 람다 문법은 기존 java 문법과 확연히 다른 형태를 띠고 있기때문에, 기존 java 개발자는 많은 생소함을 느낄 수도 있다.</p><p><strong>람다식은 결국 로컬 익명 구현객체를 생성하게 되지만, 이 람다식의 사용 목적은 인터페이스가 가지고 있는 메소드를 간편하게 즉흥적으로 구현해서 사용하는 것이 목적이다.</strong></p><p>만약 한개의 추상메소드를 갖는 인터페이스가 있을때, 이 추상메소드를 구현해서 사용하기 위해서는 다음과 같은 방법이 있을 것이다.</p><p><strong>1.인터페이스를 직접 클래스로 구현해서 메소드를 호출</strong></p><p><img src="/images/20181116-java-lambda_1.png" alt="인터페이스를 클래스로 구현해서 객체를 생성하여 메소드를 호출"></p><p>인터페이스를 구현한 클래스를 재사용할 수 있는 장점이 있지만, 재사용이 필요하지 않는 메소드를 만들어 사용해야 할때도 있을 것이다.<br>그런 것들을 클래스로 구현하게 된다면 불필요한 class 파일이 늘어만 가게 될 것이다.</p><p><strong>2.인터페이스를 익명구현객체로 구현해서 메소드를 호출</strong></p><p><img src="/images/20181116-java-lambda_2.png" alt="익명구현객체를 이용한 인터페이스 구현"></p><p>위 처럼 익명 구현객체를 사용하게 된다면, 불필요한 클래스파일이 생기는 것도 막을 수 있고 프로그래밍 과정도 1번보다는 간결해진다.</p><p><strong>3.람다식을 이용해 더 간결하게 인터페이스 구현하기</strong></p><p><img src="/images/20181116-java-lambda_3.png" alt="람다식을 이용한 인터페이스 구현"></p><p>2번보다 훨씬더 간결하게 인터페이스를 구현할 수 있다.</p><hr><h1 id="함수적-인터페이스와-람다식-기본-문법"><a href="#함수적-인터페이스와-람다식-기본-문법" class="headerlink" title="함수적 인터페이스와 람다식 기본 문법"></a>함수적 인터페이스와 람다식 기본 문법</h1><p>람다식을 사용하기 위해서는 일단 람다식으로 구현할 인터페이스가 필요하다.</p><p>이 인터페이스에는 조건이 하나있는데 한개의 추상메소드만 가지고 있어야 한다는 것이다.</p><p><img src="/images/20181116-java-lambda_4.png" alt="이렇게 에러가 난다."></p><p>위 예제를 봐서 알겠지만 람다표현식은 인터페이스의 한개의 메소드밖에 구현 할 수 없다.</p><p><strong>그리고 이런 람다식으로 구현할 인터페이스르 미리 함수적 인터페이스(@functionalInterface)라고 부른다.</strong></p><p>즉 함수구현 전용 인터페이스라고 부르는 것이다.</p><p>그리고 @FunctionalInterface 어노테이션으로 이런 함수적 인터페이스를 명시 할수 있다.</p><p>@FunctionalInterface인터페이스가 적용된 인터페이스는 한개의 추상메소드만 선언 할수 있게 된다.</p><p><img src="/images/20181116-java-lambda_5.png" alt="@FunctionalInterface가 선언된 인터페이스에 추상메소드가 1개가 아니면 에러가 발생한다."></p><p>람다식의 기본구조는 다음과 같다. </p><p>소괄호에는 구현한 함수의 인자를 그리고 화살표 다음에 중괄호에는 구현 할 함수 몸체를 넣으주면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(타입 매개변수, ...) -&gt; &#123; 실행문; ... &#125;;</span><br></pre></td></tr></table></figure><p>하지만 함수를 간편하고 쉽게 표현하기 위해서 람다는 많은 생략 기법을 사용한다.</p><ul><li><p>람다식 매개인자의 자료형은 생략가능 하다.</p></li><li><p>람다식의 매개인자가 한개인 경우 매개인자를 감싸는 소괄호를 생락 할 수 있다.</p></li><li><p>람다식의 함수몸체에 실행문이 한개인 경우 함수의 몸체를 감싸는 중괄호를 생략 할 수 있다.</p></li><li><p>람다식의 함수몸체에 실행문이 한개이고, 그 실행문이 return문일 경우 함수의 몸체를 감싸는 중괄호와 return을 생략 할 수 있다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InterfaceA1 a1 = (<span class="keyword">int</span> a) -&gt; &#123; System.out.println(<span class="string">"a:"</span> + a); &#125;;</span><br><span class="line">InterfaceA1 a2 = (a) -&gt; &#123; System.out.println(<span class="string">"a:"</span> + a); &#125;;    <span class="comment">// 매개인자 자료형 생략</span></span><br><span class="line"></span><br><span class="line">InteafeceB1 b1 = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; System.out.println(<span class="string">"a+b:"</span> + (a + b) ); &#125;;</span><br><span class="line">InteafeceB1 b2 = (a, b) -&gt; &#123; System.out.println(<span class="string">"a+b:"</span> + (a + b) ); &#125;;   <span class="comment">// 매개인자 자료형 생략</span></span><br><span class="line"></span><br><span class="line">InterfaceA1 a3 = a -&gt; &#123; System.out.println(<span class="string">"a:"</span> + a); &#125;;    <span class="comment">//매개인자가 하나뿐이라 소괄호 생략</span></span><br><span class="line">InterfaceA1 a4 = a -&gt; System.out.println(<span class="string">"a:"</span> + a);    <span class="comment">//함수의 실행문이 한개라 중괄호를 생략</span></span><br><span class="line"></span><br><span class="line">TestInterface t3 = a -&gt; &#123; <span class="keyword">return</span> <span class="string">"a:"</span> + String.valueOf(a); &#125;;</span><br><span class="line">TestInterface t4 = a -&gt; <span class="string">"a:"</span> + String.valueOf(a);      <span class="comment">// 함수의 실행문이 한개이며, 리턴문만 있을경우 중괄호와 더불어 return문도 생략이 가능하다.</span></span><br><span class="line"></span><br><span class="line">InterfaceA1 a2 = () -&gt; &#123; System.out.println(<span class="string">"인자가 없는 함수 구현"</span>); &#125;;    <span class="comment">// 매개인자 없는 경우에는 빈 소괄호를 사용해야 한다.</span></span><br></pre></td></tr></table></figure><p>이부분에 대해서는 개인적인 약간의 불만이 있다.<br>소괄호, 중갈호, return 문생략 까지는 납득이 되지만 람다식 함수인자의 자료형 생략은 과연 옳은 문법인가 라는 것이다.<br>물론 java의 오버로딩에서 처럼 함수는 함수의 인자의 타입과 그 인자들의 개수로 충분이 구분이 가능하다.</p><p>하지만 그건 컴파일러가 구분하는 것이고, 사람은 쉽게 구분을 할수 있는가?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestInterface t4 = (a, b, c) -&gt; a * b - c;</span><br></pre></td></tr></table></figure><p>위 람다식으로 구현된 함수를 보고 인자 a,b,c가 어떤 타입인지, 그리고 그 리턴 값이 어떤 타입인 <strong>예측</strong> 할 수 있는가?</p><p>코드의 작성자가 아니라면, 저 인터페이스이 몸체를 찾아가서 확인해야 한다.</p><p>만약 문법적으로 인자의 자료형 생략을 하지 않았다면 이런 수고는 없었을 것이다.</p><p>Javascript The Good Parts의 저자 더글라스 클락포드는 개발자의 실수를 야기시키는 문법은 좋은 문법이 아니라고 했다.</p><p>그의 엄격한 jsLint는 너무하다 싶지만, 그의 이런 생각 자체에는 동의한다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>이번 글에서는 간단히 Java8의 람다의 개념과 기초 사용법을 정리했다.</p><p>람다를 아주 후려치자면, Java에서 추상메소드가 하나인 인터페이스(애시당초 기능적으로 단일 함수로 사용할)를 쉽게 구현해서 사용하는 문법 정도라고 봐도 될것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> 람다 </tag>
            
            <tag> Lamdba </tag>
            
            <tag> FunctionalInterface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 개념정리</title>
      <link href="/2018/11/16/docker-20181116-docker-docker-basic/"/>
      <url>/2018/11/16/docker-20181116-docker-docker-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>서버관리나 엔지니어일을 해보지 않았지만, 웹 개발자 입장에서도 이 Docker라는건 상당히 흥미로워 보인다.</p><p>서버 운용에서의 Docker를 제외하더라도, 프로그래밍 개발할때 공용 개발환경과 같은 환경을 구성하기에 아주 요긴하게 사용될수 있을것 같다.</p><p>공부중이라 잘은 모르지만, 조금이라도 공부한 것들을 쉽게 잊지 않기위해 글을 남긴다.</p><h1 id="Docker란"><a href="#Docker란" class="headerlink" title="Docker란"></a>Docker란</h1><p><strong>Docker란 어플리케이션 프로세스를 독립적으로 실행시킬 수 있는 리눅스 컨테이너 환경이다.</strong></p><p><img src="/images/util/docker-logo.jpg" alt="도커로고"></p><p>위 Docker로고에서 저 고래가 Docker = Docker 엔진이고, 고래 등의 컨테이너 하나하나가 하나의 리눅스 컨테이너이다.</p><p>Docker가 무엇인지 대략적인 감을 잡으려면 기존의 가상머신 환경과 도커환경을 비교해 보는것이 가장 빠르다.</p><p><img src="/images/20181116-docker-docker-basic_1.png" alt="가상머신과 도커의 구조비교"></p><p>Docker Engine이 Hypervisor와 Guest OS를 대신한다. 음 아니다. 대신한다고 말하면 안되고 <strong>Hypervisor와 Guest OS가 필요 없게 만들어준다.</strong></p><p>기존의 가상화 환경을 예로들어 호스트 OS로 CentOS, 그 위에 GuestOS로 CentOS, 그리고 이 GuestOS에 Tomcat서버를 설치해서 서비스를 한다고 가정해보자.</p><p>저 중간의 GuestOS가 있음으로 인해서 장점은 GusetOS이미지로 서비스를 관리 하기때문에 HostOS와 독립적으로 이미지를 관리하여, 운영 및 유지보수에 용이하다는 점이다.</p><p>서버의 HostOS를 변경하면 GuestOS이미지를 떠서 백업하고 복구하면 그만인 것이다.</p><p>단점은,Guest OS전체를 가상화 해야 하기때문에 HostOS의 리소스를 GuestOS 가상화 구현에 많이 소모한다는 것이다. 그리고 이미지를 이식하기 위해서는 GuestOS가 포함되어 거대해진 용량의 이미지를 사용하게 된다.</p><p>Docker는 자바의 JVM과 비슷한 역할을 담당한다.</p><p>Docker는 Tomcat(리눅그 컨테이너)이 실행할수 있는 환경을 GuestOS대신 제공한다. 거기다 HostOS와 완벽히 분리된!</p><p>Tomcat이 실행하기 위한 커널 리소스 자원(CPU,메모리,디스크 등등)은 Docker가 대신 HostOS의 커널을 공유하여 제공한다.</p><p>이런 Docker의 아이디어는 새로운 아이디어가 아니다.<br>LXC(리눅스 컨테이너)라고 해서 이미 기존에 있던 기술이었고, Docker는 이것의 발전된 형태라고 보인다.</p><h1 id="Docker의-특징"><a href="#Docker의-특징" class="headerlink" title="Docker의 특징"></a>Docker의 특징</h1><ul><li><p>기존의 가상머신과 달리 도커 컨테이너는 성능의 손실이 거의 없어서, 차세대 클라우드 인프라 솔루션으로 주목받고 있다.</p></li><li><p>Go 언어로 만들어진 오픈소스 프로젝트이다. 기업용 유료 EE버전과 CE 무료버전이 존재한다.</p></li><li><p>도커의 핵심 프로젝트인 도커 엔진과 더불어 도커 컴포즈(Docker Compose), 레지스트리(Private Registry), 도커머신(Docker Machine), Kitematic등 다양한 부가 프로젝트가 존재한다.</p></li><li><p>이미지 공용 리파지토리인 Docker hub를 통해 Image를 다운받거나 공유할수 있다.</p></li><li><p>리눅스 컨테이너 환경이라 리눅스에 최적화 되어있지만, 2018요즘 Windows와 Mac에서도 Docker를 지원한다.</p></li></ul><h1 id="Docker-이미지와-컨테이너"><a href="#Docker-이미지와-컨테이너" class="headerlink" title="Docker 이미지와 컨테이너"></a>Docker 이미지와 컨테이너</h1><p>Docker에서는 서비스를 이미지로 관리한다.</p><p>이 이미지란 일종의 설치파일과 같다. Docker에 Ubuntu를 실행하고 싶다면 Ubuntu 이미지를 docker 허브에서 다운 받아오면 된다.</p><p>이 이미지에는 실행해야할 서비스관련 파일과 그 서비스가 동작하기 위해서 필요한 라이브리러를 포함하고 있다.</p><p>그리고 이 이미지로 컨테이너라는 것을 생성 할수 있다.</p><p>이 컨테이너는 이미지로 설치된 실제 동작이 가능한 서비스라고 보면 된다.</p><p>이미지로 컨테이너를 생성하면 해당 이미지의 목적에 맞는 파일이 들어 있는 파일시스템과 격리된 시스템 자원 및 네트워크를 사용할 수 있는 독립된 공간이 생성되고, 이것이 바로 도커 컨테이너이다.</p><p>컨테이너는 이미지를 읽기 전용으로 사용하되 이미지에서 변경된 사항만 컨테이너 계층에 저장한다.</p><p>따라서 컨테이너의 작업은 원본 이미지에게 영향을 주지 않으며, 생성된 각 컨테이너는 각기 독립된 파일시스템을 도커엔진으로부터 제공받아 완벽하게 호스트OS와 분리되게 된다.</p><p>도커엔진에 의해 효과적으로 HostOS의 자원을 사용하고, HostOs와 완벽히 격리된 환경에서 컨테이너 단위로 서비스를 실행할수 있기 때문에 서비스의 관리, 확장, 공유, 유지보수등이 용이하다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Docker는 개념과 명령어만 알면 아주 쉽고 간편하게 원하는 서비스를 가상화로 돌릴수 있다.<br>그것도 아주 가볍게!<br>정확하지는 않지만 유튜브에서 듣기로는 Host서비스의 거이 98프로 정도의 성능을 낸다고 한다.<br>사실인지는 모르겠지만, 내가 직접 써보니 확실히 체감이 된다.</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 도커 </tag>
            
            <tag> 개념정리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-향상된 for 문(for each)</title>
      <link href="/2018/11/16/java-20181116-java-for-each/"/>
      <url>/2018/11/16/java-20181116-java-for-each/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>for each 문은 java5 부터 배열 및 컬랙션 등을 쉽게 처리하기 위해 추가된 문법이다.</p><p>음 난 왜 생소하지… javascript에서만 보던 건데… 여튼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String[] numbers = &#123;<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">  System.out.println(<span class="string">"number:"</span> + number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아주 간단하다. 기존의 for문의 <strong>초기값; 조건; 증가감식</strong> 등의 statment 대신 <strong>타입명 인덱스별명 : 배열이나 컬랙션</strong> 형태의 statement를 사용한다.</p><p>음 numbers의 타입으로 타입을 컴파일러가 유추할수 있을텐데, 굳이 타입명을 명시하게 하는 것은 조금 의아하다.</p><p>여튼 단순히 배열, 컬랙션 등을 순차적으로 돌리고 싶을때 간편하게 사용할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> foreach </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java - break label:(충접 루프 탈출)</title>
      <link href="/2018/11/16/java-20181116-java-break-label/"/>
      <url>/2018/11/16/java-20181116-java-break-label/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>java의 break문은 가장 가까운 반복문만 종료하고 바깥쪽 반복문은 종료시키지 못한다.</p><p>중첩된 반복문을 탈출하기 위해서는 <strong>break 라벨명;</strong> 을 사용 하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Outter: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">    System.out.println(<span class="string">"중첩 루푸 동작중 i:"</span> + i + <span class="string">"j:"</span> + j);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span> Outter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="comment">// _for</span></span><br><span class="line">&#125;<span class="comment">// _for</span></span><br></pre></td></tr></table></figure><p><img src="/images/20181116-java-break-label_1.png" alt="위 코드 실행 결과"></p><p>별 내용은 아니지만, 자꾸 문법을 까먹어서 정리한다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> loop </tag>
            
            <tag> break </tag>
            
            <tag> label </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker에 Ubuntu에 nginx올려 웹서버 동작시키기</title>
      <link href="/2018/11/14/docker-20181114-docker-ubuntu-nginx/"/>
      <url>/2018/11/14/docker-20181114-docker-ubuntu-nginx/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#들어가기">들어가기</a></li><li><a href="#실습">실습</a></li><li><a href="#마무리">마무리</a></li></ul><!-- /TOC --><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이번에는 Windows for Docker를 이용해서 Ubuntu 도커 이미지에 nginx를 설치하여 Ubuntu 도커 컨테이너에서 웹서버를 동작시키고, 호스트OS에서 브라우저로 접근해보려 한다.<br>사실 centos이미지를 사용하려 했으나, docker hub에 공유된 공식 centos 이미지는 뭔가 결핍된? 최소화된 상태의 이미지라 뭔가 docker file을 통해 전처리를 해야 하는 작업이 필요했다.<br>그래서 귀찮아서 centos를 ubuntu로 대체했다.</p><p>테스트 해본결과 centos 공식 이미지에 systemctl 명령어가 동작을 하지 않았었다.</p><p>docker를 사용하니 단순히 nignx 이미지를 가지고 웹서버를 돌릴수도 있을 것이다.<br>하지만 어떤 특정 서비스를 동작시키기 위해서 여러가지 다른 프로그램이나 기타 설정들이 필요 할 수도 있다.</p><p>ubuntu이미지 기반에 nginx를 설치하는 형태로 서비스를 만들경우, ubuntu의 패키지 메니저를 사용할수 있기 때문에 기타적인 프로그램 설치, 연동, 설정등이 쉬워진다.</p><h1 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>위 명령어로 현재 호스트에 설치된 docker 이미지를 검색해보자.</p><p><img src="/images/20181114-docker-ubuntu-nginx_1.png" alt="docker images"></p><p>음 우분투가 없다.<br>다음 명령어로 docker hub에 ubuntu를 검색하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure><p><img src="/images/20181114-docker-ubuntu-nginx_2.png" alt="docker search ubuntu 결과"></p><p>끙… 지금 docker hub쪽 서버가 좀 이상한지 docker search 명령어 응답이 재대로 안나온다.</p><p>대신 windows for docker의 kitematic에서 ubuntu 이미지를 검색하면 공식 우분투 이미지를 확인 할 수 있다.</p><p>끙 근데 역시 도커 허브 서버가 이상한지 이미지를 다운로드 할수가 없다.</p><p><img src="/images/20181114-docker-ubuntu-nginx_3.png" alt="음 docker hub가 간혹 맛탱이가 가는듯 하다."></p><p>이럴 때는 … 나중에 다시 하자.</p><p>A FEW MOMENTS LATER…</p><p><img src="/images/20181114-docker-ubuntu-nginx_4.png" alt="잉?"></p><p>한 참뒤에도 안되서, 다시 kitematic에 들어가니 갑작이 docker hub 계정을 물어본다.</p><p>음 뭔가 전에 입력된 것이 초기화 된듯 하다.</p><p>아 시발 또 안된다. </p><p>A FEW MOMENTS LATER…</p><p><img src="/images/20181114-docker-ubuntu-nginx_5.png" alt="으 마침내 된다."></p><p>검색된 이미지중 ubuntu 공식 이미지를 다운받자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 자동으로 해당 이미지의 최신 tag 이미지를 받는다.</p><p><img src="/images/20181114-docker-ubuntu-nginx_6.png" alt="다운로드 한뒤 docker images로 조회해 보면 이미지가 다운로드 된 것을 확인 할수있다."></p><p>다음 명렁어로 ubuntu이미지를 컨테이너로 동작시키자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ubunto-nginx -p 80:80 -p 443:443 -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>먼가 dockerfile을 사용하면 다양한 설정이 간편하게 다양한 설정을 가능할것 같은데, 아직 내가 공부가 부족해서 일단 이렇게 docker 명령어로 진행하겠다.<br>위 명렁어를 입력하면 바로 컨테이너가 실행되며 그 컨테이너의 쉘에 진입하게 된다.</p><p>아래 명렁어를 순서대로 입력해자.<br>별 내용은 없어 모든 과정 화면 캡쳐는 생략한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update   #패키지 메니지 업데이트</span><br><span class="line">apt-get install curl    #쉘에서 url 접근을 위해 설치, 웹서버 동작 테스트용</span><br><span class="line">apt-get install nginx   #nginx 설치</span><br><span class="line">service nginx start     #nginx 웹서버 동작</span><br><span class="line">curl -X GET http://127.0.0.1:80   #우분투 도커 컨테이너 내부에서 nginx 서버 동작 확인.</span><br></pre></td></tr></table></figure><p><img src="/images/20181114-docker-ubuntu-nginx_7.png" alt="우분투 컨테이너 내에서 nginx 웹서버의 동작을 확인했다."></p><p>그럼 우분투 컨테이너 내부가 아닌 호스트 OS인 windows에서 접속이 되는지 확인해 보자.</p><p><img src="/images/20181114-docker-ubuntu-nginx_8.png" alt="호스트 OS인 윈도우에서 브라우저로 우분투 컨테이너의 웹서버 접근 결과"></p><p>오 잘 된다.<br>끝!</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>음 인프라 관련 일을 해본적도 없고, 공부도 별로 못했고 그냥저냥 재미로 docker를 보고 있지만 뭔가 docker를 쉽게 사용하기 위해서는 서비스 단독 이미지를 사용하는 것보다 ubuntu와 같은 패키지 메니저가 설치된 이미지 기반에 서비스를 설치해서 사용하는 것이 편해보인다.</p><p>평소에 잘 안쓰던 리눅스 공부도 되고 일석이조인듯….</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 웹서버 </tag>
            
            <tag> 우분투 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue와 Express를 합쳐서 통합 프로젝트 만들기</title>
      <link href="/2018/11/13/vue-20181113-vue-how-to-make-vue-express-project/"/>
      <url>/2018/11/13/vue-20181113-vue-how-to-make-vue-express-project/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이 글은 Vue 프로젝트와 Express 프로젝트를 연동하는 예제이다.</p><h2 id="Vue-Express-Node-통합-프로젝트-환경-만들기"><a href="#Vue-Express-Node-통합-프로젝트-환경-만들기" class="headerlink" title="Vue Express Node 통합 프로젝트 환경 만들기"></a>Vue Express Node 통합 프로젝트 환경 만들기</h2><p>Vue를 프론트엔드로, Express를 백엔드로 개발할때 어떻게 프로젝트를 잡아야 할까 고민중 구글링에서 거이 완벽한 예제를 찾았다.</p><p><a href="http://vuejs.kr/2017/02/05/express-with-vue/" target="_blank" rel="external nofollow noopener noreferrer">vue express 통합예제 참조사이트</a>.</p><h3 id="실습할것에-대한-대략적-구성"><a href="#실습할것에-대한-대략적-구성" class="headerlink" title="실습할것에 대한 대략적 구성"></a>실습할것에 대한 대략적 구성</h3><p>구체적일 실습전 맥락을 집고 넘어가자.</p><p><img src="/images/20181113-project-band-of-coder_1.png" alt="프로젝트폴더 구성"></p><p>위 처럼 폴더구조를 잡을 것이다.</p><p>최상위 폴더는 프로젝트 폴더가 되며, 그 아래 폴더 backend는 express프로젝트 폴더, frontend 폴더는 vue(webpack) 프로젝트 폴더가 된다.</p><p>backend, frontend는 각각 독립적으로 동작이 가능하다.</p><p>하지만 내가 원하는 것은 express와 vue의 통합된 프로젝트 개발환경이다.</p><p>이 부분은 vue를 웹팩으로 빌드 하여 그 결과물을 backend즉 express 프로젝트의 public에 배포한다.<br>그리고 express의 router가 빌드된 vue프로젝트의 vue router와 연동시킨다.</p><p>대충 와꾸는 이정도이다. 이제 코딩을 해보자.</p><h3 id="vue-프로젝트로-frontend-폴더-생성하기"><a href="#vue-프로젝트로-frontend-폴더-생성하기" class="headerlink" title="vue 프로젝트로 frontend 폴더 생성하기"></a>vue 프로젝트로 frontend 폴더 생성하기</h3><p>앞서 말했듯이 일단 프로젝트 폴더를 하나 만들어 준다.<br>난 band_of_coder 라고 만들었다.<br>그리고 cmd를 만든 프로젝트 경로로 이동하여 Vue cli를 통해서 vue webpack 프로젝트를 생성하자.</p><p>명령어는 다음과 같다.<br>vue-cli의 설치가 필요하다.<br>그리고 webpack을 사용할 예정이므로 반드시 webpack 기반으로 만들어 주자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli  #설치하지 않은 경우</span><br><span class="line">vue init webpack frontend #vue webpack 프로젝트를 frontend 폴더에 생성한다.</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 아래처럼 vue 프로젝트 설정들을 물어본다.</p><p><img src="/images/20181113-project-band-of-coder_2.png" alt="vue-cli프로젝트 생성시 셋팅"></p><p>중요한 것은 vue-router 설치를 반드시 해야 한다.<br>나머지는 알아서 하길 바란다.<br>나는 EsLint, unit test, Nightwatch등은 설치하지 않았다.<br>해당 내용을 잘 모르고, 프로젝트 실행시 내가 잘 모르는 메세지가 너무 많이 나와서이다.<br>마지막 Yes, use NPM 을 선택하면 프로젝트를 생성하며 알아서 npm install 까지 해준다.</p><p><img src="/images/20181113-project-band-of-coder_3.png" alt="프로젝트 생성 완료후 메세지"></p><p><img src="/images/20181113-project-band-of-coder_4.png" alt="frontend폴더가 내부모습"></p><p>frontend 경로로 이동해서 다음 명령어로 생성된 vue 프로젝트가 동작하는지 확인해 보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd frontend</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_5.png" alt="npm run dev 결과"></p><p><a href="http://locallhost:8080" target="_blank" rel="external nofollow noopener noreferrer">http://locallhost:8080</a> 에 접속해보자.</p><p><img src="/images/20181113-project-band-of-coder_6.png" alt="vue프로젝트 동작확인"></p><h3 id="vue-프로젝트에서-Vue-router-테스트하기"><a href="#vue-프로젝트에서-Vue-router-테스트하기" class="headerlink" title="vue 프로젝트에서 Vue-router 테스트하기"></a>vue 프로젝트에서 Vue-router 테스트하기</h3><p>Vue-router가 동작하는지 실습해보자.</p><p>frontend 폴더를 atom으로 열자.<br>frontend/src/components 폴더에 HellowWorld.vue파일을 삭제하고 IndexPage.vue, LoginPage.vue 파일을 새로 만들자.(vue 확장자는 반드시 소문자를 써야 한다.)<br>HelloWorld.vue파일은 제거한다.</p><p><strong>LoginPage.vue 파일내용</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>로그인 페이지입니다.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>IndexPage.vue 파일내용</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>인덱스 페이지입니다.!!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 src/router/index.js 파일을 아래처럼 수정한다.<br>router 폴더는 vue init webpack 명령어로 vue 프로젝트를 생성할때 Vue-router 를 설치하면 자동으로 생성된다.<br>그리고 src/router/index.js 파일은 Vue Router 관련 내용을 가지고 있다.</p><p><strong>index.js 파일내용</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> IndexPage <span class="keyword">from</span> <span class="string">'@/components/IndexPage'</span></span><br><span class="line"><span class="keyword">import</span> LoginPage <span class="keyword">from</span> <span class="string">'@/components/LoginPage'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'IndexPage'</span>,</span><br><span class="line">      component: IndexPage</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/loginPage'</span>,</span><br><span class="line">      name: <span class="string">'LoginPage'</span>,</span><br><span class="line">      component: LoginPage</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_7.png" alt="위 수정내용을 적용한 모습니다."></p><p>다시 브라우저에서 <a href="http://localhost:8080/" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080/</a> 와 <a href="http://localhost:8080/loginPage" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080/loginPage</a> 로 접근해서 라우팅이 되는지 확인해 보자.</p><p>물론 npm run dev 명령으로 frontend(vue프로젝트)를 실행시켜야 한다.</p><p><img src="/images/20181113-project-band-of-coder_8.png" alt="Vue-router동작 확인"></p><p>일단 vue 프로젝트는 생성을 완료 했다.</p><h3 id="Express-프로젝트로-backend폴더-생성하기"><a href="#Express-프로젝트로-backend폴더-생성하기" class="headerlink" title="Express 프로젝트로 backend폴더 생성하기"></a>Express 프로젝트로 backend폴더 생성하기</h3><p>cmd로 프로젝트폴더 band_of_coder 로 이동하자.<br>그리고 다음 명령어로 express 프로젝트를 생성하자.<br>express cli프로젝트를 생성하려면 express-generator를 먼저 설치해야 한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g #설치하지 않은 경우</span><br><span class="line">express --view=pug backend</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 프로젝트 생성 완료</span></span><br><span class="line"></span><br><span class="line">cd backend</span><br><span class="line">npm install   </span><br><span class="line">DEBUG=backend:* npm start # express 실행명령어</span><br></pre></td></tr></table></figure><p>위 코드를 보면 npm install 이후 express 실행 까지 한다.</p><p><img src="/images/20181113-project-band-of-coder_9.png" alt="backend 폴더 내용"></p><p><img src="/images/20181113-project-band-of-coder_10.png" alt="express 프로젝트 생성 과정"></p><p>브라우저에서 <a href="http://localhost:3000" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000</a> 로 접근해서 동작을 확인하자.</p><p><img src="/images/20181113-project-band-of-coder_11.png" alt="express 프로젝트 실행결과"></p><h3 id="Vue프로젝트와-Express프로젝트를-연동하기"><a href="#Vue프로젝트와-Express프로젝트를-연동하기" class="headerlink" title="Vue프로젝트와 Express프로젝트를 연동하기"></a>Vue프로젝트와 Express프로젝트를 연동하기</h3><p>현재 Vue프로젝트는 frontend 폴더에 존재하며, 자체적인 웹서버를 localhost:8080을 사용하고 있다.<br>그리고 express 프로젝트는 backend 폴더에 존재하며, 자체적인 웹서버 locahost:3000을 사용하고 있다.</p><p>즉 두개의 웹서버가 동작하는데, Vue 프로젝트의 웹서버를 사용하지 않을 생각이다.<br>Vue 프로젝트를 webpack으로 번들링하여 그 결과물을 express프로젝트 backend폴더의 public으로 전달할 것이다.<br>그리고 express 프로젝트가 동작할때 자신의 템플릿 엔진인 pug를 사용하지 않고, 이 public의 vue 빌드 결과물을 라우팅하게 설정 할것이다.<br>express 프로젝트의 웹서버에 오는 요청은 express router가 받아서 public폴더에 빌드된 vue 프로젝트의 vue router 에 전달되게 된다.<br>(사실 vue router의 내부적인 매커니즘을 정확히 몰라서 위 내용은 틀린 내용일 수도 있다.)</p><h4 id="Vue-프로젝트를-webpack으로-빌드할때-그-경로를-backend로-전달하기"><a href="#Vue-프로젝트를-webpack으로-빌드할때-그-경로를-backend로-전달하기" class="headerlink" title="Vue 프로젝트를 webpack으로 빌드할때 그 경로를 backend로 전달하기"></a>Vue 프로젝트를 webpack으로 빌드할때 그 경로를 backend로 전달하기</h4><p>vue 프로젝트를 webpack으로 빌드할때 그 결과물을 frontend 폴더가 아닌, express의 backend 폴더의 public으로 바꿔 보자.</p><p>frontend 폴더의 config/index.js 파일을 열어 build 영역을 다음과 같이 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    <span class="comment">//index: path.resolve(__dirname, '../dist/index.html'),   기존에 있는 것을 주석처리</span></span><br><span class="line">    index: path.resolve(__dirname, <span class="string">'../../backend/public/index.html'</span>),  <span class="comment">//수정되는 부분이다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    <span class="comment">//assetsRoot: path.resolve(__dirname, '../dist'),  기존에 잇는 것을 주석처리</span></span><br><span class="line">    assetsRoot: path.resolve(__dirname, <span class="string">'../../backend/public'</span>),   <span class="comment">// 수정되는 부분이다.</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br></pre></td></tr></table></figure><p>위 소스의 수정되는 부분을 보면 경로가 backend/public을 가리키는 것을 확인 할 수 있다.</p><p><img src="/images/20181113-project-band-of-coder_12.png" alt="vue webpack 빌드 설정 변경결과"></p><p>그럼 이제 vue 프로젝트를 빌드해서 그 내용이 backend/public에 재대로 꽂히는지 확인해보자.<br>일단 기존 backend/public 폴더 내용을 깨끗이 지우자.</p><p>그리고 cmd로 frontend경로로 이동하여 <strong>npm run build</strong> 명령으로 vue 프로젝트를 빌드하자.<br>빌드 결과물이 backend/public 폴더 내부에 생기는지 확인해 보자.</p><p>주의 할 점은 express 서버가 동작중에 빌드시 오류가 발생할수 있으므로, express 서버를 종료하고 빌드하자.</p><p><img src="/images/20181113-project-band-of-coder_13.png" alt="frontend에서 npm run build 명령어 실행"></p><p><img src="/images/20181113-project-band-of-coder_14.png" alt="backend/public 폴더에 빌드 결과물 확인"></p><h4 id="Express-프로젝트에서-router수정하여-vue-router연결"><a href="#Express-프로젝트에서-router수정하여-vue-router연결" class="headerlink" title="Express 프로젝트에서 router수정하여 vue router연결"></a>Express 프로젝트에서 router수정하여 vue router연결</h4><p>이제 Express 프로젝트를 조금 수정해야 한다.</p><p>일단 backend/routes/index.js 파일을 아래처럼 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.sendFile(path.join(__dirname, <span class="string">'../public'</span>, <span class="string">'index.html'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>Express의 라우터로 접근하면 public에 있는 index.html을 전달하게 설정했다.</p><p>Vue router를 Node+Express 웹서버에 연동하는 설정이 필요하다.<br>이부분의 자세한 내용은 다음을 참조하자.<br>nginx나 apache등 기타 웹서버와의 연동설정도 설명해준다.<br><a href="https://router.vuejs.org/kr/guide/essentials/history-mode.html#서버-설정-예제" target="_blank" rel="external nofollow noopener noreferrer">https://router.vuejs.org/kr/guide/essentials/history-mode.html#서버-설정-예제</a></p><p>설명을 보면 vue router와 express연동을 위해 express에 <strong>connect-history-api-fallback</strong>라는 모듈이 필요하다.</p><p>git bash 터미널로 backend 폴더에 진입해서 아래 명령어로 connect-history-api-fallback를 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install connect-history-api-fallback -save</span><br></pre></td></tr></table></figure><p>그리고 beckend 폴더의 app.js 파일에 connect-history-api-fallback 모듈을 등록하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)());</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_15.png" alt="backend app.js에 모듈 추가"></p><h3 id="vue-express-통합환경-동작-확인하기"><a href="#vue-express-통합환경-동작-확인하기" class="headerlink" title="vue express 통합환경 동작 확인하기"></a>vue express 통합환경 동작 확인하기</h3><p>이제 설정은 거진 다 끝났다.<br>vue 프로젝트의 웹서버는 이제 필요 없으니 종료하자.<br>git bash 터미널로 backend폴더에 진입해서 DEBUG=backend:* npm start 를 입력하여, express 를 실행하자.</p><p>그리고 브라우저에서 <a href="http://localhost:3000/" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/</a> 와 <a href="http://localhost:3000/loginPage" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/loginPage</a> 로 접근해 보자.<br>epxress 서버에 접근하지만 실제 url은 vue router 에 등록된 url을 사용한다는 것을 주의하자.</p><p><img src="/images/20181113-project-band-of-coder_16.png" alt="vue express 통합결과 확인"></p><p>위 결과를 보면 분명 3000포트로 즉 express프로젝트 접속으로 vue프로젝트의 vue-router가 동작하는 것을 확인 할수있다.</p><p>정말 frontend는 싱기방기하다.</p><hr><h2 id="Vue-Express의-데이터-통신해보기"><a href="#Vue-Express의-데이터-통신해보기" class="headerlink" title="Vue Express의 데이터 통신해보기"></a>Vue Express의 데이터 통신해보기</h2><p>Express의 Router가 Vue의 Router로 연결되는것 까지 확인했다.<br>이제 해야 할 것은 Vue에서 Rest요청을 Express Router에게 보내고 응답을 받는 것이다.</p><p>역시 아래 자료를 따라서 실습했다.<br><a href="http://vuejs.kr/2017/02/05/express-with-vue/" target="_blank" rel="external nofollow noopener noreferrer">http://vuejs.kr/2017/02/05/express-with-vue/</a></p><h3 id="Express-backend폴더-수정하기"><a href="#Express-backend폴더-수정하기" class="headerlink" title="Express backend폴더 수정하기"></a>Express backend폴더 수정하기</h3><p>일단 beckand/movies.json 파일을 만들고, 내용을 아래처럼 채운다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"공조"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"김성훈"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79416/79416_185.jpg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"컨택트"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"드니 빌뇌브"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79437/79437_185.jpg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"더킹"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"한재림"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79423/79423_185.jpg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"모아나"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"론 클레멘츠, 존 머스커"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79316/79316_185.jpg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"라이언"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"가스 데이비스"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79396/79396_185.jpg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"너의 이름은"</span>,</span><br><span class="line">    <span class="attr">"year"</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">"director"</span>: <span class="string">"신카이 마코토"</span>,</span><br><span class="line">    <span class="attr">"poster"</span>: <span class="string">"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000079/79313/79313_1000.jpg"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>위 데이터는 express 서버가 vue로 전달할 데이터이다.</p><p>위 데이터를 실제 전달할 express router 파일을 만들어야 한다.</p><p>backend/routes/movies.js 파일을 만들고 내용을 아래처럼 채운다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> movies = <span class="built_in">require</span>(<span class="string">'../movies.json'</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"========무비 인덱스==========="</span>);</span><br><span class="line">  res.send(movies);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = <span class="built_in">parseInt</span>(req.params.id, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"========무비 쇼=========== id:"</span>+ id);</span><br><span class="line">  <span class="keyword">var</span> movie = movies.filter(<span class="function"><span class="keyword">function</span> (<span class="params">movie</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> movie.id === id</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.dir(movie);</span><br><span class="line">  res.send(movie)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>하나는 전체 데이터를, 그 아래 라우터는 특정 아이디 데이터만 뷰에 전달한다.</p><p>그리고 지금 movies.js 파일을 express app.js 에 적용해야 한다.</p><p>아래 내용을 backend/app.js 파일애 아래 내용을 추가하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moviesRouter = <span class="built_in">require</span>(<span class="string">'./routes/movies'</span>);  <span class="comment">// vue에 데이터를 전달할 테스트 라우터 </span></span><br><span class="line">app.use(<span class="string">'/api/movies'</span>, moviesRouter);</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_17.png" alt="bacnend/app.js 수정화면"></p><p>frontend의 vue에서 <a href="http://localhost:3000/api/movies" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/api/movies</a> 또는 <a href="http://localhost:3000/api/movies/1" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/api/movies/1</a> </p><p>이런식으로 요청을 위 express 라우터가 처리하게 된다.</p><h3 id="Vue-frontend-폴더-수정하기"><a href="#Vue-frontend-폴더-수정하기" class="headerlink" title="Vue frontend 폴더 수정하기"></a>Vue frontend 폴더 수정하기</h3><p>frontend/config/index.js 파일의 proxyTable 영역을 수정해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:3000/api'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_18.png" alt="frontend/config/index.js 수정화면"></p><p>솔직히 저 proxyTable이 정확히 무엇인지 모르겠다. 조만간 따로 공부해야 할듯.</p><p>대충 느낌은 vue에서 /api로 시작하는 요청이 발생했을 경우 target으로 리다이렉팅 해주는 것 같다.</p><p>proxytable 참고자료 <a href="http://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external nofollow noopener noreferrer">http://vuejs-templates.github.io/webpack/proxy.html</a></p><p>그리고 axios 모듈을 추가해야 한다.</p><p>일단 아래 명령어로 forntend 에 axios 모듈을 추가하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><p>그리고 frontend/src/main.js 파일에 아래 내용을 추가하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_19.png" alt="frontend/src/main.js 수정화면"></p><p>이제 실제 express에 데이터를 요청하는 vue화면을 만들자.</p><p>아래 두 파일을 만들자.</p><p>frontend/src/components/MovieIndexPage.vue  데이터 전체조회 화면<br>frontend/src/components/MovieShowpage.vue   특정 데이터 조회 화면</p><p><strong>MovieIndexPage.vue 내용</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movies"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>영화 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"movie in movies"</span> <span class="attr">class</span>=<span class="string">"movie"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"movie.poster"</span> <span class="attr">class</span>=<span class="string">"poster"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> []</span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'show', params: &#123; id: movie.id &#125;&#125;"</span>&gt;</span>더보기<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  created () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.$http.get(<span class="string">'/api/movies'</span>)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.movies = response.data</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      movies: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MovieShowPage.vue 내용</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>상세 내용<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      &#123;&#123;movie&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> id = <span class="keyword">this</span>.$route.params.id</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$http.get(<span class="string">`/api/movies/<span class="subst">$&#123;id&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.movie = response.data</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      movie: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20181113-project-band-of-coder_20.png" alt="vue 파일 추가화면"></p><p>이제 이 두 파일을 vue-router에 적용한다.</p><p>frontend/src/router/index.js 파일에 위 두 파일을 추가하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> IndexPage <span class="keyword">from</span> <span class="string">'@/components/IndexPage'</span></span><br><span class="line"><span class="keyword">import</span> LoginPage <span class="keyword">from</span> <span class="string">'@/components/LoginPage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MovieIndexPage <span class="keyword">from</span> <span class="string">'@/components/MovieIndexPage'</span></span><br><span class="line"><span class="keyword">import</span> MovieShowPage <span class="keyword">from</span> <span class="string">'@/components/MovieShowPage'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'IndexPage'</span>,</span><br><span class="line">      component: IndexPage</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/loginPage'</span>,</span><br><span class="line">      name: <span class="string">'LoginPage'</span>,</span><br><span class="line">      component: LoginPage</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/movie'</span>,</span><br><span class="line">      name: <span class="string">'MovieIndexPage'</span>,</span><br><span class="line">      component: MovieIndexPage</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/movie/:id'</span>,</span><br><span class="line">      name: <span class="string">'MovieShowPage'</span>,</span><br><span class="line">      component: MovieShowPage</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>URL이 어떻게 돌아가는지 잠깐 정리해 보자.</p><p>1.브라우저에서 localhost:3000/movie 접근</p><p>2.vue rounter가 MovieIndexPage를 응답</p><p>3.MovieIndexPage vue 컴포넌트에서 localhost:3000/api/movies 를 서버에 요청</p><p>4.vue rounter에서 /api 를 인식후 요청을 express서버 router에 전달.</p><p>5.express router가 MovieIndexPage 뷰 컴포넌트에 응답.</p><p>이제 frontend의 vue프로젝트를 빌드하고, backend의 express프로젝트를 동작시키고 결과를 확인해 보자.</p><p>express 서버를 실행시키고, 브라우저에서 localhost:3000/movie 그리고 localhost:3000/movie/1 접근하여 동작을 확인하자.</p><p><img src="/images/20181113-project-band-of-coder_21.png" alt="결과확인"></p><h1 id="위-예제-Github-리파지토리"><a href="#위-예제-Github-리파지토리" class="headerlink" title="위 예제 Github 리파지토리"></a>위 예제 Github 리파지토리</h1><p>하도 안된다시는 분들이 계서서, 만들어 올립니다.</p><p>100프로 위 예제로 만든 프로젝트입니다.</p><p><a href="https://github.com/hanumoka/VueExpressNode" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/hanumoka/VueExpressNode</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 연동 </tag>
            
            <tag> express </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - Promise(콜백의 진화형)</title>
      <link href="/2018/11/12/javascript-20181112-javascript-promise/"/>
      <url>/2018/11/12/javascript-20181112-javascript-promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise란"><a href="#Promise란" class="headerlink" title="Promise란"></a>Promise란</h1><p>Promise는 javascript의 callback의 단점을 해결 하기 위한 1단계 진화형 형태이다.<br><strong>프라미스가 콜백을 대체하는 것은 아니다. 사실 프라미스에서도 콜백을 사용한다.</strong><br>프라미스는 콜백을 예측 가능한 패턴으로 사용할수 있게 하며, 프라미스 없이 콜백만 사용했을 때 나타날 수 있는 엉뚱한 현상이나 찾기 힘든 버그를 해결할수 있다.<br><strong>특히 보기싫은 중첩콜백과 콜백헬을 해결해준다.</strong></p><hr><h1 id="Promise의-기본개념"><a href="#Promise의-기본개념" class="headerlink" title="Promise의 기본개념"></a>Promise의 기본개념</h1><p><strong>프라미스 기반 비동기적 함수를 호출하면 그 함수는 Promise 인스턴스를 반환한다.</strong><br>프라미스는 성공(fulfilled)하거나, 실패(rejected)하거나 단 두 가지뿐이다.<br>프라미스는 성공 혹은 실패 둘 중 하나만 일어난다고 확신할 수 있다.<br>성공한 프라미스가 나중에 실패하는 일 같은 건 절대 없다.<br>또한, 성공이든 실패든 단 한 번만 일어난다.<br>프라미스가 성공하거나 실패하면 그 프라미스를 결정됬다(settled)고 한다.</p><p>프라미스는 객체이므로 어디든 전달할 수 있다는 점도 콜백에 비해 간편한 장점이다.<br>비동기적 처리를 여기서 하지 않고 다른 함수에게(또는 다른 동료가) 처리하게 하고 싶다면 프라미스를 넘기기만 하면 된다.</p><p>사실 이렇게 말로만 들으면 Promise에 대한 감이 전혀 오질 않을수도 있다.</p><p>일단 만들어 보자.</p><hr><h1 id="Promise-만들고-실행하기"><a href="#Promise-만들고-실행하기" class="headerlink" title="Promise 만들고 실행하기"></a>Promise 만들고 실행하기</h1><p>setTimeout을 이용하여 10초 이하 카운팅하는 Promise를 만들어보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params">seconds</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> timeoutIds = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = seconds; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">      timeoutIds.push(setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">10</span>) &#123;</span><br><span class="line">          timeoutIds.forEach(clearTimeout);   <span class="comment">// 등록된 setTimeout 스케쥴을 다 지워버린다.</span></span><br><span class="line">          <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"10초를 초과하는 수는 셀수 없다. 입력받은 초:"</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="built_in">console</span>.log(i + <span class="string">'...'</span>);</span><br><span class="line">        <span class="keyword">else</span> resolve(<span class="built_in">console</span>.log(<span class="string">"GO!"</span>));</span><br><span class="line">      &#125;, (seconds-i)*<span class="number">1000</span>));</span><br><span class="line">    &#125; <span class="comment">//-for</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>비동기적 동작을 원하는 내용을 콜백으로 new Promise의 인자로 넘긴다.</p><p>중요한 문법적 요소는 Promise의 인자로 넘겨지는 콜백함수의 매개변수 resolve(성공), reject(실패)이다.</p><p>resolve(성공)는 Promise에 인자인 콜백이 정상동작을 했을 경우 동작할 로직이고, reject(실패)는 그 반대로 콜백이 실패한경우 동작할 로직이다.</p><p>즉 resolve, reject도 콜백이다.</p><p><strong>그리고 resolve, reject의 중요한 특징은 여러번 호출하든, 섞어서 호출하든 첫번째로 호출한 것만 의미가 있다는 것이다.</strong></p><p>자 그러면 이제 반환된 Promise를 호출하는 부분이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">countdown(<span class="number">13</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 정상 종료"</span>); <span class="comment">// resolve 호출시 동작</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 동작 에러:"</span>+ err.message); <span class="comment">// reject 호출시 동작</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>then의 첫번째 인자가 resolve, 두번째 인자가 reject를 대체하는 것을 알수 있다.</p><p><strong>Promise의 인자콜백에서 로직상으로 reject는 없을수 있지만, 반드시 성공했을 경우 resolve를 명시적으로 호출해 줘야 한다.</strong></p><p>그래야만 Promise에서 호출하는 부분에서 정상적으로 동작했는지 여부를 확인 할 수 있다.</p><p>아래처럼  resolve, reject를 둘로 나눠서 사용할 수도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = countdown(<span class="number">13</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 정상 종료"</span>); <span class="comment">// resolve 호출시 동작</span></span><br><span class="line">&#125;);</span><br><span class="line">p.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 동작 에러:"</span>+ err.message); <span class="comment">// reject 호출시 동작</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>또는 아래처럼 더 간단하게도 사용이 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = countdown(<span class="number">13</span>);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 정상 종료"</span>); <span class="comment">// resolve 호출시 동작</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"countdown 동작 에러:"</span>+ err.message); <span class="comment">// reject 호출시 동작</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise를 실행하는 방법중 위 방법을 가장 추천한다.</p><p>그 이유는 <strong>then의 콜백에서 발생하는 error도 맨 마지막 catch에서 처리할 수 있기 때문이다.</strong></p><p>그리고 콜백헬을 대체 할 Promise체인을 사용하기 편하다.</p><hr><h1 id="Promise-Chain-프라미스-체인"><a href="#Promise-Chain-프라미스-체인" class="headerlink" title="Promise Chain(프라미스 체인)"></a>Promise Chain(프라미스 체인)</h1><p>프라미스가 완료되면 그 다음단계 진행해야할 로직들을 묶어서 순차적으로 실행할수 있다.</p><p>이 체인기능은 callback hell 이라는 문제점을 해결해준다.</p><p>예를 들어 a.txt, b.txt, c.txt 파일을 순서대로 읽어야 한다고 가정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//파일을 읽는 Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">fileName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="string">"utf-8"</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(<span class="built_in">console</span>.log(data));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//파일을 읽는 Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileBBBBB</span>(<span class="params">fileName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="string">"utf-8"</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(<span class="built_in">console</span>.log(data));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = readFile(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">p.then(readFileBBBBB(<span class="string">"b.txt"</span>))</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//Promise 채인에 일반 콜백 연결</span></span><br><span class="line">  fs.readFile(<span class="string">"c.txt"</span>, <span class="string">"utf-8"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">"c.txt 파일 읽기 실패"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">"에렁:"</span> + err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/20181112-javascript-promise_1.png" alt="위 코드 결과"></p><p>위 코드는 많은 것을 보여주고 있다.</p><ul><li><p>최초 호출된 Promise를 통해서 비동기적으로 동작하는 로직을 순서대로 묶을수 있다.</p></li><li><p>최초 호출을 제외하고 그 다음 단계부터 Promise와 콜벡을 혼용해서 순서를 만들수 있다.</p></li><li><p>Promise체인 어디에서든 에러가 생기면 체인 전체가 멈추고 그 에러 처리를 마지막의 catch 핸들러 한 곳에서 처리 할 수 있다.</p></li><li><p>callback hell의 중첩으로 쌓인 코드보다 훨씬 보기가 쉽다.</p></li></ul><p>프로미스 체인기능은 아주 직관적이고 강력한 기능이라 생각된다.</p><p><strong>위 예제에는 없지만 resolve의 매개인자를 통해서 앞선 단계의 데이터를 다음단계로 계속 넘길수도 있다.</strong></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>일단 여기까지만… 이게 공부해보니 상당히 어려운 javascript 문법기술이다.<br>결정되지 않는 프라미스 방지나, 프라미스 체인에서 재귀적으로 promise를 호출했을 경우등…. 아직 공부해야 할 부분이 많아 보인다.<br>이 글에서는 promise의 개념과 간단한 사용법 정도만 보고 넘어가야 겠다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> callback </tag>
            
            <tag> callbackhell </tag>
            
            <tag> promise </tag>
            
            <tag> 프라미스 </tag>
            
            <tag> promise chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker - Nginx에 webserver연동하기</title>
      <link href="/2018/11/08/docker-20181108-docker-nginx/"/>
      <url>/2018/11/08/docker-20181108-docker-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>개인용 포트폴리오 웹을 어떻게 서비스할까 고민하던중 docker를 문뜩 docker를 이용해보고 싶어졌다.<br>이글은 Windows환경에서 Docker for Windows를 통해서 nginx 이미지를 이용하여 로컬에 있는 webserver 를 실행예제이다.</p><h1 id="nginx-이미지-다운받기"><a href="#nginx-이미지-다운받기" class="headerlink" title="nginx 이미지 다운받기"></a>nginx 이미지 다운받기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>위 명령어를 이용해서 docker hub에서 nginx 공식 이미지를 다운 받는다.</p><h1 id="nginx-웹서버에-올릴-웹-폴더-준비"><a href="#nginx-웹서버에-올릴-웹-폴더-준비" class="headerlink" title="nginx 웹서버에 올릴 웹 폴더 준비"></a>nginx 웹서버에 올릴 웹 폴더 준비</h1><p><img src="/images/20181108-docker-nginx_1.png" alt="준비된 웹폴더"></p><p>나는 위처럼 nginx에 실행할 웹 폴더를 준비했다.<br>만약 따라하는 사람이 있다면 그냥 특정폴더에 index.html 파일만 있어도 된다.</p><h1 id="nginx-컨테이너를-실행하면서-웹폴더-연동하기"><a href="#nginx-컨테이너를-실행하면서-웹폴더-연동하기" class="headerlink" title="nginx 컨테이너를 실행하면서 웹폴더 연동하기"></a>nginx 컨테이너를 실행하면서 웹폴더 연동하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-mokafolio -v /C/Users/amagr/Desktop/projects/mokafolio:/usr/share/nginx/html:ro -d -p 58080:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure><p>위 명령어는 nginx이미지를 컨테이너로 만들고 프로세스를 실행하는 명령어이다.<br>명령어를 쪼개어 설명해보겠다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br></pre></td></tr></table></figure><p>docker 이미지를 컨테이너로 만들고 실행한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--name nginx-mokafolio</span><br></pre></td></tr></table></figure><p>생성하는 컨테이너의 이름을 nginx-mokafolio라고 명명한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v /C/Users/amagr/Desktop/projects/mokafolio:/usr/share/nginx/html:ro</span><br></pre></td></tr></table></figure><p>위 설정은 실행할 컨테이너의 볼륨(volume)을 연결하는 것이다.<br>즉, 로컬의 /C/Users/amagr/Desktop/projects/mokafolio 경로를 실행할 컨테이너의 /usr/share/nginx/html로 연결한다.</p><p>내 경우 윈도우 경로가 C:\Users\amagr\Desktop\projects\mokafolio 이지만 /C/Users/amagr/Desktop/projects/mokafolio 식으로 변경해야 한다.</p><p>-d 옵션은 컨테이너를 데몬(백그라운드)로 실행하겠다는 말이다.<br>-p 58080:80 -p 443:443의 의미는 로컬의 58080포트를 컨테이너의 80포트로 연결하고, 로컬의 443포트를 컨테이너의 443포트에 연결한다.</p><p>명령어 마지막의 nignx는 docker run이 실행할 이미지의 이름이다.</p><p>대충 명령어 설명은 끝냈다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>위 명령어로 재대로 컨테이너가 동작하는지 확인해 보자.</p><p><img src="/images/20181108-docker-nginx_2.png" alt="docker ps로 현재 실행중인 컨테이너 확인결과."></p><p>브라우저에서 localhost:58080으로 접근해서 nginx가 잘 동작되는지 확인해보자.</p><p><img src="/images/20181108-docker-nginx_3.png" alt="docker nginx 웹서버 동작 확인."></p><p>잘 동작하는 것을 확인했다.</p><p>사실 실제 docker를 사용할때에는 ningx와 웹서버 폴더를 하나의 이미지로 묶어서 하나의 새로운 이미지로 만들어 사용한다고 하는데…</p><p>그건 나중에 좀더 공부해 봐야 겠다.</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> web </tag>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - callback hell(콜백 헬)</title>
      <link href="/2018/11/08/javascript-20181108-javascript-callback-hell/"/>
      <url>/2018/11/08/javascript-20181108-javascript-callback-hell/</url>
      
        <content type="html"><![CDATA[<h1 id="콜벡헬이란"><a href="#콜벡헬이란" class="headerlink" title="콜벡헬이란"></a>콜벡헬이란</h1><p>콜백을 사용해 비동기적으로 실행할 수 있긴 하지만, 현실적인 단점이 있다.<br>한 번에 여러 가지를 기다려야 한다면 콜백을 관리하기가 상당히 어려워진다.<br>노드 앱을 만든다고 하자.<br>이 앱은 세 가지 파일의 콘텐츠를 읽고, 60초가 지난 다음 이들을 결합해 네번째 파일에 기록 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'a.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, dataA</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="built_in">console</span>.error(err);</span><br><span class="line">  fs.readFile(<span class="string">'b.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, dataB</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.error(err);</span><br><span class="line">    fs.readFile(<span class="string">'c.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, dataC</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="built_in">console</span>.error(err);</span><br><span class="line">      setTimetout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        fs.writeFile(<span class="string">'d.txt'</span>, dataA+dataB+dataC, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err) <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;, <span class="number">60</span> * <span class="number">100</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 코드를 손으로 직접 타이핑 해보길 바란다.<br>콜벡이 여러개 겹쳐 있지만 콜백 자체 코드는 굉장히 심플하다.<br>하지만 뻥 안치고 괄호랑 중괄호 재대로 짝이 맞는지 확인을 수도없이 하게 된다.</p><p>위와 같은 코드를 콜백 헬이라고 부른다.</p><p><strong>콜백헬의 가장큰 문제는 위처럼 콜백이 중첩될 경우 코드 자체를 알아보기 어렵다는 것이다.</strong><br><strong>더 골치 아픈 문제는 콜벡에서의 에러 처리이다.</strong></p><p>위 예제에서는 에러를 기록하기만 했지만, 예외를 일으키려 했다면 더더욱 골치가 아파진다.</p><h1 id="콜벡헬에서의-예외발생"><a href="#콜벡헬에서의-예외발생" class="headerlink" title="콜벡헬에서의 예외발생"></a>콜벡헬에서의 예외발생</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readSketchyFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'dose_not_exist.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'warning : minor issue occurred, program continuing'</span>);</span><br><span class="line">  &#125; <span class="comment">// _try</span></span><br><span class="line">&#125; <span class="comment">// _fs</span></span><br><span class="line"></span><br><span class="line">readSketchyFile();</span><br></pre></td></tr></table></figure><p>이 코드는 얼핏 타당해 보이고, 예외 처리도 수행하는 방어적인 코드처럼 보인다.<br>동작하지 않는다는 것만 빼면 말이다.<br>직접 실행해 보면, 예상되는 에러가 문제를 일으키기 않도록 대비 했는데도 프로그램은 멈춘다.<br><strong>예외 처리가 의도대로 동작하지 않는 이유는 try …catch 블록은 같은 함수 안에서만 동작하기 때문이다.</strong><br>try …catch 블록은 readSketchyFile 함수 안에 있지만, 정작 예외는 fs.readFile이 콜백으로 호출하는 익명 함수 안에서 일어난다.</p><p>또한, 콜백이 우연히 두번 호출되거나, 아예 호출되지 않는 경우를 방지하는 안전장치도 없다.<br>콜백이 정확히 한 번만 호출될 것을 가정하고 코드를 작성한다면, 애석하지만 자바스크립트는 그런 걸 보장하지 앟는다.</p><h1 id="콜백헬의대안"><a href="#콜백헬의대안" class="headerlink" title="콜백헬의대안"></a>콜백헬의대안</h1><p>대표적으로 async라이브러리, Promise 등이으로 콜벡헬의 문제점을 해결할 수 있다.<br>async라이브러리를 사용하기 보다는 callback의 발전된 형태인 Promise를 사용하는 것이 더 좋아보인다.<br>요즘에는 Promise보다 더 강력한 async …await라는 것도 있다.</p><p>음 프로미스는 다음글에…</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> callback </tag>
            
            <tag> javasript </tag>
            
            <tag> callbackhell </tag>
            
            <tag> 콜백헬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java7에서 switch 문법의 변화</title>
      <link href="/2018/11/08/java-20181108-java7-switch/"/>
      <url>/2018/11/08/java-20181108-java7-switch/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>java6 까지는 switch 문의 괄호에는 정수타입(byte, char, short, int, long) 변수나 정수값을 산출하는 연산식만 올 수 있었다.<br><strong>java7 부터는 String 타입의 변수도 올수 있다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String userAutority = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(userAutority)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"root"</span>:</span><br><span class="line">    System.out.println(<span class="string">"관리자 권한입니다."</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"guest"</span>:</span><br><span class="line">    System.out.println(<span class="string">"손님 권한입니다."</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    System.out.println(<span class="string">"권한을 확인할 수 없습니다."</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> switch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node path.join() vs path.resolve()</title>
      <link href="/2018/11/08/node-20181108-node-path-join-vs-resolve/"/>
      <url>/2018/11/08/node-20181108-node-path-join-vs-resolve/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Vue나 Webpack등을 보면 Node의 Path모듈을 자주 사용하는 것을 볼수 있다.</p><p>이 Path 모듈은 Node의 내장모듈로서 javascript에서 폴더나 파일의 경로를 쉽게 문자열로 만들어주는 유틸리티 모듈이다.</p><p>특히 Windows 타입과 POSIX(Linux, macOS)타입으로 경로구분자가 다른수 있는데, 이 Path 모듈을 사용하면 여기에 대한 고민을 할 필요가 없어진다.</p><p>Path 모듈에는 다양한 메소드가 있으나, 보통 인자로 path를 받고 메소드별로 적절하게 문자열 형태의 path를 리턴하는 형태이다.</p><p>이 글에서는 Node의 path패키지 메서드중  여러개의 경로를 인자로 받아 하나의 경로로 합쳐주는 join과 resolve에 대해 정리해 보겠다.</p><h1 id="Path-join"><a href="#Path-join" class="headerlink" title="Path.join()"></a>Path.join()</h1><p>메소드명처럼 인자로 받은 경로들을 하나로 합쳐서 문자열 형태로 path를 리턴한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'/foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz/asdf'</span>, <span class="string">'quux'</span>, <span class="string">'..'</span>);</span><br><span class="line"><span class="comment">// Returns: '/foo/bar/baz/asdf'</span></span><br><span class="line"></span><br><span class="line">path.join(<span class="string">'foo'</span>, &#123;&#125;, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// throws 'TypeError: Path must be a string. Received &#123;&#125;'</span></span><br></pre></td></tr></table></figure><p>재미있는 점은 첫 번째 예제의 맨 마지막 인자이다. </p><p><strong>..</strong> 은 현재경로에서 한단계 위의 상위경로를 의미한다.</p><p>따라서 <strong>/foo/bar/baz/asdf/quux</strong> 이 상태의 경로에서 마지막에 합쳐진 <strong>..</strong> 로 인해 quux의 한 단계 위 경로로 이동하게 되어 quux가 결과값에 제외된 것이다.</p><p>즉, <strong>..</strong> 의 왼쪽에 있는 한 개의 경로인자는 제외된다.</p><h1 id="Path-resolve"><a href="#Path-resolve" class="headerlink" title="Path.resolve()"></a>Path.resolve()</h1><p>resolve도 join과 마찬가지로 인자로 받은 경로들을 하나로 합쳐러 문자열 헝태로 리턴한다.</p><p>하지만 다른점은 전달받은 경로인자들의 <strong>맨 오른쪽 부터 왼쪽으로 경로인자들을 합쳐</strong>나간다는 것이다.</p><p>그리고 경로인자들을 합쳐나가는중 <strong>/</strong> 를 만나면 절대경로로 인식해서 나머지 경로 인자들을 무시한다.</p><p>만약 <strong>/</strong> 를 끝까지 만나지 못하면 <strong>/현재경로/생성된경로</strong> 형태로 결과를 리턴한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>);</span><br><span class="line"><span class="comment">// Returns: '/foo/bar/baz'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>);</span><br><span class="line"><span class="comment">// Returns: '/tmp/file'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'wwwroot'</span>, <span class="string">'static_files/png/'</span>, <span class="string">'../gif/image.gif'</span>);</span><br><span class="line"><span class="comment">// if the current working directory is /home/myself/node,</span></span><br><span class="line"><span class="comment">// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure><p>여기서도 <strong>..</strong> 의 왼쪽에 있는 한 개의 경로인자는 제외된다.<br>이 특성은 Path 모듈의 메소드 전반에 적용되는 룰인것 같다.</p><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://nodejs.org/api/path.html" target="_blank" rel="external nofollow noopener noreferrer">https://nodejs.org/api/path.html</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> path </tag>
            
            <tag> join </tag>
            
            <tag> resolve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack error: Cannot find module webapck</title>
      <link href="/2018/11/07/webpack-20181107-webpack-error-Cannot-find-module-webapck/"/>
      <url>/2018/11/07/webpack-20181107-webpack-error-Cannot-find-module-webapck/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Webpack을 공부하기 위해 Webpack을 설치 했다.<br>현재 webpack 은 4버전이다. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm webpack -g</span><br><span class="line">npm webpack-cli -g</span><br></pre></td></tr></table></figure><p>위 두 명령어로 webpack 개발환경을 클로벌로 설치한 뒤, 특정 프로젝트내에서 webpack 명령어를 입력했을때 다음과 같이 webpack 모듈을 찾을수 없다는 error가 발생했다.<br>음 보통 글로벌에 설정한 모듈은 어디서나 사용할수 있을텐데 왜 이러는지 모르겠다.</p><p>아래는 오류 내용이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Cannot find module 'webapck'</span><br></pre></td></tr></table></figure><p><img src="/images/20181107-webpack-error-Cannot-find-module-webapck_1.png" alt="오류 내용"></p><p>해결방법은 해당 프로젝트 경로에서 <strong>npm link webpack</strong> 명령을 입력하여 글로벌 모듈 webpack을 현재 프로젝트에서 require할수 있게 설정해주면 정상 동작 한다.</p><p><img src="/images/20181107-webpack-error-Cannot-find-module-webapck_2.png" alt="npm link webpack 결과"></p><p>webpack 설정파일이 없어서 에러가 나오긴 하는데 동작하지 않던 webpack 명령어가 동작하는 것을 확인 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> module </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 개발용 내장 웹서버 패키지(atom-live-server)</title>
      <link href="/2018/11/06/atom-20181106-atom-live-server/"/>
      <url>/2018/11/06/atom-20181106-atom-live-server/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Atom개발툴로 html기반의 정적 웹을 실시간으로 그 결과를 볼수 있는 atom-live-server 라는 패키지가 있다.<br>단순힌 웹 개발을 할때 아주 편하게 사용 할 수 있다.</p><p>일단 atom 툴을 키고 File - Settings - Install 로 이동하여 atom-live-server 를 검색하여 설치하자.</p><p><img src="/images/20181106-atom-live-server_1.png" alt="난 이미 설치가 되어있어서 install 버튼이 안보이지만, Uninstall 대신 Install 버튼이 보일것이다."></p><p>설치를 끝낸 다음에</p><p><img src="/images/20181106-atom-live-server_2.png" alt="빨간 부분을 클릭하면 자세한 해당 패키지의 자세한 설명이 나온다."></p><p><img src="/images/20181106-atom-live-server_3.png" alt="위처럼 사용법이 자세히 나와있다."></p><p>대충 보니 ctrl-alt-3 키드를 한꺼번에 누르면 3000번 서버로 서버를 실행하고, ctrl-alt-q를 누르면 실행중인 웹서버를 종료하는 것 같다.</p><p><img src="/images/20181106-atom-live-server_4.png" alt="테스트용 부트스트랩 웹 예제프로젝트를 가져왔다."></p><p>ctrl-alt-3를 눌러보면</p><p><img src="/images/20181106-atom-live-server_5.png" alt="위처럼 웹서버가 현재 프로젝트 기준으로 동작하여 자동으로 브라우저가 열린다."></p><p>위 이미지에 동작중인 서버의 포트가 이상하게 나오는 것은 기존에 3000 포트를 사용중인 서비스가 있어서 자동으로 포트를 따준것 같다.</p><p>ctrl-alt-숫자 형식이므로 숫자를 바꿔 원하는 포트를 사용하면 될것 같다.</p><p>그리고 atom 에서 ctrl-alt-q를 눌러 서버를 종료 시키자.</p><p><img src="/images/20181106-atom-live-server_6.png" alt="이렇게 atom에서 서버의 종료를 알려준다."></p><p>위 이미지는 내가 여러번 눌러서 여러번 나온것이다.</p><p>끝!!</p>]]></content>
      
      
      <categories>
          
          <category> atom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atom </tag>
            
            <tag> atom-live-server </tag>
            
            <tag> package </tag>
            
            <tag> 패키지 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 콜백사용의 위험성(클로저 그리고 let와 for문)</title>
      <link href="/2018/11/02/javascript-20181102-javascript-callback-weakness-feat-callback-hell/"/>
      <url>/2018/11/02/javascript-20181102-javascript-callback-weakness-feat-callback-hell/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>콜백의 비동기적 프로그래밍을 사용할때 주의할점이 좀 있다.<br>자바스크립트의 클로저와 함께 사요할때 콜백사용의 주의점을 정리해보겠다.</p><h1 id="비동기-콜백사용시-클로저영역-변수-사용의-위험성"><a href="#비동기-콜백사용시-클로저영역-변수-사용의-위험성" class="headerlink" title="비동기 콜백사용시 클로저영역 변수 사용의 위험성"></a>비동기 콜백사용시 클로저영역 변수 사용의 위험성</h1><p>비동기적 실행에서 혼란스럽고 에러도 자주 일어나는 부분은 스코프와 클로저가 비동기적 실행에 영향을 미치는 부분이다.<br>함수를 호출하면 항상 클로저가 만들어진다.<br>매개변수를 포함해 함수 안에서 만든 변수는 모두 무언가가 자신에 접근할 수 있는 한 계속 존재한다.</p><p>일단 아래 코드를 보고 실행결과를 예측해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"\nCountdown start..."</span>);</span><br><span class="line">  <span class="keyword">for</span>(i =<span class="number">5</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i===<span class="number">0</span> ? <span class="string">"GO!"</span> : i);</span><br><span class="line">    &#125;, ( <span class="number">5</span> - i ) * <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countdown();</span><br></pre></td></tr></table></figure><p><img src="/images/20181102-javascript-callback-weakness-feat-callback-hell_1.png" alt="위 코드의 실행 결과"></p><p>위 코드의 실행결과를 예측했다면, 이미 당신은 자바스크립트 클로저 마스터!<br>결과를 보면 GO! 라는 문구는 아예 찍히지도 않고 -1만 6번 찍히는것을 확인 할 수 있다.</p><p>setTimeout의 호출에 사용되는 i는 정상적으로 5-5, 5-4, 5-3, 5-2, 5-1, 5-0 총 여섯번 호출된다.</p><p>문제는 setTimeout에 등록된 콜백의 호출시점과 이 콜백이 접근하는 i가 속한 클로저의 위치이다.<br>let으로 선언된 변수는 블록 스코프에 소속된다.<br>i는 현재 countdouwn 함수의 블록스코프에 소속되어 있으므로, 정작 setTimeout함수의 등록된 콜백이 실행될 시점에는 for 문에 의해 i의 값은 -1상태가 되어버린 상태이다.<br>따라서 위와 같은 결과가 나오게 된다.</p><p>위 코드에서 let i의 선언 위치를 countdouwn 함수의 블록스코프가 아니라, setTimeout을 호출하는 for문의 statement에 선언하면 정상적으로 코드가 동작하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//let i;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"\nCountdown start..."</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">5</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i===<span class="number">0</span> ? <span class="string">"GO!"</span> : i);</span><br><span class="line">    &#125;, ( <span class="number">5</span> - i ) * <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countdown();</span><br></pre></td></tr></table></figure><p><img src="/images/20181102-javascript-callback-weakness-feat-callback-hell_2.png" alt="위 코드의 실행 결과"></p><p>결과를 보면 카운팅이 정상적으로 되고 GO가 콘솔에 찍히는 것을 확인 할 수있다.</p><p>하지만 난 위 코드가 정확히 이해가 가지 않는다.<br>비록 let i 선언이 for문의 스코프에 선언되었지만,<br>정작 setTimeout의 콜백이 호출되는 시점은 for문이 종료된 시점 이다.<br>즉 이번에도 콜백에서 사용하는 i는 for문의 statement에 선언되었지만 여전히 -1이라고 생각 했었다.</p><p>여기에 대해 찾아보니 for문에서 let 변수를 선언했을때의 특이점이 있다.<br><strong>for문의 Statement에 let로 선언된 변수는 for문의 반복횟수 만큼의 클로저 영역을 생성한다.</strong><br>음 함수가 아니라 블록스코프도 클로저라고 불러도 되는지는 잘 모르겠지만…</p><p>즉 위의 코드에서 setTimeout이 호출되는 시점에 전달되는 <strong>for문 statement에 선언된 let i</strong>는 총 6번 전달되며, <strong>그 시점별로 6개의 클로저가 생성된다.</strong><br>setTimeout에 전달된 콜백은 자신이 setTimeout으로 호출될 당시의 for반복문의 클로저의 i 에 접근하게 되는 것이다.</p><p>물론 반복횟수별로 일종의 클로저 영역이 생성되므로, 브라우저 별로 성능저하가 있다고는 한다.</p><p><strong>햇갈리지 말아야 하는 점은 for문의 블록스코프에 선언된 let가 아니라 for문의 statement에 선언된 let가 위처럼 반복횟수별로 클로저를 생성한다는 것이다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//let i;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"\nCountdown start..."</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">5</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"---i:"</span>+ i);</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"----a:"</span> + a++);</span><br><span class="line">      <span class="built_in">console</span>.log(i===<span class="number">0</span> ? <span class="string">"GO!"</span> : i);</span><br><span class="line">    &#125;, ( <span class="number">5</span> - i ) * <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countdown();</span><br></pre></td></tr></table></figure><p><img src="/images/20181102-javascript-callback-weakness-feat-callback-hell_3.png" alt="위 코드의 실행 결과"></p><p>콜백이 a에 접근할 때에는 이미 for문의 동작이 모두 끝난 상태이다.<br>그리고 for문의 블록스코프에 선언된 let a는 반복횟수 만큼 생성되는 클로저의 영역에 포함되지 않는다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>promise등 콜백의 대안이 있긴 하지만, 아직도 콜백은 많이 사용되는 것 같다.<br>콜백을 사용할때 콜백이 접근할 영역의 스코프가 정확히 어디인지 주의하며 코딩할 필요가 있다.<br>끝!</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 클로저 </tag>
            
            <tag> closure </tag>
            
            <tag> let </tag>
            
            <tag> callback </tag>
            
            <tag> 콜백 </tag>
            
            <tag> 콜백단점 </tag>
            
            <tag> for </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - 오류 우선 콜백패턴 (error-first callback pattern)</title>
      <link href="/2018/11/02/javascript-20181102-javascript-error-first-callback-pattern/"/>
      <url>/2018/11/02/javascript-20181102-javascript-error-first-callback-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>오류 우선 콜백패턴(error-first callback pattern)은 자비스크립트에서 콜백을 사용할때, 콜백과 관련된 에러를 처리를 위한 일종의 코딩 약속과 같다.</p><h1 id="오류-우선-콜백패턴-error-first-callback-pattern-규칙"><a href="#오류-우선-콜백패턴-error-first-callback-pattern-규칙" class="headerlink" title="오류 우선 콜백패턴 (error-first callback pattern) 규칙"></a>오류 우선 콜백패턴 (error-first callback pattern) 규칙</h1><ol><li>콜백의 첫 번째 매개변수에 에러 객체를 사용한다.</li><li>에러가 null이나 undefined이면 정상이라고 판단한다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fname = <span class="string">"hanumoka_is_good.txt"</span>;</span><br><span class="line">fs.readFile(fname, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">`error reading file <span class="subst">$&#123;fname&#125;</span> : <span class="subst">$&#123;err.message&#125;</span>`</span>);  <span class="comment">// 반드시 return을 해야 한다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fname&#125;</span> contents: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/20181102-javascript-error-first-callback-pattern_1.png" alt="hanumoka_is_good.txt파일이 없는 상태에서 위 코드 실행결과"></p><p>위 예제는 Node에서 파일을 읽어내는 소스이다.<br>if 조건문에서 err를 판단하여, 에러내용을 콘솔에 찍고 return 한다.<br><strong>중요한 점은 return을 해야 한다는 것이다.</strong></p><p>예를 들어 hanumoka_is_good.txt 파일이 존재하지 않고, 위 소스를 동작시켰을때 err를 잡는 조건문에서 return을 하지 않는다면, hanumoka_is_good.txt파일이 있을경우 동작해야 할<br>다음 소스가 동작해 버리게 된다.</p><p>파일이 없는대도 아래 소스가 동작 한다는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fname&#125;</span> contents: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/20181102-javascript-error-first-callback-pattern_2.png" alt="hanumoka_is_good.txt파일이 없는 상태에서 return 하지 않는 경우 실행결과."></p><p>프로미스를 사용하지 않으면 오류 우선 콜백은 노드 개바의 표준이나 다름없다.<br>콜백을 사용하는 인터페이스를 만들 때는 오류 우선 콜백 패턴을 지키키면서 코딩을 해야 한다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> callback </tag>
            
            <tag> 콜백 </tag>
            
            <tag> 패턴 </tag>
            
            <tag> error-first callback </tag>
            
            <tag> pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring - Mysql - The server time zone value 관련예외</title>
      <link href="/2018/11/02/spring-20181102-spring-mysql-error-The-server-time-zone-value/"/>
      <url>/2018/11/02/spring-20181102-spring-mysql-error-The-server-time-zone-value/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>예전에 조물락 거리던 스프링 + mysql 프로젝트를 돌리려니 콘솔에서 예쁜 에러가 난다.</p><p><img src="/images/20181102-spring-mysql-error-The-server-time-zone-value_1.png" alt="mysql time zone value 관련 에러 발생"></p><p>타임존을 가져오는데 뭔가 깨져서 나온다.</p><p>하… mysql 이거 뭔가 버그와 오류가 범벅이다. </p><p>해결책은 있더라</p><p>아래처럼 xml에 설정된 mysql 접속정보 url에 serverTimezone을 아래처럼 설정하면 된다고 한다.</p><p><img src="/images/20181102-spring-mysql-error-The-server-time-zone-value_2.png" alt="그런데 이렇게 해도 뭔가 xml 설정 오류가 발생한다."></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The reference to entity "useSSL" nust end with the ';' delimiter.</span><br></pre></td></tr></table></figure><p>다시 구글링 해보니 아래처럼 설정하면된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mokaboard_dev?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20181102-spring-mysql-error-The-server-time-zone-value_3.png" alt="최종 해결 설정방법"></p><h1 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h1><p><a href="http://vvh-avv.tistory.com/79" target="_blank" rel="external nofollow noopener noreferrer">http://vvh-avv.tistory.com/79</a></p><p><a href="https://stackoverflow.com/questions/37596144/the-reference-to-entity-uselegacydatetimecode-must-end-with-the-delimiter" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/37596144/the-reference-to-entity-uselegacydatetimecode-must-end-with-the-delimiter</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mysql </tag>
            
            <tag> Exception </tag>
            
            <tag> The server time zone </tag>
            
            <tag> serverTimezone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10 - error DPC WatchDog Violation 해결하기</title>
      <link href="/2018/10/31/windows-20181031-Windows10-error-DPC-WatchDog-Violation/"/>
      <url>/2018/10/31/windows-20181031-Windows10-error-DPC-WatchDog-Violation/</url>
      
        <content type="html"><![CDATA[<h1 id="20181208-추가"><a href="#20181208-추가" class="headerlink" title="20181208 추가"></a>20181208 추가</h1><p>아래 방법으로 해결 안됨.<br>원인 아직 모름.<br>얼마전에 추가한 알파스캔 dp 모니터가 문제일지도 모른다는 생각이 됨.(현재 트리플 모니터 구성)</p><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Windows10 64bit pro를 데스크탑에 사용중이다.<br>얼마전부터 윈도우가 갑작이 프리징되고, 조금 시간이 지나면 블루스크린과 error DPC WatchDog Violation라는 에러메세지가 발생했다.</p><p>인터넷을 찾아보니 여러가지 발생이유가 있었다.<br>메인보드 드라이버, 바이오스<br>기타 드라이버 등등</p><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p><a href="https://answers.microsoft.com/ko-kr/windows/forum/windows_10-performance-winpc/dpc-watchdog/39f9d597-b238-4364-9f23-3e652e8eac0a" target="_blank" rel="external nofollow noopener noreferrer">https://answers.microsoft.com/ko-kr/windows/forum/windows_10-performance-winpc/dpc-watchdog/39f9d597-b238-4364-9f23-3e652e8eac0a</a></p><p><a href="https://www.youtube.com/watch?v=9otxh2qi7ys" target="_blank" rel="external nofollow noopener noreferrer">https://www.youtube.com/watch?v=9otxh2qi7ys</a></p><p>위 두개의 글을 참고했다.</p><p>일단.</p><p>관리자 모드로 cmd 를 열어서. </p><p>아래 명령 입력후 엔터.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dism /online /cleanup-image /restorehealth</span><br></pre></td></tr></table></figure><p>뭔가 검사를 한다. 시간이 좀 걸린다.<br>검사가 완료되면 다음 명령을 입력하고 엔터.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfc &#x2F;scannow</span><br></pre></td></tr></table></figure><p>마찬가지로 시간이 걸린다.</p><p><img src="/images/20181031-Windows10-error-DPC-WatchDog-Violation_1.png" alt="내경우 위처럼 결과가 나왔다. 뭔가 손상이 있었다고 하는데... 흐음"></p><p>그리고 한가지 더 작업을 했다.</p><p>SATA AHCI 컨트롤 드라이버 업데이트를 해야한다.</p><p>제어판에 장치관리자에서 다음과 같이 표준 SATA AHCI 컨트롤을 찾는다.</p><p><img src="/images/20181031-Windows10-error-DPC-WatchDog-Violation_2.png" alt="이걸 마우스 우클릭하여 드라이버 업데이트를 클릭한다."></p><p><img src="/images/20181031-Windows10-error-DPC-WatchDog-Violation_3.png" alt="컴퓨터에서 드라이버 소프트웨어 검색을 클릭"></p><p><img src="/images/20181031-Windows10-error-DPC-WatchDog-Violation_4.png" alt="컴퓨터의 사용 가능한 드라이버 목록에서 직접 선택 클릭"></p><p><img src="/images/20181031-Windows10-error-DPC-WatchDog-Violation_5.png" alt="표준 SATA AHCI 컨트롤러 선택후 다음 클릭"></p><p>위 까지 하면 업데이트를 하고 컴퓨터 리부팅을 한다.</p><p>위 두가지 작업을했으며, 아직까지 동일한 증상의 문제는 발생하지 않고 있다.</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> windows10 </tag>
            
            <tag> 블루스크린 </tag>
            
            <tag> DPC WatchDog Violation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 콜백함수(Callback function)이란?</title>
      <link href="/2018/10/24/javascript-20181024-javascript-callback/"/>
      <url>/2018/10/24/javascript-20181024-javascript-callback/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Callback 함수를 모르지는 않는다. 하지만 잘 안다고 말할수도 없다.<br>요즘 Node, Vue 등을 공부하면서 callback 함수의 진화형인 Promise, async 등을 접했고 곧 벽에 막혔다.<br>이 글을 통해 Javascript callback 함수를 제대로 공부하고, 정리하고자 한다.</p><h1 id="CallBack-콜백함수란"><a href="#CallBack-콜백함수란" class="headerlink" title="CallBack 콜백함수란"></a>CallBack 콜백함수란</h1><p>CallBack 함수란 이름 그대로 나중에 호출되는 함수를 말한다.<br>콜백함수라고 해서 그 자체로 특별한 선언이나 문법적 특징을 가지고 있지는 않다.<br>콜백함수도 일반적인 자바스크립트 함수일 뿐이다.<br>콜백 함수는 코드를 통해 명시적으로 호출하는 함수가 아니라, 개발자는 단지 함수를 동록하기만 하고, <strong>어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출하는 함수를 말한다.</strong><br>즉 콜백함수는 콜백함수라는 유니크한 문법적 특징을 가지고 있는 것이 아니라, 호출방식에 의한 구분이다.</p><p>대표적인 콜백 함수의 사용 예로는 자바스크립트에서 이벤트 핸들러 처리이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button1"</span> <span class="attr">onclick</span>=<span class="string">"button1_click();"</span>&gt;</span>버튼1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">button1_click</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"버튼1을 누르셨습니다."</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Html에 onclick에 button1_click함수는 브라우저의 javascript API에서 DOM 이벤트 핸들러에 전달(등록)되고, 해당 버튼에 클릭이벤트가 발생했을 이벤트 핸들러가 콜백함수를 호출한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"#target"</span> ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Handler for .click() called."</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위처럼 Jquery에서도 콜백함수를 자주 사용하게 된다.</p><p>콜백함수란 특정함수에 전달되어 특정함수가 어떤조건에 의해 호출하는 함수라고 후려칠수 있겠다.</p><hr><h1 id="Callback을-활용한-비동기적-프로그래밍"><a href="#Callback을-활용한-비동기적-프로그래밍" class="headerlink" title="Callback을 활용한 비동기적 프로그래밍"></a>Callback을 활용한 비동기적 프로그래밍</h1><p>Callback 함수를 사용하는 이유는, 자바스크립트에서 비동기적 프로그래밍을 할수 있기 때문이다.<br>이 콜백함수기법은 자바스크립트에서 가장 오래된 비동기적 메커니즘이라고 한다.</p><p><strong>비동기적 테크닉</strong> : 소중한 싱글스레드의 멈춤을 방지한다. 즉 블록킹을 방지하여 싱글스레드가 논블록킹으로 동작하게 한다.</p><p>비동기적 프로그래밍이 필요한 이유는 다음과 같다.</p><h2 id="비동기적-테크닉을-사용하는-경우"><a href="#비동기적-테크닉을-사용하는-경우" class="headerlink" title="비동기적 테크닉을 사용하는 경우"></a>비동기적 테크닉을 사용하는 경우</h2><p><strong>1.사용자 이벤트 처리</strong></p><p>브라우저 화면에서 발생하는 사용자의 이벤트는 예측이 불가능하다.<br>따라서 이런 화면이벤트를 관리담당하는 녀석에게 우리는 특정이벤트가 발생할 때 호출을 원하는 내용을 callback 함수에 전달하게 된다.</p><p><strong>2.네트워크 응답 처리</strong></p><p>화면단에서 서버에게 요청을 보냈을 때, 그 응답이 언제 올지 알 수 없다.<br>따라서 이런 서버에 대한 응답처리 등도 비동기적으로 처리해야 한다.</p><p><strong>3.파일을 읽고 쓰는 등의 파일 시스템 작업</strong></p><p><strong>4.의도적으로 시간 지연을 사용하는 기능(알람 등)</strong></p><p>위와 같이 이벤트 등을 기다리는데 하나뿐인 소중한 스레드를 사용한다면, 또 서버의 응답을 기다리기 위해 하나뿐인 소중한 스레드를 사용한다면…<br>사용자는 멈춰져 있는 화면을 보게되는 것이다.<br>위와 같이 스레드의 블록킹을 야기하는 작업은 필수적으로 비동기적 프로그래밍을 해야 한다.</p><hr><h1 id="Callback-함수의-비동기적-사용의-예"><a href="#Callback-함수의-비동기적-사용의-예" class="headerlink" title="Callback 함수의 비동기적 사용의 예"></a>Callback 함수의 비동기적 사용의 예</h1><p>콜백 함수는 일반적으로 다른 함수에 넘기거나 객체의 프로퍼티로 사용한다.<br>드물게는 배열에 넣어서 쓸 때도 있다.<br>항상 그런건 아니지만 보통의 콜백함수는 익명함수로 사용한다.</p><p>중요한 점은 콜백함수는 그냥 일반적인 함수이다.<br>우리는 비동기적 프로그래밍을 하기 위해서는, <strong>비동기적으로 콜백함수를 호출하는 함수</strong>에게 <strong>비동기적으로 호출되기를 원하는 코드</strong>를 <strong>콜백함수</strong>에 담아서 전달해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn_fakeAsync</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  calback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"------- fn_fakeAsync 호출 직전 -------"</span>);</span><br><span class="line"></span><br><span class="line">fn_fakeAsync(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"이게 비동기적으로 동작하길 바래"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"------- fn_fakeAsync 호출 이후 -------"</span>);</span><br></pre></td></tr></table></figure><p>위 코드 결과</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------- fn_fakeAsync 호출 직전 -------</span><br><span class="line">이게 비동기적으로 동작하길 바래</span><br><span class="line">------- fn_fakeAsync 호출 이후 ------</span><br></pre></td></tr></table></figure><p>위처럼 단순히 아무 함수에게나 콜백함수를 전달하여 호출시키는 것으로는 비동기적으로 콜백함수를 호출 할수 없다.</p><p>다시한번 말하지만 자바스크립트에서 비동기프로그래밍을 하려면 <strong>비동기적으로 콜백함수를 호출하는 함수</strong>와 <strong>비동기적으로 호출되기를 원하는 콜백함수</strong>가 필요하다.</p><p>그럼 비동기적으로 콜백함수를 실행하는 시스템 함수들을 알아보자.</p><h2 id="setTimeout-함수"><a href="#setTimeout-함수" class="headerlink" title="setTimeout 함수"></a>setTimeout 함수</h2><p>setTimeout은 콜백함수의 실행을 지정된 밀리초만큼 지연하는 내장함수이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn_newCallBack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"비동기적으로 호출되고 싶다."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 직전 -------"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(fn_newCallBack, <span class="number">3</span> * <span class="number">1000</span>); <span class="comment">// 3초 뒤 콜백 호출</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 이후 -------"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------  호출 직전 -------</span><br><span class="line">-------  호출 이후 -------</span><br><span class="line">비동기적으로 호출되고 싶다.</span><br></pre></td></tr></table></figure><p>3초뒤에 fn_newCallBack함수가 호출되는 것을 확인 할 수 있다.<br>여기서 이게 무슨 비동기적 프로그래밍인지 갸웃 할수 있다.</p><p>동기적 프로그래밍에서 만약 3초뒤에 fn_newCallBack를 호출시키려 한다면, 3초를 자바스크립트의 하나뿐인 메인스레드가 카운팅을 하고 있어야 한다.<br>즉 프로그래밍이 멈추는 것이다.<br>setTimeout함수는 메인스레드가 할일을 자바스크립트 API에게 위임시킴으로써 메인쓰레드의 멈춤(블록킹)을 피하게 해준다.</p><p>다음 예제를 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn_newCallBack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"비동기적으로 호출되고 싶다."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 직전 -------"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(fn_newCallBack, <span class="number">0</span>); <span class="comment">// 즉시 실행되지 않을까?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 이후 -------"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------  호출 직전 -------</span><br><span class="line">-------  호출 이후 -------</span><br><span class="line">비동기적으로 호출되고 싶다.</span><br></pre></td></tr></table></figure><p>위 코드를 보면 setTimeout함수에 지연시간을 0으로 설정하여 즉시 실행하게 하였다.<br>그 결과를 보면 3초 셋팅과 마찬가지로 맨 마지막에 호출되는 것을 확인 할 수 있다.<br>물론 딜레이 없이 console에 찍히는것은 3초 셋팅과 다르긴 하다.<br>음 setTimeout에 지연시간을 0으로해도 내장으로 지연시간이 있는 것일까?</p><p>그렇다면 다음코드는 어떻까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn_newCallBack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"비동기적으로 호출되고 싶다."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 직전 -------"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(fn_newCallBack, <span class="number">0</span>); <span class="comment">// 콜백이 언제 동작할지 예측해보자.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-------  호출 이후 -------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//무한로프로 콘솔을 찍어낸다.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"한국 일교차 너무해..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드를 실행하면 while문의 콘솔이 무한히 찍기고 fn_newCallBack함수는 절대 호출되지 않는다.<br>이게 무슨 말일까?</p><p>javascript의 비동기적 동작을 이 글에서 다 설명하기에는 너무 빡세니, 간단히 설명해보겠다.<br>setTimeout함수에 전달된 콜백함수는 javascript 실행환경의 어느 바구니에 담겨진다.<br>그러면 javascript API가 setTimeout의 지연시간을 보고 카운팅을 대신 해준다.</p><p>음? 그런데 지연시간이 0이네? javascript API는 이 콜백함수를 바구니에 꺼내서, TaskQueue라는 곳에 적재한다.<br>이 TaskQueue는 현재 동작중인 메인스레드가 일을 다 끝내면, 다음으로 해야할 일들이 있는 Queue이다.</p><p>즉 위 코드에서 while의 무한루프로 메인스레드가 자기일을 끝내지 못하기 때문에 TaskQueue에 적재된 콜백함수가 호출되지 못하는 것이다.</p><p>여기서 중요한 점은 setTimeout과 같은 비동기적으로 콜백을 호출 시켜주는 함수는, 전달된 콜백함수를 현재 실행중인 싱글스레드에서 뽑아내어 특정 장소에 보관하고 특정 조건을 만족시킬때 호출이 가능하게 한다는 점이다.<br>setTimeout은 시간을 카운팅하는 기능 외에, 콜백함수를 비동기영역으로 넘기는 역할을 하는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//나라의 말이 중국과 달라</span></span><br><span class="line">  <span class="comment">//문자와 서로 맞지 아니해서</span></span><br><span class="line">  <span class="comment">//이러한 까닭으로 어리석은 백성이 말하고자 할 바가 있어도</span></span><br><span class="line">  <span class="comment">//마침내 제 뜻을 능히 펴지 못하는 사람이 많으니라</span></span><br><span class="line">  <span class="comment">//내 이를 위하여 가엾게 여겨</span></span><br><span class="line">  <span class="comment">//새로 스물여떯 자를 만드노니</span></span><br><span class="line">  <span class="comment">//사람마다 하여금 쉬이 익혀 날로 쓰며 편안케 하고자 할 다름이니라</span></span><br><span class="line">&#125;</span><br><span class="line">, <span class="number">1000</span> * <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>setTimeout에 콜백으로 익명함수를 주로 사용하는데 익명함수가 길어질 경우 두번째 인자를 식별하기 어려울 수 있다.<br>다라서 위처럼 두번째 식별인자는 마지막 행에 분리하는 것이 사용팁이다.</p><h2 id="setInterval함수와-clearInterval함수"><a href="#setInterval함수와-clearInterval함수" class="headerlink" title="setInterval함수와 clearInterval함수"></a>setInterval함수와 clearInterval함수</h2><p>setInterval도 setTimeout과 같이 콜백을 비동기적으로 호출 가능하게 해주는 함수이다.<br>차이점은 지정된 시간을 기준으로 반복적으로 콜백을 호출해준다는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(i === <span class="number">3</span>) <span class="keyword">return</span> clearInterval(interbalId);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i++&#125;</span>: 인터벌로 호출 되는 콜백입니다.`</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">, <span class="number">5</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/20181024-javascript-callback_1.png" alt="setInterval 실행결과"></p><p>위 코드에서 console.log 내부에 문자열을 감싼 것은 싱글쿼터가 아니라 백틱(키보드 esc 아래에 있음)이다.<br>Es2015 부터 백틱을 사용하여 위 처럼 템플릿 문자열을 사용 할 수 있다.</p><p>setInterval의 기능은 단순하다 중요한 것은 고유의 intervalId를 리턴하고 이것을 clearInterval 함수에 넘겨 해당 setInterval을 중지시킬수 있다.<br>특시 Node등 서버단에서 setInterval를 사용할 경우 반드시 clearInterval로 인터벌을 정지시키지 않을경우 서버 메모리 누수가 발생할 수도 있으니 주의해야 한다.</p><p>지금까지 setTimeout, setInterval, clearInterval등은 모두 전역 객체(브라우저에서는 Window, 노드에서는 global)에 정의 되어 있으므로 어디서나 사용할 수 있다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>setTimeout 등을 이용하여 javascript의 콜백함수의 비동기적 용법에 대해 간단히 알아보았다.<br>콜백을 사용할때 주의할점과, 문제점등 정리할 것이 많이 있지만 글이 너무 길어지는 것 같아 줄인다.<br>다음 글에서 나머지 것들을 정리해 보겠다.</p><h1 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h1><p><a href="/2018/10/06/javascript-20181006-javascript-callback/">자바스크립트 동기, 비동기 프로그래밍</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 비동기 </tag>
            
            <tag> callback </tag>
            
            <tag> 콜백함수 </tag>
            
            <tag> setTimeout </tag>
            
            <tag> setInterval </tag>
            
            <tag> clearInterval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Windows10에 설치하기</title>
      <link href="/2018/10/21/mysql-20181021-mysql-install-at-windows/"/>
      <url>/2018/10/21/mysql-20181021-mysql-install-at-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>windows10 pro 에 mysql 서버를 설치하는 글이다.</p><p>mysql 8.0.12 버전을 설치했다.</p><h1 id="Mysql-설치파일-다운로드하기"><a href="#Mysql-설치파일-다운로드하기" class="headerlink" title="Mysql 설치파일 다운로드하기"></a>Mysql 설치파일 다운로드하기</h1><p><a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="external nofollow noopener noreferrer">https://dev.mysql.com/downloads/installer/</a> 로 이동.</p><p><img src="/images/20181021-mysql-install-at-windows_1.png" alt="원하는 OS를 선택하고 mysql installer를 다운로드하자."></p><p>installer를 설치하면 mysql과 더불어 그에 관련된 응용프로그램을 선택적으로 다운로드 받아서 설치 할 수 있다.</p><p>회원가입을 유도하지만, 그냥 다운로드가 가능하다.</p><h1 id="mysql-installer-실행시-upgrade-화면"><a href="#mysql-installer-실행시-upgrade-화면" class="headerlink" title="mysql installer 실행시 upgrade 화면"></a>mysql installer 실행시 upgrade 화면</h1><p>installer가 편한것이 기존에 설치된 mysql 관련 프로그램들이 업그레이드가 가능할경우 아주 쉽게 업그레이드를 할 수 있다.</p><p>만약 기존에 mysql관련 프로그램이 설치되어 있다면 다음과 같이 mysql 업그레이드 과정을 거칠수도 있다.</p><p>물론 mysql 관련된 것이 없다면 그냥 넘어갈 것이다.</p><p>나와 같은경우 mysql 서버는 설치되어 있지 않지만, 기존에 mysql workbench가 설치되어 있어서 다음과 같이 업그레이드 할 프로그램이 있다고 알려준다.</p><p>필요한 경우 업그레이드 해주자.</p><p><img src="/images/20181021-mysql-install-at-windows_2.png" alt="인스톨러를 실행했을때, 기존에 설치된 mysql관련 프로그램의 업그레이드가 있는경우 이처럼 업그레이드 화면으로 넘어갈 것이냐고 물어본다."></p><p><img src="/images/20181021-mysql-install-at-windows_3.png" alt="mysql installer 업그레이드 진입화면"></p><p><img src="/images/20181021-mysql-install-at-windows_4.png" alt="이렇게 기존에 설치된 것중 업그레이드가 가능한 것들이 나온다."></p><p>업그레이드를 해주자. </p><p>업그레이드가 완료되면 다음과 같이 본격적으로 mysql 서버를 설치 할수 있는 installer 가 열린다.</p><p><img src="/images/20181021-mysql-install-at-windows_5.png" alt="이미 설치된 mysql workbench가 보인다."></p><h1 id="mysql-서버-설치하기"><a href="#mysql-서버-설치하기" class="headerlink" title="mysql 서버 설치하기"></a>mysql 서버 설치하기</h1><p><img src="/images/20181021-mysql-install-at-windows_5.png" alt="add 버튼을 누르자."></p><p><img src="/images/20181021-mysql-install-at-windows_6.png" alt="mysql installer adding community로 넘어간다."></p><p>동의하고 next!</p><p><img src="/images/20181021-mysql-install-at-windows_7.png" alt="mysql 관련되어 설치할수 있는 것들이 왼쪽에 나온다."></p><p>mysql server에서 서버를 선택하고 오른쪽 방향 화살표를 눌러 오른쪽으로 옮겨주자.</p><p>그리고 필요하다면 Applications에서 mysql workbench도 선택해서 설치 할수 있다.</p><p>다음 화면이 나오는데 그냥 Execute를 눌러 넘어가자.</p><p>그리고 next를 두번정도 너 누르면 다음과 같은 화면이 나온다.</p><p><img src="/images/20181021-mysql-install-at-windows_8.png" alt="standalone mysql server를 선택하고 next버튼을 누르자."></p><p><img src="/images/20181021-mysql-install-at-windows_9.png" alt="서버의 포트 설정화면이 나오는데 그냥 next버튼을 누르자."></p><p><img src="/images/20181021-mysql-install-at-windows_10.png" alt="권한관리 설정 화면이 나온다."></p><p>8버전 부터 생긴것 같은데 뭔가 강화된 비밀번호 암호화가 추천된다고 하지만, 다른 시스템과 호환성이 떨어진다는 말이 있다.<br>(일단 위 설정으로 설치하면 8버전 이전의 workbench는 접속이 안되었던 기억이 있다.)</p><p>아래 기존방식을 선택하고 next를 누르자.</p><p><img src="/images/20181021-mysql-install-at-windows_11.png" alt="root 계정의 비밀번호를 입력하고 next 버튼을 누르자."><br>root계정의 비밀번호는 당연히 반드시 기억하자.</p><p><img src="/images/20181021-mysql-install-at-windows_12.png" alt="windows 서비스 설정 관련 화면이다."><br>나는 mysql서버를 키고 끄는게 귀찮아 그냥 디폴트로 next 버튼을 눌렀다.</p><p>그리고 excute -&gt; next 를 누르자.</p><p><img src="/images/20181021-mysql-install-at-windows_13.png" alt="설치가 완료되면 이렇게 mysql server가 설치된 것을 확인 할 수 있다."></p><p>설치 끝!</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysql installer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows에 mongoDB , mongodb compass 설치하기</title>
      <link href="/2018/10/18/mongodb-20181018-mongodb-install-at-windows/"/>
      <url>/2018/10/18/mongodb-20181018-mongodb-install-at-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>windows10 64 환경에 mongoDB와 compass를 설치하는 글이다.<br>mongodb에 대해 자세히 모르기때문에, 계정생성과 mongodb compass로 접속하기 까지의 내용이다.</p><h1 id="mongoDB-설치하기"><a href="#mongoDB-설치하기" class="headerlink" title="mongoDB 설치하기"></a>mongoDB 설치하기</h1><p><a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external nofollow noopener noreferrer">https://www.mongodb.com/download-center#community</a> 로 이동해서 설치를 원하는 환경을 선택하고 설치파일을 다운로드 한다.</p><p><img src="/images/20181018-mongodb-install-at-windows.png" alt="mongodb 설치파일 다운로드"></p><p>다운로드 한 설치파일을 실행하자.</p><p><img src="/images/20181018-mongodb-install-at-windows_1.png" alt="mongodb 설치 1"></p><p><img src="/images/20181018-mongodb-install-at-windows_2.png" alt="mongodb 설치 2"></p><p><img src="/images/20181018-mongodb-install-at-windows_3.png" alt="mongodb 설치 3"></p><p><img src="/images/20181018-mongodb-install-at-windows_4.png" alt="mongodb 설치 4"></p><p><img src="/images/20181018-mongodb-install-at-windows_5.png" alt="mongodb 설치 5 - install MongoDB Compass 부분을 체크한다."></p><p>이건 내가 잘 모르겠는데, 원래 mongodb 설치할때 같이 Compass(mongodb gui tool)를 설치할수 있다고 한다.<br>그런데 대체 어디에 설치되는지 모르겠어서 나중에 Compass만 추가로 설치할 것이다.</p><p>나머지 부분은 그냥 next, next 하다보면 설치가 완료된다.</p><h1 id="mongoDB-동작준비"><a href="#mongoDB-동작준비" class="headerlink" title="mongoDB 동작준비"></a>mongoDB 동작준비</h1><p>반드시 <strong>C:\data\db 폴더를 생성해야 한다.</strong><br>이부분도 정확히는 모르겠으나, Windows환경에서 mongodb가 동작하면서 생성하는 데이터베이스 정보를 관리하는 파일시스템 경로인것 같다.</p><p><img src="/images/20181018-mongodb-install-at-windows_9.png" alt="C:\data\db 폴더를 생성하자."><br>위 이미지에 폴더 내부에 생성된 파일들은 mongodb 서버가 동작하면서 자동으로 생성해준 파일이다.<br>지금은 폴더를 만들었으니, 비어져 있어야 할 것이다.</p><h1 id="mongoDB-서버-동작-시키기"><a href="#mongoDB-서버-동작-시키기" class="headerlink" title="mongoDB 서버 동작 시키기"></a>mongoDB 서버 동작 시키기</h1><p>mongoDB를 설치해서 그 경로에 가보면 C:\Program Files\MongoDB\Server\4.0\bin<br>크게 mongoDB 서버를 실행하는 mongod.exe와 클라이언트 쉘을 실행하는 mongo.exe를 볼 수 있다.<br>음 찾아보니 mongo.exe 쉡을 실행하려면 mongod.exe를 먼저 실행해야 한다고 한다.</p><p><img src="/images/20181018-mongodb-install-at-windows_10.png" alt="mongdo.exe파일과 mongod.exe파일"></p><p>cmd 창에서 mongod.exe를 먼저 실행하자.<br>주의 할 점은 C:\data\db 폴더를 미리 생성했어야 한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Program Files\MongoDB\Server\4.0\bin</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p><img src="/images/20181018-mongodb-install-at-windows_11.png" alt="mongod.exe 실행화면 "></p><p>로컬호스트의 27017포트로 서버가 실행되는 것을 확인 할수 있으며, 쉘로 진입한다.<br>이때 아까 생성했던 C:\data\db 폴더내부에 파일들이 생성되는 것을 확인 할 수 있다.</p><p>이 쉘에서 관리자 모드로 접속해서 관리자권한이 있는 계정을 하나 만들어보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user:'hanumoka', pwd:'password', roles:['root']&#125;)</span><br></pre></td></tr></table></figure><p>mongo.exe 명령으로 방금 만든 계정으로 접속이 가능하나, 명령어를 사용하는 부분은 아직 잘 몰라 넘어가고 mongoDB Compass를 사용해보자.</p><h1 id="mongoDB-Compass-설치하기"><a href="#mongoDB-Compass-설치하기" class="headerlink" title="mongoDB Compass 설치하기"></a>mongoDB Compass 설치하기</h1><p><a href="https://www.mongodb.com/download-center#compass" target="_blank" rel="external nofollow noopener noreferrer">https://www.mongodb.com/download-center#compass</a> 로 이동해서 versions를 Community Edition Stable을 선택하고 platforms를 선택하고, 설치파일을 다운로드 하자.</p><p><img src="/images/20181018-mongodb-install-at-windows_6.png" alt="mongodb compass 설치 1"></p><p><img src="/images/20181018-mongodb-install-at-windows_7.png" alt="설치파일을 실행하면 바로 설치가 자동으로 되며, compass가 실행된다."></p><p><img src="/images/20181018-mongodb-install-at-windows_8.png" alt="mongodb compass가 설치된것을 확인 할 수 있다."></p><p>mongodb 설치할 때, mongodb compass를 같이 설치할때는 위처럼 설치된 내용을 확인 할수 없었다. 크흠….. 뭐지</p><p>여튼 mongoDB Compass도 설치가 완료되었다.</p><h1 id="mongoDB-Compass로-서버에-접속하기"><a href="#mongoDB-Compass로-서버에-접속하기" class="headerlink" title="mongoDB Compass로 서버에 접속하기"></a>mongoDB Compass로 서버에 접속하기</h1><p>설치한 mongoDB Compass를 실행하고 위에서 생성한 계정으로 접속해 보자.</p><p><img src="/images/20181018-mongodb-install-at-windows_12.png" alt="New Connection을 선택하고 정보를 입력하고 Connect를 클릭하자."></p><p><img src="/images/20181018-mongodb-install-at-windows_13.png" alt="접속이 되는 것을 확인 할 수있다."></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>mongodb에 정확히 모르고 node를 배우는 겸, 그 내용을 정리한 글이라 엉성하다.</p><p>위 작업을 할때 발생한 이슈가 좀 있다.</p><p>mongod.exe는 mongodb 서버를 실행하는 파일이다.<br>따라서 pc를 켜고 mongod.exe를 실행하고 mongo.exe 쉘을 통해 db 서버를 사용해야 한다.</p><p>하지만 mongodb compass를 실행하면 mongodb compass 특성인지 실행시 자동으로 mongo server를 실행시켜주는 느낌이다.<br>이것저것 테스트 해본다고 mongodb compass와 mongod.exe를 만지다보니 connection이 꼬였는지 먹통이 되기도 한다.<br>이럴때에는 작업관리자에서 mongodb compass와 mongodb관련 프로세스, 서비스를 다 죽이고 mongoDB 서비스를 재시작후에 mongodb compass를 사용하면 접속이 된다.<br>하지만 이때 mongod.exe를 실행하니 접속을 못하고 있다.<br>음 뭔가 더 공부해보고 싶은데, 일단 보던 node 부터 마무리 지어야 겠다.</p><p>책을 한권 사볼까 하는데 이제 4버전이 나왔다. 4버전 책이나오면 한권 읽어봐야 겠다.<br>4버전 부터 트랜젝션 기능을 제공한다고 하니….</p>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongo.exe </tag>
            
            <tag> mongod.exe </tag>
            
            <tag> mongodb compass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 동기(synchronous), 비동기(asynchronous) 프로그래밍</title>
      <link href="/2018/10/06/javascript-20181006-javascript-callback/"/>
      <url>/2018/10/06/javascript-20181006-javascript-callback/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이 글은 자바스크립트의 동기(asynchronous) + 블록킹, 비동기 + 논블록킹 구조에 대한 설명이다.</p><h2 id="동기-synchronous-와-블록킹-Bloking-이란"><a href="#동기-synchronous-와-블록킹-Bloking-이란" class="headerlink" title="동기 synchronous 와 블록킹 Bloking 이란"></a>동기 synchronous 와 블록킹 Bloking 이란</h2><p>일단 동기적인 동작의 예를 식당과 주방장을 통해 들어보겠다.</p><blockquote><p>일단 중국집이 하나 있고 이 중국집에는 한명의 주방장이 요리를 한다고 가정하자.<br>군만두 한 접시를 만들어 달라는 주문서가 도착했다.<br>이 군만두는 냉동재료라서 전자레인지를 사용해야 한다.<br>하지만 전자레인지의 타이머가 고장이 난 상태이다.<br>주방장은 전자레인지에 만두를 넣고 전자레인지를 동작시킨뒤, 자신의 손목시계를 보며 3분을 기다린다.<br>그때 홀에서 짜장면 3그릇 추가라는 주문이 추가로 도착했다.<br>하지만 주방장은 고장난 전자레인지 때문에 한눈을 팔수가 없다.<br>3분동안 주방에서는 어떤 다른 음식이 만들어지기는 커녕 계속 주문이 쌓이게 된다.<br>이걸 보는 중국집 사장님은 속이 타들어 간다.<br>내일 저 망할 전자레인지를 어떻게든 해야 겠다고 다짐한다.</p></blockquote><p>본론으로 돌아와서, 동기적인 소스코드의 예를 보면…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 시작...'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run1 동작...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run1();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 종료...'</span>);</span><br></pre></td></tr></table></figure><p>위 코드를 실행하면 호출된 순서대로 실행되는 것을 확인 할 수 있다.(함수선언문을 호출과 착각하지 말자.)</p><p>이것이 코드의 동기적인 동작이다.</p><p><img src="/images/20181006-javascript-callback_1.png" alt="동기적 코드의 실행결과"></p><p>쓰레드를 이용하여 위 코드를 표현하면 다음과 같을 것이다.</p><p><img src="/images/20181006-javascript-callback_2.png" alt="동기적 코드의 쓰레드의 흐름"></p><p>동기적 코드의 동작은 시간의 흐름대로 순서를 지키며 진행되기 때문에 익숙하고, 이해하기 쉽다.</p><p>하지만 javascript 코드의 실행환경이 싱글쓰레드 기반이기 때문에, <strong>싱글 쓰레드 실행환경에서 이런 동기적인 코드</strong>를 사용할 때 쓰레드의 <strong>블록킹(blocking) 현상</strong>이 발생한다.<br>다음 코드를 보면…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 시작...'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run1 동작...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//실행이 종료 될때까지 오랜시간이 걸리는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run2 동작...'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'서버로 부터 50mb 정도의 파일을 다운로드 합니다.'</span>);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    파일을 다운로드 하는 로직 대략 1분이 소요됨.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run1();</span><br><span class="line">run2();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 종료...'</span>);</span><br></pre></td></tr></table></figure><p>run2 메소드는 파일을 서버로 부터 다운받는 함수라고 하자, 그리고 파일을 다운로드 받는데 대략 1분의 시간이 걸린다고 가정하자.</p><p>위 코드를 실행하게 되면</p><p><img src="/images/20181006-javascript-callback_3.png" alt></p><p>위처럼 동작하고 1분정도를 기다리면 나머지 코드가 아래처럼 실행 될 것이다.</p><p><img src="/images/20181006-javascript-callback_4.png" alt></p><p>위 동작을 쓰레드로 표현해 보자면 다음과 같다.</p><p><img src="/images/20181006-javascript-callback_5.png" alt="run2함수는 쓰레드의 흐름을 막아(blocking)버린다."></p><p>즉, <strong>싱글쓰레드</strong> + <strong>동기적 코드의 흐름</strong> + <strong>동작시간이 오래걸리는 함수의 호출</strong>은 쓰레드의 블록킹(blocking)을 발생 시킨다.</p><p>위 코드가 시간의 흐름에 따라, Call stack이 어떻게 변하는지 확인해 보자.</p><p>위 동작을 javascript 호출 스택으로 살펴보면 다음과 같다.</p><p><img src="/images/20181006-javascript-callback_a_1.png" alt="a_1"><br><img src="/images/20181006-javascript-callback_a_2.png" alt="a_2"><br><img src="/images/20181006-javascript-callback_a_3.png" alt="a_3"><br><img src="/images/20181006-javascript-callback_a_4.png" alt="a_4"><br><img src="/images/20181006-javascript-callback_a_5.png" alt="a_5"><br><img src="/images/20181006-javascript-callback_a_6.png" alt="a_6"><br><img src="/images/20181006-javascript-callback_a_7.png" alt="a_7"><br><img src="/images/20181006-javascript-callback_a_8.png" alt="a_8"><br><img src="/images/20181006-javascript-callback_a_9.png" alt="a_9"><br><img src="/images/20181006-javascript-callback_a_10.png" alt="a_10"><br><img src="/images/20181006-javascript-callback_a_11.png" alt="a_11"><br><img src="/images/20181006-javascript-callback_a_12.png" alt="a_12"><br><img src="/images/20181006-javascript-callback_a_13.png" alt="a_13"></p><p>이 쓰레드의 블록킹은 프로그램의 흐름의 멈춤을 의미하며, 사용자는 프로그램이 먹통이 되어버렸다고 느낄 것이다.</p><p>설명의 편의를 위해 callstack의 일을 처리하는 tread를 mainthread라고 부르겠다.</p><p>ajax 통신이나, IO 프로그래밍 같이 시간이 오래걸리는 작업들이 발생할 때마다 프로그램이 멈춰버리는 것은 큰 문제가 될 것이다.</p><p><strong>위와 같은 문제를 해결하기 위해서 javascript는 멀티스레드 프로그래밍을 지원하는 것이 아니라, 싱글쓰레드에서 비동기적 프로그래밍을 javascript 실행환경의 API로 지원 한다.</strong></p><p>멀티 쓰레드 프로그래밍은 굉장히 어렵고, 복잡한 작업이다. 거기에 프로그램의 동작을 100퍼센트 예측하기는 불가능에 가깝다.<br>javascript는 이런 어려운 프로그래밍을 피하기 위해서 일부로 개발자가 제어할 수 있는 쓰레드(main thread)를 1개로 제한하고 비동기적 프로그래밍을 지원 함으로써 멀티쓰레드 프로그래밍과 비슷한 효과를 발생시킨다.</p><p>여기서 잠깐 다른 이야기를 하자면, javascript는 싱글 쓰레드로 동작 한다고들 말해서 진짜 쓰레드가 1개 뿐일거라 착각 할수 있다.<br>하지만 javascript의 실행환경은 멀티스레드이며 개발자가 javascript 코드로 제어할 수 있는 쓰레드(main tread)를 하나로 제한 하였기 때문에 javascript는 싱글 쓰레드 프로그래밍 이라고 부른다.<br>다시 본론으로 돌아가서…</p><p>이런 싱글 쓰레드환경의 동기적 코드흐름에서 발생하는 쓰레드의 blocking을 해결하기 위해 run2함수를 비동기적으로 실행시킬 필요가 생긴다.</p><h2 id="비동기-asynchronous적-동작과-논블록킹-Non-Blocking"><a href="#비동기-asynchronous적-동작과-논블록킹-Non-Blocking" class="headerlink" title="비동기 asynchronous적 동작과 논블록킹 Non Blocking"></a>비동기 asynchronous적 동작과 논블록킹 Non Blocking</h2><p>이번에는 비동기적으로 일하는 주방장의 예를 한번 들어보겠다.</p><blockquote><p>일단 중국집이 하나 있고 이 중국집에는 한명의 주방장이 요리를 한다고 가정하자.<br>중요한 것은 이 주방장이 비동기적으로 일한다는 것이다.<br>군만두 1접시 라는 주문서가 도착했다.<br>이 군만두는 냉동재료이다.<br>비동기 주방장은 군만두를 전자레인지에 넣고 타이머를 3분 맞춘뒤, 전자레인지를 돌린다.<br>그리고 다음 할일을 위해 재 자리에 돌아온다.<br>그때 홀에서 짜장면 1그릇 추가라는 주문이 추가로 도착했다.<br>주방장은 짜장면을 만든다.<br>짜장면 1그릇을 만들었을 때, 아까 돌린 전자레인지의 동작 종료를 알리는 알람이 들린다.<br>이 비동기 주방장은 만들던 짜장면 1그릇 까지만 완성하고 홀에 전달한 뒤, 전자레인지에서 만두를 꺼내서 홀에 전달한다.<br>중국집 사장님은 쉬지 않고 열심히 일하는 주방장을 보며 다음달 주방장 월급 인상을 고려하게 된다.</p></blockquote><p>위 비동기적으로 일하는 주방장을 보면 오래걸리는 특정 작업(만두 해동)들을 누군가(전자레인지)에게 미루고 자신은 계속 일을 진행한다.<br>결과적으로 1번째로 주문된 군만두 보다 2번째로 주문된 짜장면이 더 빨리 홀에 전달 되었다.<br>이렇게 호출에 순서(음식 주문 순서)와 다르게 실행(주문된 음식이 홀에 나오는것)되는 프로그래밍을 비동기적 프로그래밍이라고 한다.</p><p>이 비동기적 프로그래밍의 가장큰 장점은, 주방장이 노는 시간(mainthread이 blocking)이 없어지므로 음식주문은 밀리지 않고(프로그램은 멈추지 않고) 효율적으로 음식이 생산되게 된다.</p><p>여기서 잠깐 비동기적으로 처리해야할 작업들을 구별해보자.</p><ol><li>파일을 읽거나, 쓰기 처럼 오래걸리는 작업</li><li>ajax 통신작업</li><li>Dom의 이벤트 처리작업</li><li>일정 시간 뒤에 동작을 해야 하는 작업</li></ol><p>위 작업들을 callstack작업 처리를 담당하는 mainthread 하게 된다면, 스레드 블록킹이 발생하고 프로그램은 멈추게 된다.<br>따라서 위 작업들을 mainthread 대신 처리하는 녀석들(전자레인지 같은)이 필요하다.</p><p>javascrpit는 이런 전자레인지들을 API를 통해서 제공한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 시작...'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run1 동작...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run2 동작...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run1();</span><br><span class="line">setTimeout(run2, <span class="number">1000</span> * <span class="number">3</span>); <span class="comment">// 3초 이후에 run2 함수를 실행 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'동기적 소스코드 종료...'</span>);</span><br></pre></td></tr></table></figure><p>일단 위 코드의 결과를 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">동기적 소스코드 시작...</span><br><span class="line">run1 동작...</span><br><span class="line">동기적 소스코드 종료...</span><br><span class="line">run2 동작...</span><br></pre></td></tr></table></figure><p>동기적 소스코드 종료… 라는 문구가 run2 동작이라는 문구보다 더 빨리 출력되었다.<br>코드의 결과를 보면 자바스크립트의 쓰레드는 run2라는 함수를 setTimeout이라는 전자레인지에 넣고 3초 라는 타이머를 돌린 뒤, 자신의 일을 계속 진행한 것으로 보여진다.</p><p>위의 setTimeout은 특정 시간 뒤에, callback 함수를 호출가능하게 만들어주는 전자레인지이다.<br>즉 mainthread 대신 시간을 세어주는 javascript 비동기 API이다.</p><p>위 코드의 동작도 함수의 호출스택으로 보면 다음과 같다.<br>setTimeout 호출직전은 동기적인 동작과 같으니 생략하고, setTimeout 호출부터 본다면…</p><p><img src="/images/20181006-javascript-callback_b_0.png" alt="setTimeout을 만난 스레드는 이것을 Web API로 넘긴다. 이 행위는 Web API라는 전자레인지에 run2를 넣고 동작시키는 행위라고 생각하면 된다."></p><p><img src="/images/20181006-javascript-callback_b_1.png" alt="Web API에서는 이런 쓰레드의 블록킹을 현상을 발생시키는, 지연작업등을 비동기적으로 실행할 수 있게 여러가지 전자레인지를 구비해 놓고 있다. "></p><p><img src="/images/20181006-javascript-callback_c_1.png" alt="setTimout은 전자레인지 중 하나이며, ajax, Dom 등도 존재한다."></p><p><img src="/images/20181006-javascript-callback_b_2.png" alt="쓰레드는 전자레인지는 신경쓰지 않고 자신의 callstack에 돌아와 계속 남은일을 처리해 나간다. 이 시점에도 동시에 setTimeout은 자신이 해야하는 일, 즉 3초의 시간을 재고 있다."></p><p><img src="/images/20181006-javascript-callback_b_3.png" alt="쓰레드는 callstack의 작업을 모두 끝내고, 전자레인지 setTimeout은 여전히 시간을 재고 있다."></p><p><img src="/images/20181006-javascript-callback_b_4.png" alt="드디어 setTimeout은 3초를 다 세고, run2라는 callback함수를 task Queue에 집어 넣는다."></p><p><img src="/images/20181006-javascript-callback_b_5.png" alt="Event Loop는 callstack이 비어있는지 확인하고 비어있다면 task queue에 가장 먼저 들어온 run2함수를 callstack에 전달한다."></p><p><img src="/images/20181006-javascript-callback_b_6.png" alt="쓰레드는 CallStack 에 있는 run2작업을 처리하기 시작한다."></p><p>여기서 Web API의 역할은 callstack의 일들을 처리하는 MainThread 대신 비동기적으로 처리해야 할 일을 대신 처리하는 것이다.<br>숫자를 센다던지, 서버의 요청을 기다린다 던지, DOM에서 발생할 수 있는 이벤트를 기다리는 등의 일들을 처리한다.</p><p>개발자가 해야할 일은 이런 머리아픈 비동기적 작업을 API에게 맡기고, 비동기적 작업 결과에 따라 처리해야 할일을 callback에 담아주기만 하면 되는것이다.</p><p>싱글쓰레드이지만 동시성작업이 필요한 작업들을 javascript API를 통해 대신처리하므로, MainThread는 Non blocking(막히지 않고) 동작하게 된다.</p><hr><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/" target="_blank" rel="external nofollow noopener noreferrer">https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/</a></p><p><a href="https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EB%B6%80%EC%83%81-async-await%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%94%A9-%ED%8C%81-%EB%8B%A4%EC%84%AF-%EA%B0%80%EC%A7%80-df65ffb4e7e" target="_blank" rel="external nofollow noopener noreferrer">https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EB%B6%80%EC%83%81-async-await%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%94%A9-%ED%8C%81-%EB%8B%A4%EC%84%AF-%EA%B0%80%EC%A7%80-df65ffb4e7e</a></p><p><a href="https://hudi.kr/%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81-javascript-%EC%8B%B1%EA%B8%80%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-js%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95/" target="_blank" rel="external nofollow noopener noreferrer">https://hudi.kr/%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81-javascript-%EC%8B%B1%EA%B8%80%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-js%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95/</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/EventLoop" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/JavaScript/EventLoop</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 동기 </tag>
            
            <tag> 비동기 </tag>
            
            <tag> synchronous </tag>
            
            <tag> asynchronous </tag>
            
            <tag> 블록킹 </tag>
            
            <tag> 논블록킹 </tag>
            
            <tag> blocking </tag>
            
            <tag> non blocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atom 경고창 - The package spell-check cannot load the system dictionary for en_US.</title>
      <link href="/2018/10/04/atom-20181004-atom-warning-The-package-spell-check-cannot-load-the-system-dictionary-for-en-US/"/>
      <url>/2018/10/04/atom-20181004-atom-warning-The-package-spell-check-cannot-load-the-system-dictionary-for-en-US/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>요즘 Node, Vue 공부를 위해 Atom 개발툴을 조물딱, 조물딱 하고 있다.<br>그런데 가끔 특정 확장자 파일을 열때 다음과 같은 warning이 뜨기 시작했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The package spell-check cannot load the system dictionary for en_US. </span><br><span class="line">See the settings for ways of changing the languages used, resolving missing dictionaries, or hiding this warning.</span><br></pre></td></tr></table></figure><p>대충 해석해보니 package spell-check 라는 녀석이 en_Us라는 system dictionary를 Load 하지 못한다는 말인데…</p><p><img src="/images/util/wtf1.png" alt="WTF"></p><p>사실 개발할 때에는 별로 문제가 되지 않지만, 계속 노란색 경고창이 떠서 상당히 거슬린다.</p><hr><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p>문제는 운영체제에 en_US, 즉 미국 영어 언어팩이 없어어 발생하는 경고이다.</p><p>나와 같은 Windows10 인경우 </p><p><strong>Windows 설정 -&gt; 시간 및 언어 -&gt; 언어 화면으로 이동해서 언어추가 버튼을 클릭하여 English 미국 언어팩을 추가하면 더이상 경고창이 뜨지 않는다.</strong></p><p><img src="/images/20181004-atom-warning-The-package-spell-check-cannot-load-the-system-dictionary-for-en-US_1.png" alt="English 언어팩 추가"></p>]]></content>
      
      
      <categories>
          
          <category> atom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> Tool </tag>
            
            <tag> Atom </tag>
            
            <tag> waring </tag>
            
            <tag> The package spell-check cannot load the system dictionary for en_US </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - var let const 비교설명 (부제:const 객체, const 배열을 사용하는 이유)</title>
      <link href="/2018/09/21/javascript-20180921-javascript-var-let-const/"/>
      <url>/2018/09/21/javascript-20180921-javascript-var-let-const/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>요즘 Vue를 공부하면서 javascript 코드를 자주 보게 되는데, 내 대뇌에 있는 javascript 라이브러리가 너무 허접해서 고전중이다.</p><p>아 책에서는 Vue가 다른 프레임워크보다 쉽다고 했는데… 자괴감 들고 괴로워…</p><p>이 글은 javascript 식별자 var, let, const 에 관한 글이다.</p><p>이 글을 쓰게 된 계기는 const 함수, const 객체를 사용하는 코드를 보고 왜 const를 사용하는지에 대한 의문을 해소하기 위함이다.</p><hr><h2 id="식별자-identifier-리터럴-literal-용어정리"><a href="#식별자-identifier-리터럴-literal-용어정리" class="headerlink" title="식별자(identifier) 리터럴(literal) 용어정리"></a>식별자(identifier) 리터럴(literal) 용어정리</h2><p>let currentTempC = 22; 에서 22가 리터럴이다.<br>리터럴이라는 단어는 값을 프로그램 안에서 직접 지정 한다는 의미이다.<br>리터럴은 값을 만드는 방법이다.<br>자바스크립트는 당신이 제공한 리터럴 값을 받아 데이터를 만든다.</p><p>리터럴과 식별자(identifier)의 차이를 이해하는 것이 중요하다.<br>예를들어 앞에서 room1 변수에 값 “conference_room_a”을 할당한 것을 생각해 봅시다.<br>roo1은 변수를 가리키는 식별자입니다.<br>그리고 “conference_room_a”은 문자열 리터럴인 동시에 room1의 값이다.</p><hr><h2 id="var-let-const-요약설명"><a href="#var-let-const-요약설명" class="headerlink" title="var, let, const 요약설명"></a>var, let, const 요약설명</h2><p>var, let는 변수를 선언하는 키워드이고, const는 상수를 선언하는 키워드이다.</p><p>var, let은 변수선언 키워드 이므로 리터럴 값의 재할당이 가능하지만, const는 리터럴 값의 재할당이 불가능하다.</p><p>더욱이 const 키워드는 선언과 동시에 리터럴 값을 할당해 줘야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"hanumoka"</span>;</span><br><span class="line">name = <span class="string">"김대중"</span>; <span class="comment">// var는 변수 선언 키워드이며 값 재할당이 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="string">"32"</span>;</span><br><span class="line">age = <span class="string">"33"</span>;     <span class="comment">// let역시 변수 선언 키워드이며 값 재할당이 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PI = <span class="string">"3.14"</span>;  <span class="comment">// const는 상수선언 키워드이며 값 재할당이 불가능 하다. 그리고 이렇게 선언과 동시에 값을 할당해야 한다.</span></span><br></pre></td></tr></table></figure><p><strong>let, const 키워드는 block-scoped, 즉 블록(중괄호) 내부에 let, const 키워드로 선언된 변수는 외부 스코프에 영향을 주지 않는다.</strong></p><p>let, const는 ECMA6에서 도입된 키워드며, var로 인해 발생하는 혼란스럽고 불 명확한 코드작성을 피하기 위해 만들어 졌다.</p><p>따라서 let, const 사용을 선호해야 한다.</p><p>그리고 왠만하면 const 키워드를 사용하여 식별자를 선언하고, 값이 변하는 식발자일 경우 let 키워드를 이용하여 선언하자.</p><p>프로그램에서 선언되는 식별자중 값이 변하는 식별자는 드물기 때문에 const 키워드 선언으로 예상하지 못한 오작동을 방지하자.</p><hr><h2 id="var-Vs-let의-비교-var가-얼마나-쓰레기인지-대신-왜-let-을-써야-하는지에-대한-설명"><a href="#var-Vs-let의-비교-var가-얼마나-쓰레기인지-대신-왜-let-을-써야-하는지에-대한-설명" class="headerlink" title="var Vs let의 비교(var가 얼마나 쓰레기인지, 대신 왜 let 을 써야 하는지에 대한 설명)"></a>var Vs let의 비교(var가 얼마나 쓰레기인지, 대신 왜 let 을 써야 하는지에 대한 설명)</h2><p>나에겐 var가 익숙하지만, 구식이다. 그리고 이제 왠만하면 사용해선 안된다.</p><p>그 이유는 앞서 말했듯이 혼란스러운 javascript 코드작성을 야기하기 때문이다.</p><p>다음은 var 키워드가 야기하는 모호함이다.</p><h3 id="var-키워드는-변수명을-재선언해도-아무런-문제가-발생하지-않는다"><a href="#var-키워드는-변수명을-재선언해도-아무런-문제가-발생하지-않는다" class="headerlink" title="var 키워드는 변수명을 재선언해도 아무런 문제가 발생하지 않는다."></a>var 키워드는 변수명을 재선언해도 아무런 문제가 발생하지 않는다.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">"hanumoka"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    예를 들어 100라인 정도의 코드가 존재</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//위에 userName을 선언한 것을 잊고 재선언한 경우</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">"마이클잭슨"</span>;   <span class="comment">// 아무런 문제가 발생하지 않는다. 앞서 선언한 userName = "hanumoka"가 의도치 않게 유실된 것이다.</span></span><br></pre></td></tr></table></figure><p><strong>반면에 let 키워드는 변수명 재선언시 에러를 발생시킨다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">"hanumoka"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  예를 들어 100라인 정도의 코드가 존재</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//위에 userName을 선언한 것을 잊고 재선언한 경우</span></span><br><span class="line"><span class="keyword">let</span> userName = <span class="string">"문재인"</span>; <span class="comment">// SyntaxError 를 발생시킨다. 개발자는 이미 선언된 변수라는 것을 확인 할 수 있다.</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180921-javascript-var-let-const_1.png" alt="위 코드의 실행결과"></p><h3 id="var-키워드는-호이스팅-hoisting-이라는-메커니즘을-통해-끌어-올려진다"><a href="#var-키워드는-호이스팅-hoisting-이라는-메커니즘을-통해-끌어-올려진다" class="headerlink" title="var 키워드는 호이스팅(hoisting)이라는 메커니즘을 통해 끌어 올려진다."></a>var 키워드는 호이스팅(hoisting)이라는 메커니즘을 통해 끌어 올려진다.</h3><p>var 키워드의 가장 난해하고 악의적인 동작이, 이 호이스팅이라 개인적으로 생각한다.</p><p><strong>호이스팅</strong>이라는 말 자체가 <strong>끌어올리다라는</strong> 의미이다. 코드로 보면 다음의 상황을 var 키워드의 호이스팅 현상이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(userName);    <span class="comment">// 선언되지 않은 변수를 console 출력</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">"손석희"</span>;  <span class="comment">// 이제서야 userName변수에 값을 할당</span></span><br><span class="line"><span class="built_in">console</span>.log(userName);   <span class="comment">// 다시 userName 변수 출력</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180921-javascript-var-let-const_2.png" alt="위 코드의 실행결과"></p><p>위 소스코드는 정상적으로 <strong>동작</strong> 하는 것을 확인 할 수 있다.</p><p>그 이유는 var 키워드는 자바스크립트 해석기가 호이스팅을 통해 재 해석 하기 때문이다.</p><p>다음은 자바스크립트 해석기가 위 코드를 재 해석한 결과이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName; <span class="comment">// 할당된 값을 제외하고 선언만 끌어 올려진다.</span></span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line">userName = <span class="string">"손석희"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br></pre></td></tr></table></figure><p>위 소스를 보면 자바스크립트의 해석기는 var 변수선언문을 위로 끌어올린다.(호이스팅)</p><p>원본 코드에서 선언되지 않는 변수에 대한 접근이 오류없이 동작하게 되는 이유가 바로 이것 때문이다.</p><p><strong>여기서 var 식별자의 호이스팅의 중요한 점은 선언만 끌어 올려진다는 것이며, 할당은 끌어올려지지 않는 다는 것이다.</strong></p><p>var 키워드의 이런 호이스팅 동작 역시 개발자(사람이) 인식, 예측하기 어려운 코드의 작성을 야기시키는 요인 중 하나이다.</p><p>이런 var의 호이스팅을 막기 위해서는 자바스크립트 scope(전역스코프나, 함수스코프)에 use strict(엄격한 자바스크립트를 사용하겠다는 키워드)를 사용해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">"손석희"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br></pre></td></tr></table></figure><p><img src="/images/20180921-javascript-var-let-const_3.png" alt="위 코드의 실행결과"></p><p>use strict를 사용한 결과 var의 호이이스팅은 동작하지 않으며, 위처럼 변수가 선언되지 않았다고 에러가 발생한다.</p><p>반면에 let 키워드를 사용할 경우 해당 스코프에 use strict를 사용하지 않아도 변수를 사용하기 전에 미리 선언하지 않으면 오류가 발생한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(userName);  <span class="comment">// let 키워드로 선언한 변수는 호이스팅이 동작하지 않는다.</span></span><br><span class="line"><span class="keyword">let</span> userName = <span class="string">"손석희"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br></pre></td></tr></table></figure><p><img src="/images/20180921-javascript-var-let-const_4.png" alt="위 코드의 실행결과"></p><h3 id="var-키워드-변수로-인한-전역스코프-오염의-위험"><a href="#var-키워드-변수로-인한-전역스코프-오염의-위험" class="headerlink" title="var 키워드 변수로 인한 전역스코프 오염의 위험."></a>var 키워드 변수로 인한 전역스코프 오염의 위험.</h3><p>var 키워드 변수는 scope에 가두려면, 반드시 함수가 필요하다. 그래서인지 <strong>var 키워드 변수를 를 function-scoped</strong>라고 부른다.</p><p>여기서 <strong>잠깐 scope를 설명하자면, 어떤 선언된 변수가 있다면 이 변수가 유효한 공간적 범위를 말한다.</strong></p><p>자바스크립트에서는 크게 전역스코프와 함수스코프가 존재했었고, ECMA6부터 블록스코프(중괄호 스코프)를 지원한다.</p><p>예전부터 자바스크립트 책을보면 자바스크립트의 가장 큰 문제점으로 global scope(전역스코프)가 오염된다는 것을 꼽는다.</p><p>과거 <strong>var키워드로 선언된 변수</strong>와, <strong>var 키워드 없이 선언된 변수</strong>가 어떻게 scope를 오염시키는지 확인해 보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>; <span class="comment">//전역스코프 영역</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(age = <span class="number">20</span>)&#123;</span><br><span class="line">  <span class="comment">// 만약 졸면서 코딩을해서, var name이라고 선언할 것을 이렇게 var age로 선언하고 문자열을 할당했다.</span></span><br><span class="line">  <span class="keyword">var</span> age  = <span class="string">"홍길동"</span>;</span><br><span class="line">  <span class="comment">// 홍길동이 찍힌다., 난 졸면서 코딩중이라 "음 잘 동작하네" 하고 넘어간다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"name:"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20대신 홍길동이 찍힌다. 위에 4줄의 작은 조건문의 실수가 전역스코프를 오염시켜서 프로그램 전체에 큰 영향을 주고 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><p>Java와 같은 고급언어와 달리 javascript의 중괄호 블록영역은 내부의 <strong>var 키워드로 선언된 변수 그리고 var 키워드 없이 선언된 변수</strong>를 다른 스코프로부터 고립시키지 못한다.</p><p>프로그램이 커지고, 복잡해질수록 이 문제는 소스코드의 잠재적인 위험도를 높이는 원인이 된다.</p><p>아마 자바스크립트가 프로그래밍 언어로서 욕을 들어먹는 가장큰 이유가, 이런 부분일 것이다.</p><p>위와 같은 문제를 방지하기 위해, 아래 소스처럼 <strong>즉시 실행 함수 표현(IIFE, Immediately Invoked Function Expression)</strong>등을 사용하는 코드를 자주 볼 수 있다.</p><p>즉시 실행 함수는 함수 선언과 동시에 실행되며, 필요한 로직을 수행하고 함수의 스코프가 닫히므로 함수내부의 변수선언이 함수 외부를 오염시키는 것을 막는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aName = <span class="string">"Barry"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(aName);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// IIFE 내부에서 정의된 변수는 외부 범위에서 접근이 불가능하다.</span></span><br><span class="line"><span class="built_in">console</span>.log(aName); <span class="comment">// throws "Uncaught ReferenceError: aName is not defined"</span></span><br></pre></td></tr></table></figure><p>하지만 var 키워드를 명시하지 않는 변수 선언이 즉시실행함수 내부에 존재하는 경우가 또 문제이다.</p><p>이 괴랄한 자바스크립트 해석기는 어떤 특정 스코프에서 <strong>var 키워드 없이 선언된 변수</strong>를 찾게 되면, 그 변수를 점점 바깥 스코프에서 찾는 시도를 한다.</p><p>계속 찾는 행위를 반복하다 전역스코프 까지 찾았는데, 그 변수가 선언이 없다면 자바스크립트 해석기는 전지전능한 권능으로 그냥 <strong>어딘가 보이지도 않는 장소</strong>에 선언해 버린다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    aName = <span class="string">"Barry"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(aName);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// aName은 내 의도와 상관없이, 자바스크립트 global scope에 선언이 되어 버린다.</span></span><br><span class="line"><span class="built_in">console</span>.log(aName);</span><br></pre></td></tr></table></figure><p><img src="/images/20180921-javascript-var-let-const_5.png" alt="위 코드의 실행결과"></p><p>자바스크립트 해석기가 아아주 친절하게, 에러가 발생할까 염려되어 전역스코프 영역에 aName이라는 변수를 선언하는 만행을 저지른다.</p><p><img src="/images/util/%EA%B3%A0%EC%96%91%EC%9D%B4%EB%86%80%EB%9E%8C1.jpg" alt="What?"></p><p>심지어 자바스크립트 해석기가 멋대로 선언한 저 전역변수는 찾을수도 없다.<br>(브라우저인 경우 최상위 객체인 Object 객체를 까다보면 var 키워드로 선언된 전역 변수는 찾을수 있으나, 위 처럼 자바스크립트 해석기가 지 멋대로 선언해 버린 전역변수는 어디에 있는지 찾을수도 없다.)</p><p>결과적으로 프로그램은 에러없이 동작하게 되고, 식별하기 어렵고 예측하기 힘들며 오작동을 야기할수 있는 코드가 되어 버린다.</p><p>앞서 언급한 use strict를 사용하면, 애시당초 자바스크립트 해석기의 독단적인 글로벌 변수 선언을 막을수 있기는 하지만…</p><p>이런 자바스크립트의 뭔가 어설픈? 문법, 동작에 쓸데없이 개발자의 리소스가 낭비된다는 것은 큰 스트레스 이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     aName = <span class="string">"Barry"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(aName);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// use strict 키워드로 인해, 자바스크립트 해석기는 독단적인 전역변수 선언을 못하므로, IIFE의 의도되로 아래에서 Error가 발생한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(aName);</span><br></pre></td></tr></table></figure><p><strong>여기서 우리의 해결사 let은 심플 그자체이다.</strong></p><p><strong>let, const 키워드는 block-scoped, 즉 블록(중괄호) 내부에 let, const로 선언된 변수는 외부 스코프에 영향을 주지 않는다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(age = <span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> age  = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">// 전역스코프에 선언된 age는 오염되지 않고 여전히 1의 값을 유지한다.</span></span><br></pre></td></tr></table></figure><p>그리고 앞서 사용한 IIEF대신 ECMA6 부터 지원하는 블록스코프(block scope), let, const 를 이용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =<span class="string">"hanumoka"</span>;</span><br><span class="line">  <span class="keyword">const</span> age = <span class="number">33</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/util/%EC%83%81%EC%BE%8C1.jpg" alt="let 사이다."></p><p><strong>var, let 키워드를 정리하자면…</strong></p><ul><li>이제 var 키워드로 변수선언하는 것은 그만!</li><li>let 키워드는 변수의 재 선언을 막아준다.(변수 재 선언과 값 재 할당을 혼동하지 말것.)</li><li>let 키워드는 변수 호이스팅이 되지 않으므로, 변수 사용전 반드시 먼저 선언해야 한다.</li><li>let 키워드는 block-scoped, 즉 블록단위 영역에 고립된 변수를 선언할 수 있어서 외부 scope의 오염을 막을 수 있다.</li></ul><hr><h2 id="const-키워드"><a href="#const-키워드" class="headerlink" title="const 키워드"></a>const 키워드</h2><p>공부해 보니 사실 const 키워드는 아주 간단하다.</p><p>let 키워드와 전반적으로 유사하며, 단지 상수선언 용이므로 리터럴값을 재 할당 하는것이 불가능하며 선언과 동시에 값 할당을 해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">"3.14"</span>;  <span class="comment">// 선언과 동시에 값을 할당해야 한다.</span></span><br><span class="line">PI = <span class="string">"3.14195"</span>; <span class="comment">// const 키워드로 선언된 식별자에 리터럴 값을 재 할당할 경우 error 가 발생한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FATHER_NAME;   <span class="comment">// 선언과 동시에 값을 할당하지 않을 경우에도 error 가 발생한다.</span></span><br></pre></td></tr></table></figure><blockquote><p>될 수 있으면 변수보다 상수를 써야 한다.<br>데이터의 값이 아무 때나 막 바뀌는 것보다는, 고정된 값이 이해하기 쉽다.<br>상수를 사용하면 값을 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어든다.<br>일단 상수를 쓰는 습관을 들이면, 변수가 꼭 필요한 상황이 생각보다 훨씬 적다는 걸 알고 놀라게 될 것이다.</p></blockquote><p>위 내용은 책을 참조한 것이다.<br>javascript 책에서는 일반적으로 값을 저장하는 식별자를 선언할 때 왠만하면 const(상수)로 선언하라고 조언한다.<br>프로그램 개발중에 실상 변수가 되어야 하는 식별자는 드물기 때문이다.</p><p>그리고 일반적으로 변수와 상수의 식별자를 구별하기 위하여 상수 식별자의 경우 대문자와 및줄(언더스코어)를 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//절대 적인 규칙은 아니지만, 상수 이름에는 대문자와 밑줄만 사용한다. 이렇게 하면 상수와 변수를 구별하기가 쉬워진다.</span></span><br><span class="line"><span class="keyword">const</span> Room_TEMP_C = <span class="number">21.5</span>, MAX_TEMP_C = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="const-키워드를-사용하여-const-함수-객체-등을-선언하는-이유"><a href="#const-키워드를-사용하여-const-함수-객체-등을-선언하는-이유" class="headerlink" title="const 키워드를 사용하여 const 함수, 객체 등을 선언하는 이유!!!"></a>const 키워드를 사용하여 const 함수, 객체 등을 선언하는 이유!!!</h3><p>아 힘들게 멀리 왔다.</p><p>난 이게 궁금해서 var, let, const를 공부하며 정리한 것인데… 글이 이렇게 길어질 줄이야.</p><p>내가 요즘 분석하고 있는 Vue bootstrap 템플릿 프로젝트의 소스를 보면…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">exports.assetsPath = <span class="function"><span class="keyword">function</span> (<span class="params">_path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> assetsSubDirectory = process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">    ? config.build.assetsSubDirectory</span><br><span class="line">    : config.dev.assetsSubDirectory</span><br><span class="line">  <span class="keyword">return</span> path.posix.join(assetsSubDirectory, _path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>위 처럼 const 키워드로 객체나, 함수등을 선언하는 것을 자주 볼수 있었다.</p><p><strong>난 배열, 객체, 함수 선언에 const를 사용하는 것이 궁금했다.</strong></p><p><strong>어차피 javascript의 배열, 객체, 함수는 다 객체취급을 받으므로, const 키워드로 선언해도 식별자.프로퍼티명 형태로 직접 접근해서 값을 수정하는 것이 가능하기 때문이다.</strong></p><p>하지만 공부해 보니 이유는 간단했다.</p><p><strong>선언된 배열, 객체, 함수 등의 값이 재 할당 되는 것을 막고 싶기 때문이다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FN_DO_SOMETHING = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FN_DO_SOMETHING = <span class="string">"hanumoka"</span>;   <span class="comment">// 에러 발생</span></span><br></pre></td></tr></table></figure><p>위 소스에서 fn_doSomething 라는 함수는 const 키워드로 선언되어 식별자에 리터럴 값을 재 할당이 불가능 하다.</p><p><strong>이것의 의미는 fn_doSomething 는 항상 처음 선언된 함수라는 형태로 사용하겠다고 명시 하는 것이다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OBJ_FATHER = &#123;</span><br><span class="line">  name : <span class="string">"홍길동"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OBJ_FATHER = <span class="string">"홍길동"</span>; <span class="comment">// 에러 발생</span></span><br></pre></td></tr></table></figure><p>객체를 const로 선언해서 사용하는 이유는, OBJ_FATHER는 항상 객체의 포멧을 유지해야 한다는 것을 명시하는 것이다.</p><p>배열도 마찬가지이다.</p><p><strong>const 식별자로 선언된 배열이나 객체 같은경우, 일종의 객체타입이라는 자료형을 유지하기 위한 수단으로 사용된다.</strong></p><hr><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d" target="_blank" rel="external nofollow noopener noreferrer">https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d</a></p><p><a href="https://medium.com/@khwsc1/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%ED%81%B4%EB%A1%9C%EC%A0%80-javascript-scope-and-closures-8d402c976d19" target="_blank" rel="external nofollow noopener noreferrer">https://medium.com/@khwsc1/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%ED%81%B4%EB%A1%9C%EC%A0%80-javascript-scope-and-closures-8d402c976d19</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> var </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
            <tag> 리터럴 </tag>
            
            <tag> 식별자 </tag>
            
            <tag> identifier </tag>
            
            <tag> literal </tag>
            
            <tag> 변수 호이스팅 </tag>
            
            <tag> const 배열 </tag>
            
            <tag> const 객체 </tag>
            
            <tag> const 함수 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - 전개연산자 spread operator(...)</title>
      <link href="/2018/09/17/javascript-20180917-javascript-spread-operator/"/>
      <url>/2018/09/17/javascript-20180917-javascript-spread-operator/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>아 프론트엔드 진짜 너무 어렵다.<br>누군가 만들어논 Vue bootstrap 템플릿을 분석중인데, 진짜 뇌에 마비가 올것 같다.</p><p>Vue 소스중에 다음과 같은 소스를 찾았다. </p><p><img src="/images/20180917-javascript-spread-operator_1.png" alt="위 코드의 실행결과"></p><p>저 ...  라는 자바스크립트 표현은 전개연산자(spread operator)라 불린다.</p><p>전개연산자(spread operator)를 후려쳐서 말하자면, 배열 x에 전개연산자를 적용하면 배열 x를 복사한 뒤 배열 껍대기를 지워 버린다.</p><p>아래 소스를 보면 이해가 될 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c</span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line">test(...x);</span><br></pre></td></tr></table></figure><p>test 함수는 인자로 a, b, c 3개의 값을 받는다.<br>x라는 변수는 배열로 인덱스를 3개 같는다.<br>전개연산자를 배열 앞에 붙일 경우 그 배열을 복사한 뒤 배열 대 괄호를 지워버린다. </p><p><img src="/images/20180917-javascript-spread-operator_2.png" alt="전개연산자를 대충 그림으로 표현하자면..."></p><p>배열을 함수등에 파라미터로 넘길때 유용하게 사용되는 듯하다. </p><p>자세한 사용법은 아래 MDN을 참고!</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p>자바스크립트 전개연산자 MDN<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator</a></p><p>분석중인 VUE bootstrap 템플릿<br><a href="https://github.com/epicmaxco/vuestic-admin" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/epicmaxco/vuestic-admin</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> spread operator </tag>
            
            <tag> ... </tag>
            
            <tag> 전개연산자 </tag>
            
            <tag> ECMAScript6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring - @Transactional(스프링 트랜잭션 적용하기.)</title>
      <link href="/2018/09/11/spring-20180911-spring-Transactional/"/>
      <url>/2018/09/11/spring-20180911-spring-Transactional/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180911-spring-Transactional_1.png" alt="스프링로고"></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>Spring에서 트랜잭션을 설정하는 방법은 크게 XML파일을 이용한 설정과, 어노테이션을 이용한 설정이 있다.</p><p>이 글에서는 @Transactional 어노테이션을 이용하면 간단하게 트랜잭션 처리에 대해 정리하겠다.</p><p>AOP + tx:advice 태그를 이용한 트랜잭션 보다 간단하게 사용 할 수 있다.</p><hr><h3 id="root-contenxt-xml에-transactionManager-설정하기"><a href="#root-contenxt-xml에-transactionManager-설정하기" class="headerlink" title="root-contenxt.xml에 transactionManager 설정하기"></a>root-contenxt.xml에 transactionManager 설정하기</h3><p>일단 root-context.xml 파일에 트랜잭션 처리를 위한  transactionManager를 설정해야 한다.<br>아래 내용을 root-context.xml 파일에 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 트랜젝션 매니저 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @Transactional 애노테이션을 sacn하기 위한 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="트랜잭션이-필요한-서비스에-Transactional-어노테이션을-달아주자"><a href="#트랜잭션이-필요한-서비스에-Transactional-어노테이션을-달아주자" class="headerlink" title="트랜잭션이 필요한 서비스에 @Transactional 어노테이션을 달아주자."></a>트랜잭션이 필요한 서비스에 @Transactional 어노테이션을 달아주자.</h3><p>정말 간단하다. 트랜잭션이 필요한 서비스 클래스에 @Transactional 어노테이션을 달아주면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//게시글 삭제</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeBoard</span><span class="params">(BoardVO vo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  replyDAO.removeAllRepl(vo.bno);  <span class="comment">//삭제할 게시글의 답글 삭제</span></span><br><span class="line">  boardDAO.deleteBoard(vo.bno);    <span class="comment">//게시글 삭제</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 간단한 설정으로 트랜잭션 설정을 할 수 있다.</p><hr><h3 id="Transactional에-대한-조금더-자세한-설정"><a href="#Transactional에-대한-조금더-자세한-설정" class="headerlink" title="@Transactional에 대한 조금더 자세한 설정"></a>@Transactional에 대한 조금더 자세한 설정</h3><p>@Transactional 애노테이션은 위 예제의 처럼 <strong>클래스의 메소드</strong> 뿐만 아니라, <strong>인터페이스</strong>, <strong>클래스</strong> 선언에도 사용할수 있다.</p><p>메소드에 선언된 @Transactional의 설정이 가산 우선되기 때문에, 공통적인 규칙은 인터페이스, 클래스 등에 적용하고 특별한 설정은 메소드에 적용할수 있다.</p><hr><h3 id="Transactional-속성"><a href="#Transactional-속성" class="headerlink" title="@Transactional 속성"></a>@Transactional 속성</h3><p><strong>isolation (격리레벨)</strong></p><ul><li>DEFAULT: DB 설정, 기본 격리 수준(기본설정)</li><li>SERIALIZABLE : 가장 높은 격리, 성능 저하의 우려가 있음</li><li>READ_UNCOMMITED : 커밋되지 않는 데이터에 대한 읽기를 허용</li><li>READ_COMMITED : 커밋된 데이터에 대해 읽기 허용</li><li>REPEATEABLE_READ : 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장</li></ul><p>설정 예: @Transactional(isolation=Isolation.DEFAULT)</p><p><strong>propagation (전파속성)</strong></p><ul><li>PROPAGATION_MANDATORY : 작업은 반드시 특정한 트랜잭션이 존재한 상태에서만 가능</li><li>PROPAGATION_NESTED : 기존에 트랜잭션이 있는 경우, 포함되어서 실행</li><li>PROPAGATION_NEVER : 트랜잭션 상황에 실행되면 예외 발생</li><li>PROPAGATION_NOT_SUPPORTED : 트랜잭션이 있는 경우에는 트랜잭션이 끝날 때까지 보류된 후 실행</li><li><strong>PROPAGATION_REQUIRED : 트랜젝션이 있으면 그 상황에서 실행, 없으면 새로운 트랜잭션 실행(기본설정)</strong></li><li>PROPAGATION_REQUIRED_NEW : 대상은 자신만의 고유한 트랜잭션으로 실행</li><li>PROPAGATION_SUPPORTS : 트랜젝션을 필요료 하지 않으나, 트랜잭션 상황에 있다면 포함되어서 실행</li></ul><p>설정 예: @Transactional(propagation=Propagation.REQUIRED)</p><p><strong>readOnly 속성</strong></p><ul><li>true인 경우 insert, update, delete 실행 시 예외 발생, 기본 설정은 false</li></ul><p>설정 예: @Transactional(readOnly = true)</p><p><strong>rollbackFor 속성</strong></p><ul><li>특정 예외가 발생 시 강제로 Rollback</li></ul><p>설정 예: @Transactional(rollbackFor=Exception.class)</p><p><strong>noRollbackFor 속성</strong></p><ul><li>특정 예외의 발생 시 Rollback 처리되지 않음</li></ul><p>설정 예: @Transactional(noRollbackFor=Exception.class)</p><p><strong>timeout 속성</strong></p><ul><li>지정한 시간 내에 해당 메소드 수행이 완료되이 않은 경우 rollback 수행. -1일 경우 no timeout(Default=-1)</li></ul><p>설정 예: @Transactional(timeout=10)</p><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>음.. 전파속성은 어떤경우에 사용할까???</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Transactional </tag>
            
            <tag> 트랜잭션 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring - File Upload 개발요약정리</title>
      <link href="/2018/09/06/spring-20180906-spring-file-upload/"/>
      <url>/2018/09/06/spring-20180906-spring-file-upload/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이번에는 Spring에서 File Upload를 개발할때 필요한 라이브러리, 개념, 특정 기술들을 정리하겠다.<br>업로드할 파일은 이미지 파일과 일반파일로 나뉘며, 저용량 파일업로드를 기준한다.<br>완전한 실습이 아니라 요약정리임을 미리 알린다.(DB없이 실제 파일의 업로드만…)</p><hr><h3 id="필요한-라이브러리"><a href="#필요한-라이브러리" class="headerlink" title="필요한 라이브러리"></a>필요한 라이브러리</h3><p>pom.xml 파일에 아래 라이브러리를 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 파일업로드 관련 : 이미지 썸네일 생성 라이브러리--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.imgscalr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imgscalr-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 파일업로드 관련--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="스프링-mulipartResolver-선언"><a href="#스프링-mulipartResolver-선언" class="headerlink" title="스프링 mulipartResolver 선언"></a>스프링 mulipartResolver 선언</h3><p>화면단에서 mutipart/form-date방식으로 서버에 전송되는 데이터를 스프링 MVC의 mulipartResolver로 처리할수 있다.</p><p>servlet-context.xml 파일에 아래와 내용을 추가하자</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 파일 업로드로 들어오는 데이터를 처리하는 객체 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span> /&gt;</span> <span class="comment">&lt;!-- 10mb 제한 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="업로드할-파일위치-지정하기"><a href="#업로드할-파일위치-지정하기" class="headerlink" title="업로드할 파일위치 지정하기"></a>업로드할 파일위치 지정하기</h3><p>업로드할 파일의 위치를 지정해야 한다.</p><p>servlet-context.xml 파일을 열어서 아래 내용을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 업로드된 파일의 저장 위치 지정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"uploadPath"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">value</span>=<span class="string">"D:\\SpringUploadRepo\\upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maxUploadSize 프로퍼티를 통해 업로드할 파일의 용량을 제한할수 있다.</p><hr><h3 id="web-xml-파일의-한글파일-인코딩-처리"><a href="#web-xml-파일의-한글파일-인코딩-처리" class="headerlink" title="web.xml 파일의 한글파일 인코딩 처리"></a>web.xml 파일의 한글파일 인코딩 처리</h3><p>한글파일이 업로드될때 파일명이 깨지는 것을 해결하기 위해 web.xml 파일에 아래 내용을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Ensure UTF-8 character encoding is used --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="서버에-파일을-저장할때-고려해야-할-사항들"><a href="#서버에-파일을-저장할때-고려해야-할-사항들" class="headerlink" title="서버에 파일을 저장할때 고려해야 할 사항들"></a>서버에 파일을 저장할때 고려해야 할 사항들</h3><p><strong>1.파일업로드 방식 결정하기.</strong></p><p>Post 방식으로 전송할지 아니면 ajax방식으로 전송할지 결정해야 한다.<br>아마 요즘은 주로 ajax방식을 사용하는것 같다.</p><p><strong>2.파일이름 중복문제.</strong></p><p>DB에 파일을 저장할수도 있지만, 일반적으로 파일시스템에 파일을 저장하게된다.<br>따라서 업로드 되는 파일의 이름의 중복을 해결할 방법이 필요하다. -&gt; UUID로 해결가능</p><p><strong>3.파일 저장경로에 대한문제.</strong></p><p>Windows나 Linux등 운영체제에서 폴더내의 파일 개수가 너무 많아지게 되면, 속도저하 문제가 발생하게 된다.<br>특히 Windows의 파일 시스템의 경우 폴더내 최대 파일 개수의 제한이 있다.(100만단위가 넘어가긴 하지만…)<br>위 문제를 해결하기 위해서 보통 파일이 업로드 되는 시점별로 폴더를 관리한다.</p><p>예를 들어 2018년 9월 6일 파일이 업로드 되면, 그 파일은 특정 폴더의 경로의 /2018/09/06/ 경로에 저장하면 위 문제를 해결 할수있다.<br>즉 업로드 할때 파일을 저장할 폴더의 유무에 따라 폴더 생성로직이 필요하다.</p><p><strong>4.이미지파일의 경우 썸네일(thumbnail) 생성.</strong></p><p>이미지파일인 경우 저장된 파일을 다시 화면에 보여줄때, 보통 그 이미지파일의 썸네일파일을 보여주게된다.<br>따라서 이미지파일이 서버에 저장될때는 추가적으로 그 이미지파일의 썸네일파일을 생성해 주어야 한다.<br>앞서 위에 추가한 라이브러리중 imgscalr-lib가 이미지의 썸네일 생성을 해준다.</p><hr><h3 id="서버에-파일을-저장할-유틸리티-클래스-생성"><a href="#서버에-파일을-저장할-유틸리티-클래스-생성" class="headerlink" title="서버에 파일을 저장할 유틸리티 클래스 생성"></a>서버에 파일을 저장할 유틸리티 클래스 생성</h3><p><strong>MediaUtils.java</strong> 생성</p><p>이 유틸리티 파일은 이미지파일을 걸러주는 유틸리티 파일이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//업로드한 파일중 이미지 파일만 거르는 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MediaType&gt; mediaMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">mediaMap = <span class="keyword">new</span> HashMap&lt;String, MediaType&gt;();</span><br><span class="line">mediaMap.put(<span class="string">"JPG"</span>, MediaType.IMAGE_JPEG);</span><br><span class="line">mediaMap.put(<span class="string">"GIF"</span>, MediaType.IMAGE_GIF);</span><br><span class="line">mediaMap.put(<span class="string">"PNG"</span>, MediaType.IMAGE_PNG);</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MediaType <span class="title">getMediaType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mediaMap.get(type.toUpperCase());</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UploadFileUtils.java</strong> 생성</p><p>이 파일을 실질적으로 업로드된 파일을 저장한다.<br>중점적으로 볼 함수는 uploadFile 이다.<br>화면단에서 전달받은 파일정보를가지고 스프링의 컨트롤러는 UploadFileUtils.uploadFile를 호출함으로써 파일을 저장하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.imgscalr.Scalr;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadFileUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(String uploadPath, String originalName, <span class="keyword">byte</span>[] fileData)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//겹쳐지지 않는 파일명을 위한 유니크한 값 생성</span></span><br><span class="line">UUID uid = UUID.randomUUID();</span><br><span class="line"></span><br><span class="line"><span class="comment">//원본파일 이름과 UUID 결합</span></span><br><span class="line">String savedName = uid.toString() + <span class="string">"_"</span> + originalName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//파일을 저장할 폴더 생성(년 월 일 기준)</span></span><br><span class="line">String savedPath = calcPath(uploadPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//저장할 파일준비</span></span><br><span class="line">File target = <span class="keyword">new</span> File(uploadPath + savedPath, savedName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//파일을 저장</span></span><br><span class="line">FileCopyUtils.copy(fileData, target);</span><br><span class="line"></span><br><span class="line">String formatName = originalName.substring(originalName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">String uploadedFileName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//파일의 확장자에 따라 썸네일(이미지일경우) 또는 아이콘을 생성함.</span></span><br><span class="line"><span class="keyword">if</span>(MediaUtils.getMediaType(formatName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">uploadedFileName = makeThumbnail(uploadPath, savedPath, savedName);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">uploadedFileName = makeIcon(uploadPath, savedPath, savedName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uploadedFileName는 썸네일명으로 화면에 전달된다.</span></span><br><span class="line"><span class="keyword">return</span> uploadedFileName;</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//폴더 생성 함수</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath</span><span class="params">(String uploadPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">String yearPath = File.separator + cal.get(Calendar.YEAR);</span><br><span class="line"></span><br><span class="line">String monthPath = yearPath + File.separator + <span class="keyword">new</span> DecimalFormat(<span class="string">"00"</span>).format(cal.get(Calendar.MONTH)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">String datePath = monthPath + File.separator + <span class="keyword">new</span> DecimalFormat(<span class="string">"00"</span>).format(cal.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">makeDir(uploadPath, yearPath, monthPath, datePath);</span><br><span class="line"></span><br><span class="line">logger.info(datePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> datePath;</span><br><span class="line">&#125;<span class="comment">//calcPath</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//폴더 생성 함수</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeDir</span><span class="params">(String uploadPath, String... paths)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span> File(uploadPath + paths[paths.length -<span class="number">1</span>]).exists()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String path : paths) &#123;</span><br><span class="line"></span><br><span class="line">File dirPath = <span class="keyword">new</span> File(uploadPath + path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dirPath.exists()) &#123;</span><br><span class="line">dirPath.mkdir();</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//makeDir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//음??? 아이콘? 이미지 파일이 아닌경우  썸네일을 대신?</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">makeIcon</span><span class="params">(String uploadPath, String path, String fileName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String iconName = uploadPath + path + File.separator + fileName;</span><br><span class="line"><span class="keyword">return</span> iconName.substring(uploadPath.length()).replace(File.separatorChar, <span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//썸네일 이미지 생성</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">makeThumbnail</span><span class="params">(String uploadPath, String path, String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">BufferedImage sourceImg = ImageIO.read(<span class="keyword">new</span> File(uploadPath + path, fileName));</span><br><span class="line"></span><br><span class="line">BufferedImage destImg = Scalr.resize(sourceImg, Scalr.Method.AUTOMATIC, Scalr.Mode.FIT_TO_HEIGHT, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">String thumbnailName = uploadPath + path + File.separator + <span class="string">"s_"</span> + fileName;</span><br><span class="line"></span><br><span class="line">File newFile = <span class="keyword">new</span> File(thumbnailName);</span><br><span class="line">String formatName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ImageIO.write(destImg, formatName.toUpperCase(), newFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> thumbnailName.substring(uploadPath.length()).replace(File.separatorChar, <span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="예제소스"><a href="#예제소스" class="headerlink" title="예제소스"></a>예제소스</h3><p>위 설정과 유틸리티를 만들었다면, 아래예제 화면2개, 컨트롤러1 파일 업로드 테스트가 가능하다.<br>thymeleaf를 사용한 예제이다.<br>jsp에 html만 옮기고 url만 잡아주면 동작할 것이다.</p><p><strong>1.Post방식으로 파일업로드.</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;sample/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        파일 업로드 테스트1</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Optional description<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 예제<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>read<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content container-fluid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--------------------------</span></span><br><span class="line"><span class="comment">        | Your Page Content Here |</span></span><br><span class="line"><span class="comment">        --------------------------&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>파일업로드 테스트 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- form start --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;form id="form1" action="/sample/upload/uploadForm" method="post" enctype="multipart/form-data"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/sample/upload/uploadForm"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- &lt;label for="exampleInputBoardTitle"&gt;Title&lt;/label&gt;</span></span><br><span class="line"><span class="comment">                  &lt;input type="text"  class="form-control"&gt; --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>제출<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;button type="submit" class="btn btn-danger"&gt;Remove&lt;/button&gt;</span></span><br><span class="line"><span class="comment">                &lt;button type="submit" class="btn btn-primary"&gt;ListPage&lt;/button&gt; --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.ajax 파일 업로드 화면.</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;sample/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".fileDrop"</span>).on(<span class="string">"dragenter dragover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".fileDrop"</span>).on(<span class="string">"drop"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line">event.preventDefault();</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> files = event.originalEvent.dataTransfer.files;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> file = files[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//console.log(file);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">// HTML5</span></span></span><br><span class="line"><span class="actionscript">formData.append(<span class="string">"file"</span>, file);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'/sample/upload/uploadAjax'</span>,</span></span><br><span class="line">data: formData,</span><br><span class="line"><span class="actionscript">dataType: <span class="string">'text'</span>,</span></span><br><span class="line"><span class="actionscript">processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">type: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="actionscript">success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//alert(data);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//서버로 파일을 전송한 다음에 그 파일을 다시 받아온다.?</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//이미지 인경우 썸네일을 보여준다.</span></span></span><br><span class="line">if(checkImageType(data))&#123;</span><br><span class="line"><span class="actionscript">str = <span class="string">"&lt;div&gt;"</span></span></span><br><span class="line"><span class="actionscript">+ <span class="string">"&lt;a href='/sample/upload/displayFile?fileName="</span> + getImageLink(data) + <span class="string">"'&gt;"</span></span></span><br><span class="line"><span class="actionscript">+ <span class="string">"&lt;img src='/sample/upload/displayFile?fileName="</span> + data + <span class="string">"'/&gt;"</span></span></span><br><span class="line"><span class="actionscript">+ <span class="string">"&lt;/a&gt;"</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">+ "<span class="tag">&lt;<span class="name">small</span> <span class="attr">data-src</span>=<span class="string">'" + data + "'</span>&gt;</span>X<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>";</span></span></span><br><span class="line"><span class="actionscript">&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">str = <span class="string">"&lt;div&gt;"</span></span></span><br><span class="line"><span class="actionscript">+ <span class="string">"&lt;a href='/sample/upload/displayFile?fileName="</span> + data + <span class="string">"'&gt;"</span></span></span><br><span class="line"><span class="actionscript">+ getOriginalName(data) + <span class="string">"&lt;/a&gt;"</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">+ "<span class="tag">&lt;<span class="name">small</span> <span class="attr">data-src</span>=<span class="string">'" + data + "'</span>&gt;</span>X<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>";</span></span></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//else</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".uploadedList"</span>).append(str);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">&#125;);<span class="comment">// ajax</span></span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/* 컨트롤러로 부터 전송받은 파일이 이미지 파일인지 확인하는 함수 */</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">checkImageType</span><span class="params">(fileName)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pattern = <span class="regexp">/jpg$|gif$|png$|jpeg$/i</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> fileName.match(pattern);</span></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//checkImageType</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//파일 이름 처리 : UUID 가짜 이름 제거</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getOriginalName</span><span class="params">(fileName)</span></span>&#123;</span></span><br><span class="line">if(checkImageType(fileName))&#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> idx = fileName.indexOf(<span class="string">"_"</span>) + <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> fileName.substr(idx);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//getOriginalName</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//이미지 원본 링크 제공</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getImageLink</span><span class="params">(fileName)</span></span>&#123;</span></span><br><span class="line"></span><br><span class="line">if(!checkImageType(fileName))&#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>;</span></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//if</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> front = fileName.substr(<span class="number">0</span>, <span class="number">12</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> end = fileName.substr(<span class="number">14</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> front + end;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//getImageLink</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//업로드 파일 삭제 처리</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">".uploadedList"</span>).on(<span class="string">"click"</span>, <span class="string">"small"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> that = $(<span class="keyword">this</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">alert($(<span class="keyword">this</span>).attr(<span class="string">"data-src"</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">"/sample/upload/deleteFile"</span>,</span></span><br><span class="line"><span class="actionscript">type: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">data: &#123;<span class="attr">fileName</span>:$(<span class="keyword">this</span>).attr(<span class="string">"data-src"</span>)&#125;,</span></span><br><span class="line"><span class="actionscript">dataType: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">success : <span class="function"><span class="keyword">function</span><span class="params">(result)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(result == <span class="string">'deleted'</span>)&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//alert("deleted");</span></span></span><br><span class="line"><span class="actionscript">that.parent(<span class="string">"div"</span>).remove();</span></span><br><span class="line"><span class="actionscript">&#125;<span class="comment">//</span></span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">&#125;);<span class="comment">//uploadedList</span></span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.fileDrop</span>&#123;</span></span><br><span class="line">width: 100%;</span><br><span class="line">height: 200px;</span><br><span class="line">border: 1px dotted blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">small &#123;</span><br><span class="line">margin-left: 3px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">color: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">       Ajax 파일 업로드</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Optional description<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 예제<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>read<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content container-fluid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--------------------------</span></span><br><span class="line"><span class="comment">        | Your Page Content Here |</span></span><br><span class="line"><span class="comment">        --------------------------&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>Ajax File Upload<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- form start --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;form id="form1" action="/sample/upload/uploadForm" method="post" enctype="multipart/form-data"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/sample/upload/uploadForm"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fileDrop"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;button type="submit" class="btn btn-warning"&gt;제출&lt;/button&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"uploadedList"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UploadController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hanumoka.sample.util.MediaUtils;</span><br><span class="line"><span class="keyword">import</span> com.hanumoka.sample.util.UploadFileUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sample/upload/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"uploadPath"</span>)</span><br><span class="line"><span class="keyword">private</span> String uploadPath;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/uploadForm"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFormGET</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/sample/upload/uploadForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Post 방식 파일 업로드</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/uploadForm"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFormPOST</span><span class="params">(MultipartFile file, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"uploadFormPost"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(file != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.info(<span class="string">"originalName:"</span> + file.getOriginalFilename());</span><br><span class="line">logger.info(<span class="string">"size:"</span> + file.getSize());</span><br><span class="line">logger.info(<span class="string">"ContentType:"</span> + file.getContentType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"savedName"</span>, savedName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/sample/upload/uploadForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//업로드된 파일을 저장하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">uploadFile</span><span class="params">(String originalName, <span class="keyword">byte</span>[] fileDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">UUID uid = UUID.randomUUID();</span><br><span class="line"></span><br><span class="line">String savedName = uid.toString() + <span class="string">"_"</span> + originalName;</span><br><span class="line">File target = <span class="keyword">new</span> File(uploadPath, savedName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.springframework.util 패키지의 FileCopyUtils는 파일 데이터를 파일로 처리하거나, 복사하는 등의 기능이 있다.</span></span><br><span class="line">FileCopyUtils.copy(fileDate, target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> savedName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Ajax 파일 업로드</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/sample/upload/uploadAjax"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadAjaxGET</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/sample/upload/uploadAjax"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ajax 파일 업로드 produces는 한국어를 정상적으로 전송하기 위한 속성</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/sample/upload/uploadAjax"</span>, method = RequestMethod.POST, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadAjaxPOST</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"originalName:"</span> + file.getOriginalFilename());</span><br><span class="line">logger.info(<span class="string">"size:"</span> + file.getSize());</span><br><span class="line">logger.info(<span class="string">"contentType:"</span> + file.getContentType());</span><br><span class="line"></span><br><span class="line"><span class="comment">//String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HttpStatus.CREATED : 리소스가 정상적으로 생성되었다는 상태코드.</span></span><br><span class="line"><span class="comment">//return new ResponseEntity&lt;&gt;(file.getOriginalFilename(), HttpStatus.CREATED);</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(UploadFileUtils.uploadFile(uploadPath, file.getOriginalFilename(), file.getBytes()), HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//화면에 저장된 파일을 보여주는 컨트롤러 /년/월/일/파일명 형태로 입력 받는다.</span></span><br><span class="line"><span class="comment">// displayFile?fileName=/년/월/일/파일명</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/sample/upload/displayFile"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; displayFile(String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"File name: "</span> + fileName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String formatName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">MediaType mType = MediaUtils.getMediaType(formatName);</span><br><span class="line"></span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line"></span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(uploadPath + fileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mType != <span class="keyword">null</span>) &#123;</span><br><span class="line">headers.setContentType(mType);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fileName = fileName.substring(fileName.indexOf(<span class="string">"_"</span>)+<span class="number">1</span>);</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename=\""</span> + <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"ISO-8859-1"</span>) + <span class="string">"\""</span>);</span><br><span class="line">&#125;<span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">entity = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(IOUtils.toByteArray(in), headers, HttpStatus.CREATED);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">entity = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(HttpStatus.BAD_REQUEST);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;<span class="comment">// displayFile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//업로드된 파일 삭제 처리</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/sample/upload/deleteFile"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">deleteFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"delete file:"</span> + fileName);</span><br><span class="line"></span><br><span class="line">String formatName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">MediaType mType = MediaUtils.getMediaType(formatName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mType != <span class="keyword">null</span>) &#123;</span><br><span class="line">String front = fileName.substring(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">String end = fileName.substring(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">new</span> File(uploadPath + (front+end).replace(<span class="string">'/'</span>, File.separatorChar)).delete();</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> File(uploadPath + fileName.replace(<span class="string">'/'</span>, File.separatorChar)).delete();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;String&gt;(<span class="string">"deleted"</span>, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180906-spring-file-upload_1.png" alt="동작예시"></p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p>코드로 배우는 스프링 웹 프로젝트(남가람북스)</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> File upload </tag>
            
            <tag> 파일업로드 </tag>
            
            <tag> 스프링 </tag>
            
            <tag> 썸네일 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript - Module 패턴(전역스코프를 지켜라)</title>
      <link href="/2018/09/04/javascript-20180904-javascript-design-patterns/"/>
      <url>/2018/09/04/javascript-20180904-javascript-design-patterns/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>웹 프로젝트를 하다보면 공통적으로 사용할 유틸리티 등을 common.js 와 같이 분리하여 개발할 필요가 생긴다.<br>이때 고려할점은 자바스크립트의 전역 스코프의 변수명 관리가 힘들다는 것이다.</p><p>예를 들어 common1.js와 common2.js 두개를 동시에 참조하여 사용파는 페이지가 있다고 가정했을때,</p><p><strong>common1.js 내부</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> commonObj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someUtil = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>common2.js 내부</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> commonObj2 = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someUtil = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>위처럼 전역변수의 명이 겹쳐지는 상황이 발생할 수도 있다.<br>만약 수십개의 js 파일에 각각 수십개의 변수명이 선언된다면…<br>아무리 개발룰을 통일해서 잘 개발한다 하더라도 전역스코프에 변수명이 겹쳐지는 위험성을 피할수는 없다.<br>Module 패턴을 이용하면 위와 같은 전역스코프의 오염을 <strong>어느정도</strong> 줄일수 있다.</p><hr><h3 id="Module-패턴"><a href="#Module-패턴" class="headerlink" title="Module 패턴"></a>Module 패턴</h3><p>javascript에서 java와 같은 고급언어의 클래스의 캡슐레이션을 구현하기 위해 사용되는 패턴이다.<br>말 그대로 자바스크립트 코드를 모듈화 하여 사용한다.</p><p><strong>기본구조</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someObj = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// private 변수들과 함수들 위치</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="comment">//public 변수들과 함수들 선언</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>모듈패턴은 자바스크립트의 클로저와 즉시실행함수를 이용하여 구현된다.<br>즉시실행함수를 통해 <strong>위 코드는 로드가 되는 순간 바로 동작하여 1개의 객채를 리턴</strong>하여 someObj에 할당하게 된다.<br>즉 someObj는 java의 static 클래스와 비슷해진다.</p><p>구체적으로 예들 들면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private 변수들 함수</span></span><br><span class="line">  <span class="keyword">var</span> _age = <span class="number">12</span>; <span class="comment">// java로 따지면 static 변수가 된다.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    getAge : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _age;</span><br><span class="line">    &#125;,</span><br><span class="line">    setAge : <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">      _age = age</span><br><span class="line">    &#125;,</span><br><span class="line">    getOld : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      _age++;</span><br><span class="line">    &#125;,</span><br><span class="line">    getYoung : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      _age--;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.getAge());</span><br><span class="line"></span><br><span class="line">obj1.setAge(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.getAge());</span><br><span class="line"></span><br><span class="line">obj1.getOld()</span><br><span class="line"><span class="built_in">console</span>.log(obj1.getAge());</span><br><span class="line"></span><br><span class="line">obj1.getYoung()</span><br><span class="line"><span class="built_in">console</span>.log(obj1.getAge());</span><br></pre></td></tr></table></figure><p><img src="/images/20180904-javascript-design-patterns_1.png" alt="위 코드의 실행결과"></p><p>모듈 패턴을 사용하여 자바스크립트의 소스코드를 모듈화 하고, 전역스코프를 어느정도 깨끗하게 유지할수 있다.<br>하지만 궁극적으로 모듈명, 즉 위의 obj1의 이름의 충돌 자체는 막을수 없다.<br>이를 위해서 어느정도 개발규약이 필요하다.</p><p><strong>모듈명의 충돌을 막기위해, 모듈명은 js파일명과 동일하게 하여 최대한 유니크성을 지켜야 한다.</strong></p><hr><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>자바스크립트를 조금 보니 별별 패턴이 다있다.<br>아마도 위 모듈명이 충돌되는 것도 방지하는 무언가 이미 있지 않을까 생각된다.<br>아 공부를 하면 할수록 아는것 보다 모르는게 많아지는 느낌이다.</p><hr><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://kkd927.github.io/general/web/javascript/2017/04/12/4-JavaScript-Design-Patterns-You-Should-Know.html" target="_blank" rel="external nofollow noopener noreferrer">https://kkd927.github.io/general/web/javascript/2017/04/12/4-JavaScript-Design-Patterns-You-Should-Know.html</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Module pattern </tag>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring4 HiddenHttpMethodFilter HiddenMethod(REST를 지원하지 않는 브라우저 처리)</title>
      <link href="/2018/09/02/spring-20180902-Spring4-Rest-HiddenMethod/"/>
      <url>/2018/09/02/spring-20180902-Spring4-Rest-HiddenMethod/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180902-Spring4-Rest-HiddenMethod_1.png" alt="스프링로고"></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>혹시나 하는 마음으로 메모를 한다.<br>PUT, PATCH, DELETE 방식의 메소드를 지원하지 않는 브라우저가 있다고 하는데….<br>이를 위해 스프링 진영에서 HiddenHttpMethodFilter 라는 것을 제공한다.</p><p>HiddenHttpMethodFilter 맥락은 HiddenMethod(지원이 안되는 메소드명을 _method라는 이름에 담아서) + POST 요청을 스프링 컨트롤러에 전송하는 방법이다.<br>HiddenHttpMethodFilter 는 요청에서 _method 의 값을 필터링 해서 적절한 컨트롤러로 연결해주는 것 같다.</p><h3 id="web-xml-설정"><a href="#web-xml-설정" class="headerlink" title="web.xml 설정"></a>web.xml 설정</h3><p>web.xml 에 아래 필터를 <strong>추가</strong>한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Enables support for DELETE and PUT request methods with web browser clients --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="화면단"><a href="#화면단" class="headerlink" title="화면단"></a>화면단</h3><p>회원을 삭제하는 요청을 아래처럼 만들수 있다.<br>중요한 것은 form의 method는 post이고, form 내부에 _method라는 이름에 delete 값을 갖는 input 태그가 있다.<br>위에서 말했듯이 아래 form을 전송하면 form method대로 post형식으로 리퀘스트가 스프링에게 전송된다.<br>hiddenHttpMethodFilter는 리퀘스트를 후킹해서 _mehtod 값을 읽어 그 내용과 일체하는 컨트롤러를 찾아 연결해준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/sample/deleteUser"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_mehtod"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"deleteUser"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>사실 요즘 REST가 지원이 안되는 브라우저가 있는지는 모르겠다.<br>혹시나 해서….</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> HiddenMethod </tag>
            
            <tag> HiddenHttpMethodFilter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring AOP 요약정리(용어정리)</title>
      <link href="/2018/09/01/spring-20180901-spring-AOP-summary/"/>
      <url>/2018/09/01/spring-20180901-spring-AOP-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="/2018/08/24/spring-20180824-spring4-aop-logging/">Spirng AOP를 이용하여 Service클래스에 로그 찍기</a></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>개인적으로 Spring의 AOP는 말, 단어가 어렵고 햇갈리는 것 같다.<br>요약정리를 통해, AOP(Aspect Oriented Programming)를 후려쳐보겠다.<br>이 글을 예제를 포함하지 않고 대략적인 AOP의 정의 정도만 설명하고 있다.</p><p>만약 예제를 보고 싶다면 위 참고링크를 보길…</p><h3 id="AOP-Aspect-Oriented-Programming-란"><a href="#AOP-Aspect-Oriented-Programming-란" class="headerlink" title="AOP(Aspect Oriented Programming)란?"></a>AOP(Aspect Oriented Programming)란?</h3><p>Aspect Oriented Programming는 한국말로 관점지향프로그래밍 이다.<br>어우야 한국말은 더 어렵다.</p><p>아주 간단하게 후려치면 AOP는 <strong>프로그램의 전체 로직을 크게 비지니스 로직과 공통로직(Aspect라고 부른다.)을 분리하는 프로그래밍 기법이다.</strong></p><p><img src="/images/20180901-spring-AOP-summary_1.png" alt="AOP의 가장 큰 기능은 로직(소스코드의 연관성)의 분리이다."></p><p>위 그림처럼 공통로직(로깅, 트랜젝션 등)을 비지니스 로직 내부에서 호출하는 것이 아니라, AOP라는 대리자가 대신 호출해주는 구조이다.<br>여기서 프록시 패턴이 이용된다.(스프링에 AOP설정을 할때, 프록시 오브젝트를 생성해야 한다.)</p><p>스프링의 지향점은 비 침투적인 프로그래밍이다.<br>로깅, 트랜젝션같은 로직(소스코드)은 프로그램 전체에서 사용할 공통 로직이다.<br>예를 들어 100개의 서비스 클래스에 전달되는 파라미터를 찍는 로깅<br>이런 공통 로직이 만약 비지니스 로직에 침투적으로 사용되어 의존성이 발생하는 것을 피할수 있는 프로그래밍이 AOP이다.</p><p>즉 비지니스 로직 소스코드에 트랜잭션, 로깅과 같은 기능의 소스코드가 없이 트랜잭션과 로깅을 사용 할 수 있다는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//비지니스 로직을 담당하는 클래스가 아래처럼 있었다면.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BizObj</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">runSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//이렇게 로그를 찍는 공통로직이 비지니스 로직에 침투적으로 있던 것을</span></span><br><span class="line">    BizLogUtil bizLog = <span class="keyword">new</span> BizLogUtil();</span><br><span class="line">    bizLog.log();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP를 이용하면 아래처럼 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BizObj</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">runSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//이렇게 순수한 비지니스 로직으로 만들수 있다.</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 비지니스 로직 클래스에서는 로깅에 관한 어떠한 소스코드도 없지만 AOP를 사용여 runSomething 함수가 동작할때, BizLogUtil를 호출 할 수 있다.</p><hr><h3 id="AOP-용어-정리"><a href="#AOP-용어-정리" class="headerlink" title="AOP 용어 정리"></a>AOP 용어 정리</h3><p><strong>Aspect:</strong> 공통 관심사에 대한 추상적인 명칭. 예를 들어 로깅이나 보안, 트랜잭션과 같은 기능 등을 가리킨다. </p><p><strong>Advice:</strong> 실제로 기능을 구현한 객체, 공통로직을 담고 있는 클래스가 된다.</p><p><strong>Join points:</strong> 공통 관심사를 적용할 수 있는 대상. Spring AOP에서는 각 객체의 메소드가 이에 해당</p><p><strong>Pointcuts:</strong> 여러 메소드 중 실제 Advice가 적용될 대상 메소드</p><p><strong>target:</strong> 대상 메소드를 가지는 객체</p><p><strong>Proxy:</strong> Advice가 적용되었을 때 만들어지는 객체</p><p><strong>Introduction:</strong> target에는 없는 새로운 메소드나 인스턴스 변수를 추가하는 기능</p><p><strong>Weaving:</strong> Advice와 target이 결함되어서 프록시 객체를 만드는 과정</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VO(Value Object), DTO(Data Transfer Object) 구분해서 사용하기.</title>
      <link href="/2018/08/28/programing-etc-20180828-VO-Value-Object-vs-DTO-Data-Transfer-Object/"/>
      <url>/2018/08/28/programing-etc-20180828-VO-Value-Object-vs-DTO-Data-Transfer-Object/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>VO = Value Object, DTO = Data Transfer Object<br>사실 난 위 두형태의 클래스를 그저 도메인 단위의 데이터를 저장하는 용도로 여겼었다.<br>그리고 내가 경험한 프로젝트에는 보통 VO라는 명칭의 클래스를 사용했었다.<br>(DTO라는 명명으로 클래스를 사용해 본적 없다.)</p><p>그러나 지금 내가 보고 있는 스프링 책에서는 이 VO와 DTO를 구분해서 사용하는데, 그 내용이 재미있어 정리해본다.</p><hr><h3 id="VO와-DTO를-구분해서-사용"><a href="#VO와-DTO를-구분해서-사용" class="headerlink" title="VO와 DTO를 구분해서 사용"></a>VO와 DTO를 구분해서 사용</h3><p>VO와 DTO둘다 데이터를 저장하는 용도이다.<br>다만 각각 밀접한 영역을 구분해서 사용한다.</p><p>VO는 Database와 밀접하다.<br>즉 DB의 도메인정보를 클라이언트에게 전달할 때, 그 도메인단위 정보를 VO로 구현하여 사용한단다.</p><p><img src="/images/20180828-VO-Value-Object-vs-DTO-Data-Transfer-Object_1.png" alt="VO는 이렇게 DB에 밀접한 데이터를 클래스화할때 사용한다."></p><p>위처럼 예를들어 사용자 정보를 DB에서 가져오거나, 아니면 View로부터 사용자 정보를 가져와 DB에 저장할때 VO를 사용한다.(위 이미지가 화살표가 일방향이지만, 양방향 모두 가능하다.)</p><p><strong>UserVO예제 소스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String uid;</span><br><span class="line"><span class="keyword">private</span> String upw;</span><br><span class="line"><span class="keyword">private</span> String uname;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> upoint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUpw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpw</span><span class="params">(String upw)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upw = upw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upoint;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpoint</span><span class="params">(<span class="keyword">int</span> upoint)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upoint = upoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserVO [uid="</span> + uid + <span class="string">", upw="</span> + upw + <span class="string">", uname="</span> + uname + <span class="string">", upoint="</span> + upoint + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 DTO는 VO보다 조금 더 협소한 영역에서 사용한다.</p><p><img src="/images/20180828-VO-Value-Object-vs-DTO-Data-Transfer-Object_2.png" alt="LoginDTO는 로그인 요청이 뷰에서 컨트롤러로 전송될때 사용된다."></p><p><strong>LoginDTO 예제소스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String uid;</span><br><span class="line"><span class="keyword">private</span> String upw;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> useCookie;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUpw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpw</span><span class="params">(String upw)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upw = upw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUseCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> useCookie;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUseCookie</span><span class="params">(<span class="keyword">boolean</span> useCookie)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.useCookie = useCookie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Login을 위한 데이터는 UserVO와 완벽히 일치하지 않는다.<br>UserVO가 가진 맴버변수보다 적은 멤버변수를 갖을 수 있으며, UserVO에는 없는 추가적인 변수를 가질수도 있다.<br>이렇게 DB의 도메인과 일치하지 않으며, 어떤 로직에 사용되는 영속적이지 않는 데이터를 포함하는 클래스를 DTO클래스로 만들어서 사용한다.<br>VO는 DB부터 View까지 양방향적으로 사용되는데 반해, DTO는 뷰에서 컨트롤러 방향으로 일방향 적으로 사용된다.</p><p>여태 난 VO 클래스에 DTO 를 합쳐서 사용했었다.<br>이렇게 VO와 DTO를 분리하면 관리해야 할 파일의 개수가 늘어나지만, 소스의 가독성과 목적성을 쉽게 파악하고 쓸대없이 전달되는 프로퍼티를 줄일 수 있는 장점이 있다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p>코드로 배우는 스프링 웹 프로젝트(구멍가게 코딩단)</p>]]></content>
      
      
      <categories>
          
          <category> programing_etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VO </tag>
            
            <tag> DTO </tag>
            
            <tag> Value Object </tag>
            
            <tag> Data Transfer Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 프로젝트를 통해서 Webpack을 알아보자.(vue simple webpack project)</title>
      <link href="/2018/08/26/vue-20180826-web-webpack/"/>
      <url>/2018/08/26/vue-20180826-web-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이번에 Vue.js를 공부하게 되면서 Webpack이라는 것을 실제 접하게 되었다.<br>물론 인터넷에서 Webpack이라는 말은 자주 들어보았지만, 이것에 대해 전혀 감이 없었다.<br>이번 기회에 Webpack에 대한 아주 간단한 개념정리와, webpack 번들링을 한번 해보겠다.<br>Vue simple-webpack 프로젝트를 사용한다.</p><p>참고로 본인은 Vue도 Webpack도 잘 모른다.<br>그냥 지금까지 공부한 것을 아주 후려처서 정리한 내용이다.</p><hr><h3 id="Webpack의-정의"><a href="#Webpack의-정의" class="headerlink" title="Webpack의 정의"></a>Webpack의 정의</h3><p><strong>웹팩은 모듈번들러다.</strong><br>난 처음 이말을 들었을때, 이게 대체 무슨소린가 했다.<br>프론트엔드 기술에 대한 막연한 두려움이 아마 이때 생겨 났던것 같다.</p><p>일단 웹팩이 무엇인지 알기위해 가장 쉬운 방법은 실질적으로 개발자가 웹팩으로 무엇을 하는지 알면 된다.<br>일단 다음 이미지를 확인해 보자.</p><p><img src="/images/20180826-web-webpack_1.png" alt="내 Spring 샘플 프로젝트의 html의 일부분이다."></p><p>위 html파일을 보면 상당히 많은 js 파일을 추가적으로 가져오는 것을 알 수 있다.<br>요즘 웹 화면은 PC, 모바일의 앱처럼 다양한 기능과 유려한 화면구성을 갖는다.</p><p>당연히 html 페이지는 수많은 js, css, image 등을 추가적으로 가져와야 한다.</p><p>웹팩은 이 추가적으로 가져와야 할 이 수많은 것들을(js, css, image) 하나의 js파일로 만들어 버린다.</p><p><img src="/images/20180826-web-webpack_2.png" alt="즉 html 파일은 이렇게 간단하게 변한다는 의미이다."></p><p>수많은 외부 리소스등을 하나의 js파일로 묶어서 사용함으로써, 기존에 발생한 수많은 network request가 하나의 request로 만들어 브라우저의 로딩성능을 높일 수 있다.<br>(번들링 뿐만 아니라 더불어 난독화등 다양한 기능을 추가적으로 제공한다.)</p><p>그리고 번들링(하나로 합칠때)할때 JS 모듈의 의존관계를 알아서 반영해준다.<br>내부적으로 대체 어떻게 돌아가는지는 몰라도 참으로 신박한 녀석이다.<br>Webpack과 비슷한 모듈번들러로 gulp, grunt라는 것도 있다고 한다.</p><p>하지만 현재 기능, 성능면에서 Webpack이 가장 뛰어 나다고 한다.</p><hr><h3 id="Vue-프로젝트를-이용한-Webpack의-간단-실습-및-설명"><a href="#Vue-프로젝트를-이용한-Webpack의-간단-실습-및-설명" class="headerlink" title="Vue 프로젝트를 이용한 Webpack의 간단 실습 및 설명"></a>Vue 프로젝트를 이용한 Webpack의 간단 실습 및 설명</h3><p>실제 Vue의 웹팩 프로젝트를 통해 실습과 설명을 진행하겠다.<br>잘 모를땐 일단 키보드를 때려보는게 좋을거 같다.</p><p><strong>전재조건 :Node와 Vue CLI가 설치되어 있어야 한다.</strong></p><p><strong>1.특정 TestVueSample 이라는 폴더를 만들고 Vue webpack-simple 프로젝트를 만들자.</strong></p><p>볼더를 만들고 그 경로에서 아래 명령어로 Vue webpack simple 프로젝트를 만들자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple</span><br></pre></td></tr></table></figure><p><img src="/images/20180826-web-webpack_3.png" alt="vue webpack simple 프로젝트를 생성하자."></p><p>명령어로 생성된 파일과 폴더중 중요한 것들을 집어보자.</p><hr><p><strong>가.package.json</strong> </p><p>위 파일은 npm 패키지 정보를 담고 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"testvuesample"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"webpack test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"hanumoka"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --progress --hide-modules"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.5.11"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,</span><br><span class="line">    <span class="string">"last 2 versions"</span>,</span><br><span class="line">    <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-3"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^0.28.7"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^1.1.4"</span>,</span><br><span class="line">    <span class="attr">"vue-loader"</span>: <span class="string">"^13.0.5"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.4.4"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scripts 항목을 보면 dev, build가 있다.<br>npm run dev 명령어를 실행하면 cross-env NODE_ENV=development webpack-dev-server –open –hot 명령어가 실행된다.<br>마찬가지로 npm run build 명령어를 실행하면 cross-env NODE_ENV=production webpack –progress –hide-modules 가 실행된다.</p><p>npm run build에 맵핑된 명렁어를 보면 webpack 명렁어가 들어있다.<br>즉 npm run bulid 명령어를 실행하면 방금 생성한 Vue simple webpack 프로젝트를 webpack으로 빌드하게 된다. </p><hr><p><strong>나.index.html</strong></p><p>방금 생성한 뷰 프로젝트의 진입점 html이다.<br>/dist/build.js 를 참고 하고 있는데, 앞서 말했듯이 이것은 Webpack에 의해 번들링된 결과물이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testvuesample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/build.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>다.webpack.config.js</strong></p><p>위 파일은 webpack이 프로젝트를 빌드할때 참고하는 설정 파일이다.<br>webpack의 핵심파일이라고 생각하면 된다.<br>이 파일에는 <strong>webpack core인 entry, output, loaders, plugins</strong> 의 정보가 들어간다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">    filename: <span class="string">'build.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'vue-style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'*'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">true</span>,</span><br><span class="line">    overlay: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'#eval-source-map'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//이 부분은 배포할때 동작하는 로직으로 souceMap을 생성한다.</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></span><br><span class="line">  <span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class="line">  <span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      sourceMap: <span class="literal">true</span>,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아 길다… 어렵다… 모르겠다.</p><p>중요한 것만 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line"> output: &#123;</span><br><span class="line">   path: path.resolve(__dirname, <span class="string">'./dist'</span>), <span class="comment">//프로넥트 내부의 dist 폴더 경로에 빌드 결과물 생성</span></span><br><span class="line">   publicPath: <span class="string">'/dist/'</span>, <span class="comment">//index.html 파일기준 참조 폴더(말이 좀 이상한데,뒤에 설명...)</span></span><br><span class="line">   filename: <span class="string">'build.js'</span>  <span class="comment">//Webpack에 의해서 만들어진 최종 파일</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>entry와 output이다.</strong><br>entry는 말 그대로 Webpack이 번들링할때 사용하는 진입점 js 파일이다.<br>output은 Webpack이 번들링한 그 결과물에 대한 설정 정보이다.</p><p>그리고 module 영역도 살펴보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'vue-style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>모듈 내부에 있는 것들은 <strong>loader</strong> 이다.<br>WebPack은 css, js, image 등을 하나로 뭉쳐서 하나의 파일로 번들링(build.js) 한다고 했다.<br>loader는 이름 그대로 WebPack이라는 압축기에 Css 등을 수집하여 적재해주는 트럭 같은 녀석이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'vue-style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>위 녀셕을 보면 프로젝트의 모든 css 확장자 파일들을 vue-style-loader와 css-loader라는 로더를 사용해서 WebPack에게 적재 시키겠다는 의미이다.</p><p>여기에서 Vue를 위한 Vue loader도 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>마찬가지로 vue 확장자를 갖는 파일들을 vue-loader로 적재한다.<br>이 부분을 조금더 설명하자면, 브라우저는 vue확장자 파일을 인식을 하지 못한다.<br>개발할때 만들어진 Vue 파일들은 WebPack에 적재하고, WebPack은 이 Vue파일들을 html파일로 변환하여, 브라우저가 인식 할수 있게 컨버팅 해준다.</p><p>위 설정에는 없지만 webpack에는 <strong>plugins</strong> 이라는 것도 있다.<br>사실 이부분은 잘 모른다.<br>대충 찾아보니 webpack에 의해 번들된 결과물에 여러가지 후처리를 할수 있는 유틸리티 정도의 역할을 하는 것 같다.</p><p>예를 들어 번들링된 js 소스를 난독화, css를 sass로 변환 등 다양한 기능이 있는 것 같다.</p><p><strong>2.일단 Vue Webpack simple 프로젝트를 동작 시켜보자.</strong></p><p>방금 예제에서 프로젝트 생성까지만 했다.<br>최초 생성시 npm install 명령어로 모듈들을 다운 받아야 한다.</p><p>아래 명령어를 이용해서 라이브러리를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/images/20180826-web-webpack_4.png" alt="npm install 명령어으로 라이브러리 다운로드"></p><p>그리고 <strong>npm run dev</strong> 명령어를 입력해보자.</p><p>앞서 설정에서 봤듯이 <strong>cross-env NODE_ENV=development webpack-dev-server –open –hot</strong> 명령어를 직접 입력해도 된다.</p><p><img src="/images/20180826-web-webpack_5.png" alt="자동으로 웹 브라우저창이 뜨며 Vue 프로젝트가 실행된다."></p><p>이 것은 webpack-dev-server가 동작하면서 메모리에 실시간으로 프로젝트를 웹펙으로 빌드하고 있는 상황이다.<br>따라서 프로그램을 수정하면 실시간으로 브라우저에 반영된다.</p><p><strong>3.Vue webpack-simple 프로젝트를 webpack으로 빌드해보자.</strong></p><p>이번에는 <strong>npm run build</strong> 명령어를 실행해 보자.</p><p><img src="/images/20180826-web-webpack_6.png" alt="dist폴더와 그 내부에 webpack의 빌드 결과물이 생성된다."></p><p>그렇다면 webpack-dev-server없이 index.html 파일을 브라우저에 열면 vue 프로젝트가 동작 할까?</p><p>이상하게 동작이 되지 않는다.</p><p><img src="/images/20180826-web-webpack_7.png" alt="ㅋㅋㅋ 안된다."></p><p>이유는 지금 webpack.config.js 의 output 설정이 좀 이상하기 때문이다.</p><p>생성된 dist 폴더를 C 드라이브로 옮겨보자.</p><p><img src="/images/20180826-web-webpack_8.png" alt="dist 폴더를 복사해서 C드라이브에 옮겨보면 잘 동작한다."></p><p>음 그렇다면 설정을 변경해서, index.html 파일의 현재경로의 dist 폴더를 사용하게 수정해보자.</p><p>index.html 파일에 build.js 경로앞에 점을 찍어주자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testvuesample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/build.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 맨앞에 점을 찍자. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>webpack.config.js 파일에 output 영역도 수정해주자.<br>publicPath에도 맨 앞에 점을 찍어주자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">  publicPath: <span class="string">'./dist/'</span>,  <span class="comment">// 여기도 경로 맨앞에 점을 찍자</span></span><br><span class="line">  filename: <span class="string">'build.js'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>다시 npm run build 를 실행하고, index.html 파일을 브라우저에서 실행해 보자.</p><p><img src="/images/20180826-web-webpack_9.png" alt="정상동작을 확인 할 수 있다."></p><p>이것으로 Vue webpack-simple 프로젝트를 webpack으로 빌드해 보았다.</p><p>잠깐 빌드 결과물을 살펴보자.</p><p><img src="/images/20180826-web-webpack_10.png" alt="dist 폴더 내부"></p><p>build.js, build.js.map, logo.png 3개의 파일이 있다.</p><p>wepback이라는 모듈 번들러가 Vue simple-project를 build.js라는 파일 하나로 꽉꽉 뭉쳐하나의 파일로 만들었다.<br>덕분에 index.html에 복잡한 js, css, image 등 리소스를 가져오는 소스가 사라졌다.</p><p>build.js.map 는 사실 정확히 모르겠지만, source map이라고 해서 webpack이 프로젝트를 빌드할때 그 과정에 대한 설명서 같은 것으로 보여진다.<br>이 파일은 디버깅할때 사용된다고 한다.</p><p>그리고 logo.png는 왜….. 이것도 build.js 내부로 들어가는게 아닌가????<br>아 잘 모르겠다.</p><hr><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>사실 Vue, Webpack 둘다 모르는 상황에서 이것저것 공부해보려니 막히는 부분이 많다.<br>차근차근 공부해 나가야 겠다.</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://blog.jeonghwan.net/js/2017/05/15/webpack.html" target="_blank" rel="external nofollow noopener noreferrer">http://blog.jeonghwan.net/js/2017/05/15/webpack.html</a></p><p><a href="http://jusungpark.tistory.com/52" target="_blank" rel="external nofollow noopener noreferrer">http://jusungpark.tistory.com/52</a></p><p><a href="https://webpack.js.org/concepts/#entry" target="_blank" rel="external nofollow noopener noreferrer">https://webpack.js.org/concepts/#entry</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vue cli </tag>
            
            <tag> npm run dev </tag>
            
            <tag> npm run build </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spirng AOP를 이용하여 Service클래스에 로그 찍기</title>
      <link href="/2018/08/24/spring-20180824-spring4-aop-logging/"/>
      <url>/2018/08/24/spring-20180824-spring4-aop-logging/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>Spring MVC 프로젝트에서 Service에 Aop Advice를 걸어서 log4j로그를 찍는 예제이다.<br>xml설정이 아닌 어노테이션을 이용할 것이다.</p><hr><p>특정 패키지의 모든 service 클래스가 동작할때 파라미터등 기타 정보를 출력하는 로그와 메소드가 동작하면서 걸린 시간을 로그하는 예제이다.</p><h3 id="AOP-기초-설정하기"><a href="#AOP-기초-설정하기" class="headerlink" title="AOP 기초 설정하기"></a>AOP 기초 설정하기</h3><p><strong>1.pom.xml에 라이브러리 추가.</strong></p><p>일단 properties에 aspect 공통 버전을 설정한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java-version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">org.springframework-version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">org.springframework-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">org.aspectj-version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">org.aspectj-version</span>&gt;</span> <span class="comment">&lt;!-- aspoect 버전 설정  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">org.slf4j-version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">org.slf4j-version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 spring aop, aspectj 라이브러리를 추가한다.<br>AspectJ는 자바용 AOP 지원을 제공할 목적으로 시작된 라이브러리다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 트랜잭션 처리용 라이브러리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AspectJ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.aspectj-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.aspectj-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.root-context.xml 설정하기.</strong></p><p><img src="/images/20180824-spring4-aop-logging_1.png" alt="root-context.xml의 namesspaces탭에서 aop, tx 네임스페이스를 추가하자."></p><p>그리고 root-context.xml파일에 아래 내용을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AspectJ라이브러리를 이용한 Proxy 객체를 생성 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XML 방식으로 AOP 기능을 설정할 때 사용 : 이 예제에는 어노테이션을 사용하므로 필요없긴 하다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.Advice 클래스 생성하기.</strong></p><p>특정 패키지에 SampleAdvice 클래스를 생성하자.<br>내용은 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleAdvice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Before("execution(* com.hanumoka.sample.service.BoardService*.*(..))")</span></span><br><span class="line"><span class="comment">//target 메소도의 파라미터등 정볼르 출력한다.</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* com.hanumoka.sample.service.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLog</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">logger.info(<span class="string">"-------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 전달되는 모든 파라미터들을 Object의 배열로 가져온다. */</span></span><br><span class="line"> logger.info(<span class="string">"1:"</span> + Arrays.toString(jp.getArgs()));</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 해당 Advice의 타입을 알아낸다. */</span></span><br><span class="line">logger.info(<span class="string">"2:"</span> + jp.getKind());</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 실행하는 대상 객체의 메소드에 대한 정보를 알아낼 때 사용 */</span></span><br><span class="line">logger.info(<span class="string">"3:"</span> + jp.getSignature().getName());</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* target 객체를 알아낼 때 사용 */</span></span><br><span class="line">logger.info(<span class="string">"4:"</span> + jp.getTarget().toString());</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* Advice를 행하는 객체를 알아낼 때 사용 */</span></span><br><span class="line">logger.info(<span class="string">"5:"</span> + jp.getThis().toString());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//target 메소드의 동작 시간을 로그한다.</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.hanumoka.sample.service.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">timeLog</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">logger.info(Arrays.toString(pjp.getArgs()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//실제 타겟을 실행하는 부분이다. 이 부분이 없으면 advice가 적용된 메소드가 동작을 안할것 같다.</span></span><br><span class="line">Object result = pjp.proceed();  <span class="comment">//proceed는 Exception 보다 상위 Throwable을 처리해야 한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">logger.info(pjp.getSignature().getName() + <span class="string">" : "</span> + ( endTime - startTime));  <span class="comment">//target 메소드의 동작 시간을 출력한다.</span></span><br><span class="line">logger.info(<span class="string">"=============================="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Around를 사용할 경우 반드시 Object를 리턴해야 한다.</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스프링 컨테이너가 위 클래스를 인식할수 있도록, @Component 어노테이션이 적용되어 있다.<br>물론 root-context.xml에서 해당 패키지를 반드시 스캔 해야 한다.</p><p>어노테이션은 @Before, @Around 두개만 사용하였다.<br>com.hanumoka.sample.service 패키지의 모든 클래스의 모든 메소드를 대상으로 한다.<br>코드의 주석을 보면 대충 내용을 알수 있을 것이다.</p><p>위 소스가 적용되면 STS에서 Aop를 소스상 표시해준다.<br>(난 여태 이 의미를 모르고 있었다.)</p><p><img src="/images/20180824-spring4-aop-logging_2.png" alt="이미지를 클릭하여, 노란색 마킹을 보라."></p><p>Advice 클래스의 메소드에는 빨간 화살표가 바깥을 향하고, 이 Advice가 적용되는 Target클래스의 메소드는 빨간 화살표가 바깥에서 안쪽을 향하고 있다.<br>이것은 AOP관련 표시를 STS에서 자동으로 해주는 것이다.</p><p>com.hanumoka.sample.service 를 사용하는 컨트롤러를 동작 시켜보자.</p><p><img src="/images/20180824-spring4-aop-logging_3.png" alt="아래처럼 로그가 찍힌다."></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
            <tag> aspectj </tag>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html - a 태그 링크 동작 꺼버리기(a href)</title>
      <link href="/2018/08/23/html-20180823-html-a-tag-no-action/"/>
      <url>/2018/08/23/html-20180823-html-a-tag-no-action/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>html a 태그(앵커)는 html 문서에서 링크를 지정하는 태그이다.<br>그 표시로 마우스 커서를 a 태그에 가져가면 커서가 손 모양으로 변한다.</p><p>개발하다보면, 이 a 태그의 링크 동작이 필요 없는 경우가 있다.<br>(javascript 라이브러리로 동적으로 a 태그를 수정하는 경우…)</p><p>인터넷을 찾아본 결과 한 4가지 정도의 방법을 찾았다.</p><h3 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h3><p>아래 html 페이지가 그 예제이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>a herf 링크 동작 꺼버리기<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span> &#123;<span class="attribute">cursor</span>:pointer;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>링크 테스트 #<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="comment">&lt;!-- #을 쓰면 해당 페이지의 최상단으로 화면이 움직인다. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 아래 3가지 방법은 #을 쓰는 방식과 달리 링크를 클릭해도 해당 페이지의 최 상단으로 이동하지 않는다. href 태그에 undefined가 전달되면 링크는 동작하지 않게 된다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>링크 테스트 javascript:void(0);<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>링크 테스트 javascript:;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 이런식으로 href 어트리뷰트를 아예 안쓸수도 있다. 다만 이 경우 마우스커서가 손가락 모양으로 변하지 않는데, 위 style태그에서 마우서커서를 pointer로 처리해서 사용한다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">""</span>&gt;</span>링크 테스트 onclick<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/20180823-html-a-tag-no-action_1.png" alt="a 태그 테스트 화면"></p><p>위 예제의 주석을 보면 대충 어떻게 쓰는지 알수 있을 것이다.</p><p>인터넷을 찾아보니 위 방법중 어떤것은 좋고 나쁘고 왈가왈부가 많은데(웹표준 등등) 솔직히 난 뭐가 나쁘고 좋은지 잘 모르겠다.<br>그냥 쓰기에는 맨 마지막 방법인 href대신 onClick 이벤트를 쓰는 것이 편해보인다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://blog.outsider.ne.kr/223" target="_blank" rel="external nofollow noopener noreferrer">https://blog.outsider.ne.kr/223</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> a href=&#39;#&#39; </tag>
            
            <tag> javascript:void(0); </tag>
            
            <tag> javascript:; </tag>
            
            <tag> a onClick=&#39;&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI를 이용해서 프로젝트 만들어보기.</title>
      <link href="/2018/08/22/vue-20180822-vue-Vue-CLI/"/>
      <url>/2018/08/22/vue-20180822-vue-Vue-CLI/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>저번 포스트에서 Vue 개발환경을 설정했다.<br>이번에는 Vue CLI를 이용해서 간편하게 Vue 프로젝트를 만들어보자.<br>Node와 Vue-Cli를 미리 설치해야 한다. </p><h3 id="Vue-CLI-Commnad-Line-Interface-란"><a href="#Vue-CLI-Commnad-Line-Interface-란" class="headerlink" title="Vue CLI(Commnad Line Interface) 란?"></a>Vue CLI(Commnad Line Interface) 란?</h3><p>뷰 코어팀에서 제공하는 일종의 터미널용 도구이다.<br>저번 글에서 node를 설치한 뒤에 아래 명령어로, Vue CLI를 설치했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install vue-cli -global</span><br></pre></td></tr></table></figure><p>Vue CLI를 설치하면 터미널에서 간단한 명령어를 통해서 프로토타입 프로젝트를 쉽게 만들수 있다.<br>(사실 처음 CLI라는 용어에 <em>이건 뭐지? Vue 전용 터미멀 프로그램인가?</em> 라고 혼동이 좀 왔었다.)</p><p><img src="/images/20180822-vue-Vue-CLI_1.png" alt="cmd창에서 vue 명령을 입력해서 위처럼 나와야 vue cli 설치가 된 것이다."></p><h3 id="Vue-CLI-프로젝트-생성-명령어"><a href="#Vue-CLI-프로젝트-생성-명령어" class="headerlink" title="Vue CLI 프로젝트 생성 명령어"></a>Vue CLI 프로젝트 생성 명령어</h3><table><thead><tr><th>템플릿 종류</th><th>설명</th></tr></thead><tbody><tr><td>vue init webpack</td><td>고급 웹팩 기능을 활용한 프로젝트 구성 방식, 테스팅, 문법 검사 등을 지원</td></tr><tr><td>vue init webpack-simple</td><td>웹팩 최소 기능을 활용한 프로젝트 구성방식, 빠른 화면 프로토타이핑용</td></tr><tr><td>vue init browserify</td><td>고급 브라우저파리 기능을 활용한 프로젝트 구성 방식, 테스팅, 문법 검사 등을 지원</td></tr><tr><td>vue init browserify-simple</td><td>브라우저파이 최소 기능을 활용한 프로젝트 구성 방식, 빠른 화면 프로토타이핑용</td></tr><tr><td>vue init simple</td><td>최소 뷰 기능만 들어간 HTML 파일 1개 생성</td></tr><tr><td>vue init pwa</td><td>웹팩 기반의 프로그레시브 웹 앱(PWA, Progressive Web App) 기능을 지원하는 뷰 프로젝트</td></tr></tbody></table><p>webpack, browserify 같은 모듈 번들러 프로젝트는 자체적으로 Vue 로더를 포함하고 있다.<br>Vue 로더는 vue.확장자 파일을 HTML, SCRIPT, STYLE로 변환해 준다.<br>따라서 Vue 로더가 포함돤 프로젝트를 생성하면 Vue 확장자 파일을 사용 할 수 있다.</p><h3 id="Vue-CLI-로-webpack-simple-프로젝트-생성하기"><a href="#Vue-CLI-로-webpack-simple-프로젝트-생성하기" class="headerlink" title="Vue CLI 로 webpack-simple 프로젝트 생성하기."></a>Vue CLI 로 webpack-simple 프로젝트 생성하기.</h3><p>원하는 경로에 프로젝트 폴더를 생성하고, cmd로 그 경로로 이동하여 vue init webpack-simple 명령어를 입력하자.<br>나는 TestVue라는 폴더를 만들었다.</p><p><img src="/images/20180822-vue-Vue-CLI_2.png" alt="Vue init webpack-simple을 입력하고 프로젝트 관련된 설정을 입력해야한다."></p><p><img src="/images/20180822-vue-Vue-CLI_3.png" alt="해당 경로로 이동하면 폴더와 파일이 생성된 것을 확인 할 수 있다."></p><p><strong>index.html:</strong> 뷰로 만든 웹 앱의 시작점. npm run dev 실생시 로딩되는 엔트리 파일이다.<br><strong>webpack.config.js:</strong> 웹 팩 설정파일. 웹팩 빌드를 위해 필요한 로직들을 정의 하는 파일이다.<br><strong>package.json:</strong> npm 설정파일이 있다. Vue 어플리케이션에서 필요한 라이브러리 정보를 포함하고 있다.</p><p>pakcage.json을 보면 알겠지만, 초기 프로젝트 생성시 npm intall을 이용해서 라이브러리를 받아야 한다.<br>cmd 에서 npm install 을 입력하자.</p><p><img src="/images/20180822-vue-Vue-CLI_4.png" alt="npm install을 입력한뒤, node_modules 폴더 생성을 확인하자."></p><p>package.json 파일 내부를 보면 아래와 같은데</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-cli-template"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"vue project"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"hanumoka"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --progress --hide-modules"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.5.11"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,</span><br><span class="line">    <span class="string">"last 2 versions"</span>,</span><br><span class="line">    <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-3"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^5.0.5"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^0.28.7"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^1.1.4"</span>,</span><br><span class="line">    <span class="attr">"vue-loader"</span>: <span class="string">"^13.0.5"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.4.4"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scripts 부분을 보면 dev, build 명령어를 확인 할 수 있다.<br><strong>npm run dev, npm run build</strong> 명령어가 등록되어 있다.</p><p><strong>npm run dev</strong>를 cmd에 입력해 보면 webpack-dev-server(node 기반 웹서버) 가 자동으로 동작하며 자동으로 브라우저가 열리며(localhost:8080) 아래처럼 방금 생성한 Vue프로젝트가 열린다.(index.html)</p><p><img src="/images/20180822-vue-Vue-CLI_5.png" alt="npm run dev를 이용하여 Vue 프로젝트 실행하기."></p><p>서버가 실행되어 있는 동안 코드를 수정하면 바로바로 적용된다.<br>만 그대로 개발할때 사용하는 용도이다.</p><p><strong>npm run build</strong>명령을 입력하면 dist폴더에 빌드 webpack이 빌드 결과물을 생성하는데, 이부분은 webpack에 대한 지식과 vue의 실제 배포방법을 몰라서 넘어가겠다.</p><p>조금더 공부하고, 다음글에서 위 Vue 프로젝트를 빌드 + 배포하는 방법을 알아보겠다.</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Cli </tag>
            
            <tag> wabpack </tag>
            
            <tag> npm run dev </tag>
            
            <tag> npm run build </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 개발환경 잡기(Widnwos10)</title>
      <link href="/2018/08/21/vue-20180821-vue-develoment-enviroments-at-windows10/"/>
      <url>/2018/08/21/vue-20180821-vue-develoment-enviroments-at-windows10/</url>
      
        <content type="html"><![CDATA[<h3 id="크롬브라우저에서-Vue-개발자-도구-설치하기"><a href="#크롬브라우저에서-Vue-개발자-도구-설치하기" class="headerlink" title="크롬브라우저에서 Vue 개발자 도구 설치하기"></a>크롬브라우저에서 Vue 개발자 도구 설치하기</h3><p>크롬 웹 스토어에서 vue를 검색해서 Vue.js devtools 를 설치하자.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_1.png" alt="난 이미 설치가 되어있어서 평가하기 버튼으로 설치버튼이 평가하기 버튼으로 나온다."></p><hr><h3 id="Vue를-개발할-개발툴-Atom-을-설치하고-개발에-필요한-패키지등을-설치하기"><a href="#Vue를-개발할-개발툴-Atom-을-설치하고-개발에-필요한-패키지등을-설치하기" class="headerlink" title="Vue를 개발할 개발툴 Atom 을 설치하고, 개발에 필요한 패키지등을 설치하기"></a>Vue를 개발할 개발툴 Atom 을 설치하고, 개발에 필요한 패키지등을 설치하기</h3><p>뭐 이건 개인이 편한걸 되지만, Atom써보니 썩 괜찮은 툴인거 같다.<br>뭔가 툴이 찰지다고 해야 하나? 타이핑하면서 툴의 반응이 찰지다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_2.png" alt="그냥 홈페이지 가서 설치하면 된다."></p><p>설치가 완료되면, 테마를 바꿔보자.</p><h4 id="아톰-테마-설치"><a href="#아톰-테마-설치" class="headerlink" title="아톰 테마 설치"></a>아톰 테마 설치</h4><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_3.png" alt="file -&gt; settings -&gt; Install 로 이동하여 Themes 를 선택하고 seti-ui 를 검색하여 Install 하자."></p><p>seti-ui를 설치한뒤 atom-material-syntax-dark 도 검색하여 설치하자.<br>seti-ui는 직관적인 파일아이콘등을 표시해주는 테마이고, atom-material-syntax-dark는 자바스크립트 코드 구문을 강조해주는 테마이다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_4.png" alt="atom-material-syntax-dark 테마도 설치하자."></p><p>Atom에서는 설치한 테마를 수동으로 적용해 줘야 한다.<br>Settins의 Themes로 이동하여 Ui Theme에 방금 설치한 seti를 선택하자.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_5.png" alt="선택하면 그 즉시 테마가 적용된다. 기본테마보다는 뭔가 뚜렷하고 색감이 진해져서 보기가 좋다."></p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_6.png" alt="Syntax Theme도 방금 설치한 atom material dark로 변경해주자. 이녀석은 소스 구문테마라 지금 딱히 변화는 없다."></p><h4 id="아톰-패키지-설치"><a href="#아톰-패키지-설치" class="headerlink" title="아톰 패키지 설치"></a>아톰 패키지 설치</h4><p>이번에는 Atom에서 Vue 개발시 쓸만한 패키지를 설치해보자.<br>Settings의 Install 탭으로 가서 Packages 버튼을 클릭하자.<br>검색어로 language-vue 를 검색해서 설치하자.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_7.png" alt="패키지는 테마와 달리 설치히 바로 적용이 된다."></p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_8.png" alt="테마가 적용되어 파일확장자에 따라 아이콘이 다른것을 확인 할수 있다."></p><p>그리고 language-vue 가 아주 편한점이 있는데, 이 패키지는 vue 파일에서 태그를 아주 쉽게 생성해준다.<br>vue 파일에서 작성을 하고 싶은 태그를 그냥 타이핑하다가 tab을 누르면 자동으로 생성해준다.</p><p>예를 들어 html태그를 생성하고 싶다면, 그냥 htm까지만(꺽쇠는 빼고) 치고 탭을 누르면 아래처럼 자동으로 생성해준다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_9.png" alt="원하는 태그를 꺽쇠 없이 치다가 tab을 눌러주면"></p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_10.png" alt="이렇게 자동으로 만들어준다."></p><p>vue에서 tempate, script, style 태그등을 자주 사용하는데 아주 편한 기능인 것 같다.</p><hr><h3 id="Node-js-설치하기"><a href="#Node-js-설치하기" class="headerlink" title="Node.js 설치하기"></a>Node.js 설치하기</h3><p>뭐 Angular오 마찬가지로 Vue의 다양한 프로토타이핑 프로젝트를 CLI로 생성하기 위해서 반드시 필요하다.<br>이것도 그냥 홈페이지 가서 설치하면 된다.<br>다만 LTS 버전 설치를 추천한다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_11.png" alt="그냥 설치해주면 된다."></p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_12.png" alt="설치가 끝난다음, cmd 에서 node -v 를 입력해서 버전확인을 할 수 있다."></p><h3 id="Vue-CLI-설치하고-간단한-Vue-프로젝트를-만들어-실행해보자"><a href="#Vue-CLI-설치하고-간단한-Vue-프로젝트를-만들어-실행해보자" class="headerlink" title="Vue CLI 설치하고 간단한 Vue 프로젝트를 만들어 실행해보자."></a>Vue CLI 설치하고 간단한 Vue 프로젝트를 만들어 실행해보자.</h3><p>cmd 창을 열고 <strong>install vue-cli -global</strong>을 입력하여 Vue CLI를 설치하자.<br>이것을 설치하면 터미널에서 커맨드 명령어로 다양한 Vue 프로토타입 프로젝트를 생성 할 수있다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_13.png" alt="터미널을 열고 install vue-cli -global를 입력하여 설치."></p><p>설치가 끝나면 vue명령어를 입력해보자.<br>vue list를 입력하면 생성할수 있는 vue 프로토타입 프로젝트의 종류가 보인다.</p><p><img src="/images/20180821-vue-develoment-enviroments-at-windows10_14.png" alt="vue 명령어로 vue 설치 확인."></p><p><strong>Vue.js 개발환경 만들기 끝!!!</strong></p><hr><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>다음 글에서는 Vue CLI 로 간단한 프로젝트를 만드는 방법에 대해서 알아보겠다.</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> atom </tag>
            
            <tag> 개발환경 </tag>
            
            <tag> Vue.js </tag>
            
            <tag> nodejs </tag>
            
            <tag> cli </tag>
            
            <tag> vue cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j, Log4j2, Logback, SLF4J 간단 용어정리</title>
      <link href="/2018/08/19/programing-etc-20180819-log4j-logback-log4j2-SLF4J/"/>
      <url>/2018/08/19/programing-etc-20180819-log4j-logback-log4j2-SLF4J/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>그냥 맥락정도만 파악을 위해 후려친 용어정리이다. </p><hr><h3 id="log4j-logj42-logback-이란-무엇인가"><a href="#log4j-logj42-logback-이란-무엇인가" class="headerlink" title="log4j, logj42, logback 이란 무엇인가?"></a>log4j, logj42, logback 이란 무엇인가?</h3><p>3개다 Java기반 로깅 유틸리이다.<br>일단 간단히 시간 순서로 보면 Log4j -&gt; Logback -&gt; Log4j2 순서이다.<br>즉 Log4j2가 가장 진화?된 로그 유틸리티이다.<br>Logback, Log4j2 둘다 Log4j를 기반으로 하고 있어서 설정방법, 사용법 등이 비슷하다.(정확하게 같지는 않다.)<br>Logback은 약간 Log4j의 서자 느낌, Log4j2는 말그대로 Log4j의 2버전으로 적자의 느낌이 강하다.</p><hr><h3 id="SLF4J-Simple-Logging-Facade-for-Java-란"><a href="#SLF4J-Simple-Logging-Facade-for-Java-란" class="headerlink" title="SLF4J(Simple Logging Facade for Java) 란?"></a>SLF4J(Simple Logging Facade for Java) 란?</h3><p>java 진영에 java.util.logging, Logback, Log4j와 같이 다양한 Loging framework가 있다.<br>문제는 이 각각 Loging framework의 사용법이 다르다는 것이다.</p><p>SLF4J는 java 진영의 Loging framwork들의 fascede(추상체) 역할을 한다.<br>인터페이스와 비슷한 역할을 하여, 사용중인 Loging framework 가 변경되더라도 Java 소스코드의 변경을 방지해준다.</p><p>Spring MVC lagacy 프로젝트를 생성하면, 기본적으로 SLF4J + Log4j 구조로 되어있다.</p><p><img src="/images/20180819-log4j-logback-log4j2-SLF4J_1.png" alt="Spring MVC lagacy 기본 로깅 라이브러리"></p><hr><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>아무래도 최신 로깅유틸인 Log4j2 를 사용하는 것이 좋아보인다.<br>Log4j는 java 버전에 올라갈수록 호환이 안될 가능성이 있다는 풍문이 있다.</p>]]></content>
      
      
      <categories>
          
          <category> programing_etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log4j </tag>
            
            <tag> Log4j2 </tag>
            
            <tag> Logback </tag>
            
            <tag> SLF4J </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 웹스토어 - Restlet Client(REST 요청결과 받을수 있는 툴)</title>
      <link href="/2018/08/18/chrome-20180818-google-app-Restlet-Client/"/>
      <url>/2018/08/18/chrome-20180818-google-app-Restlet-Client/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>REST를 개발할때에는 웹 페이지가 존재하지 않을 경우가 있다.<br>하지만 구글 크롬에서 REST요청에 대한 결과를 받아볼수 있는 도구가 있어 간편하게 테스트가 가능하다.</p><p>Chrome 웹스토어 스토어에서 rest client 라고 검색해보자.</p><p><img src="/images/20180818-google-app-Restlet-Client_1.png" alt="확장 프로그램으로 Restlet Client - REST API Testing이라는 도구가 있다 설치하자."></p><p><img src="/images/20180818-google-app-Restlet-Client_2.png" alt="설치하면 크롬창에 작은 아이콘이 생긴다."></p><p>아이콘을 클릭해서 들어가면 다음과 같은 창이 나오는데, 여기에 원하는 REST응답을 해줄 URL을 입력하고 send를 보내면 그 결과를 받아 볼수 있다.<br>테스트 해본결과 REST뿐만 아니라 일반 URI 요청에서도 동작을 한다. </p><p><img src="/images/20180818-google-app-Restlet-Client_3.png" alt="REST요청에 대한 결과 확인."></p>]]></content>
      
      
      <categories>
          
          <category> chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>많이 사용되는 http 상태 코드(http status code)</title>
      <link href="/2018/08/18/web-20180818-web-http-status-code/"/>
      <url>/2018/08/18/web-20180818-web-http-status-code/</url>
      
        <content type="html"><![CDATA[<h3 id="100번대-데이터의-처리중인-상태"><a href="#100번대-데이터의-처리중인-상태" class="headerlink" title="100번대: 데이터의 처리중인 상태"></a>100번대: 데이터의 처리중인 상태</h3><ul><li>100: 데이터의 일부를 서버가 받은 상태</li></ul><h3 id="200번대-정상적인-응답"><a href="#200번대-정상적인-응답" class="headerlink" title="200번대: 정상적인 응답"></a>200번대: 정상적인 응답</h3><ul><li>200: 에러 없이 정상처리</li><li>204: 정상처리 되었으나 서버에서 보내줄 데이터 없음</li></ul><h3 id="300번대-다른-URL-처리"><a href="#300번대-다른-URL-처리" class="headerlink" title="300번대: 다른 URL 처리"></a>300번대: 다른 URL 처리</h3><ul><li>301: 요청된 페이지가 새 URL로 변경되었음</li><li>304: 이미 기존의 데이터와 변경된 것이 없음</li></ul><h3 id="400번대-서버에서-인식할-수-없음"><a href="#400번대-서버에서-인식할-수-없음" class="headerlink" title="400번대: 서버에서 인식할 수 없음"></a>400번대: 서버에서 인식할 수 없음</h3><ul><li>400: 전송된 Request에 문제가 있어서 서버에가 인식할 수 없음</li><li>403: 서버에서 허락되지 않음</li><li>404: URL에 해당하는 자원을 찾을 수 없음</li><li>406: 전송 방식이 허락되지 않음 (REST에서 자주 발생)</li></ul><p><img src="/images/20180818-web-http-status-code_1.png" alt="가장 많이 보는 404"></p><h3 id="500번대-서버-내부의-문제"><a href="#500번대-서버-내부의-문제" class="headerlink" title="500번대: 서버 내부의 문제"></a>500번대: 서버 내부의 문제</h3><ul><li>500: 서버에서 처리 시 문제가 발생</li><li>502: 게이트웨이나ㅐ 프록시 상태의 문제(과부하 등)</li><li>503: 일시적인 과부하나 서비스 중단 상태</li><li>504: 지정된 처리시간이 지나서 처리되지 못함</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http status code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring @RestController</title>
      <link href="/2018/08/18/spring-20180818-spring-RestController/"/>
      <url>/2018/08/18/spring-20180818-spring-RestController/</url>
      
        <content type="html"><![CDATA[<h1 id="Rest-Representational-State-Transfer-란"><a href="#Rest-Representational-State-Transfer-란" class="headerlink" title="Rest(Representational State Transfer)란?"></a>Rest(Representational State Transfer)란?</h1><p>하나의 URI는 하나의 고유한 리소스(Resource)를 대표하도록 설계된다는 개념이다.<br>최근에는 서버에 접근하는 기기의 종류가 다양해 지면서 다양한 기기에서 공통으로 데이터를 처리할 수 있는 규칙을 만들려고 하는데 이러한 시도가 REST방식이다.</p><p>REST 방식은 특정한 URI는 반드시 그에 상응하는 데이터 자체라는 점을 의미하는 방식이다.<br>예를 들어 /boards/123 이라는 URI는 게시물 중 123번이라는 고유한 의미를 가지도록 설계하고, 이에 대한 처리는 GET, POST 방식과 같이 추가적인 정보를 통해 결정한다.</p><p>REST API는 외부에서 위와 같은 방식으로 특정 URI를 통해서 사용자가 원하는 정보를 제공하는 방식이다.<br>최근 Open API에서 많이 사용되면서 REST 방식으로 제공되는 외부 연결 URI를 REST API라고 하고, REST 방식의 서비스 제공이 가능한 것을 ‘Restfull’하다고 표현한다.</p><hr><h1 id="Spring과-REST"><a href="#Spring과-REST" class="headerlink" title="Spring과 REST"></a>Spring과 REST</h1><p>스프링3 버전부터 @ResponseBody 애노테이션을 지원하면서 본격적으로 REST 방삭의 처리를 지원하고 했다.<br>스프링4 버전에서는 REST전용 컨트롤러인 @RestController가 도입되었다.</p><hr><h1 id="RestController-예제"><a href="#RestController-예제" class="headerlink" title="@RestController 예제"></a>@RestController 예제</h1><p>스프링 3버전에서는 컨트롤러에 특정한 메소드에 @RseponseBody 어노테이션을 적용했다.<br>스프링 4버전부터 지원하는 @RestController라는 어노테이션을 컨트롤러에 지정하면, 해당 컨트롤러의 모든 메소드는 자동적으로 @RseponseBody 어노테이션이 적용된 것처럼 동작한다.<br>즉 @RestController가 적용된 컨트롤러의 모든 메소드는 jsp등의 뷰를 생성하지 않고 데이터만 반환하게 된다.<br>이 데이터는 크게 단순문자열, JSON, XML 등으로 나누어진다.</p><p>스프링에서 JSON 데이터를 처리하기 위해서는 일단 jackson 라이브러리가 필요하다.<br>pom.xml에 jackson 라이브러리를 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- json 데이터 처리용 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 아래는 @RestController가 적용된 테스트 컨트롤러이다.<br>단순 텍스트, json, list, map등을 REST로 반환하는 예제에다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/resttest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"test"</span>, produces = <span class="string">"text/html; charset=utf8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restText</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"rest 단순 문자열 반환"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SampleVO <span class="title">restJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SampleVO sampleVO = <span class="keyword">new</span> SampleVO();</span><br><span class="line">sampleVO.setNo(<span class="number">1</span>);</span><br><span class="line">sampleVO.setName(<span class="string">"제이슨 객체입니다."</span>);</span><br><span class="line"><span class="keyword">return</span> sampleVO;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jsonList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SampleVO&gt; <span class="title">sendList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;SampleVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">SampleVO sampleVO = <span class="keyword">new</span> SampleVO();</span><br><span class="line">sampleVO.setName( (i+<span class="number">1</span>) +<span class="string">"번 데이터"</span>);</span><br><span class="line">sampleVO.setNo(i+<span class="number">1</span>);</span><br><span class="line">list.add(sampleVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sendMap"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer, SampleVO&gt; <span class="title">sendMap</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, SampleVO&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">SampleVO sampleVO = <span class="keyword">new</span> SampleVO();</span><br><span class="line">sampleVO.setName( (i+<span class="number">1</span>) +<span class="string">"번 데이터"</span>);</span><br><span class="line">sampleVO.setNo(i+<span class="number">1</span>);</span><br><span class="line">map.put(i, sampleVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleVO</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(Integer no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180818-spring-RestController_1.png" alt="RestController에서 map을 반환하는 결과확인"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> RestController </tag>
            
            <tag> text </tag>
            
            <tag> json </tag>
            
            <tag> list </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>favicon 이미지 쉽게 만들기</title>
      <link href="/2018/08/17/web-20180817-web-how-to-make-favicon-images/"/>
      <url>/2018/08/17/web-20180817-web-how-to-make-favicon-images/</url>
      
        <content type="html"><![CDATA[<h1 id="favicon-이미지-쉽게-만들기"><a href="#favicon-이미지-쉽게-만들기" class="headerlink" title="favicon 이미지 쉽게 만들기"></a>favicon 이미지 쉽게 만들기</h1><p>favicon이란 브라우저 주소창에 표시되는 웹사이트의 대표 아이콘을 말한다.</p><p>일단 favicon으로 만들 이미지를 준비한다.</p><p>그리고 구글에 favicon generator라고 검색해보자.</p><p>이것저것 많은 사이트가 나오지만, 맨위의 <a href="https://www.favicon-generator.org/" target="_blank" rel="external nofollow noopener noreferrer">https://www.favicon-generator.org/</a> 로 이동하자</p><p>간단하다. 필요한 이미지를 파일 선택하고 create Favicon 버튼을 클릭하면 favicon이 자동으로 생성되며, 다운받아서 사용하면 된다.</p><p><img src="/images/20180817-web-how-to-make-favicon-images_1.png" alt="이미지 파일을 선택하고 create Favicon 버튼을 누르자."></p><p><img src="/images/20180817-web-how-to-make-favicon-images_2.png" alt="favicon파일이 생성되며 노란 부분을 클릭하여 압축파일을 받으면 된다."></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> favicon </tag>
            
            <tag> www.favicon-generator.org </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>가상돔(Virtual DOM)?</title>
      <link href="/2018/08/15/web-20180815-web-virtual-dom/"/>
      <url>/2018/08/15/web-20180815-web-virtual-dom/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Vue.js를 공부하면서 가상돔(Virtual DOM)라는 생소한 용어를 접하고 그 내용을 정리한 글이다.</p><hr><h1 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h1><p><strong>간단히 후려치면, 가상돔(Virtual DOM)이란 브라우저를 위한 버퍼정도라고 생각된다.</strong></p><hr><h1 id="가상돔-Virtual-DOM-이란"><a href="#가상돔-Virtual-DOM-이란" class="headerlink" title="가상돔(Virtual DOM)이란?"></a>가상돔(Virtual DOM)이란?</h1><p>Vue.js를 공부하다 보니, Vue.js 2.0버전 이후로 가상돔(Virtual DOM)을 사용하기 때문에 빠르고 효과적으로 html 화면을 렌더링 한다고 나와있다.</p><p>여기서 이 가상돔은 Vue.js 만의 고유한 기술이 아니다.<br>React 진영에서 앞서 사용했으며, W3C에서도 Shadow DOM 이라는 가상돔 표준안을 가지고 있다고 한다.</p><p>가상돔을 이해하기 위해서는 일단 브라우저가 hmtl을 화면에 그리는 일련에 과정을 알아야 한다.<br><strong>브라우저는 html를 읽어서 DOM 트리, CSS 트리를 만들고 DOM이 화면에 있어야할 위치를 잡고 거기에 그리고 색을 채운다.</strong></p><p><img src="/images/20180815-web-virtual-dom_1.png" alt="브라우저가 HTML을 그리는 과정"></p><p>여기 까지는 전혀 문제가 없다.<br>DOM이 아무리 많던, 복잡하던 상관 없다.<br>브라우저는 위와 같은 일을 위해 만들어진 녀석이니깐</p><p>하지만 여기 브라우저를 위협하는 요소가 생겼다.<br>예전과 같이 그냥 단순히 HTML을 서버에서 받아서 한번에 그리고 땡 하는것이 아니라.<br>SPA(Single page application) 같은 것들이 생겨나면서, html녀석이 자바스크립트와 그의 친구들을 이용해서 자꾸 DOM을 수시로 변경해달라고 브라우저에게 요청한다.</p><p>브라우저는 착한녀석이라 요청이 오는대로 일을 하려한다.<br>노드가 1000개쯤(예를들어)있는 DOM 트리를 뒤져서 특정 노드를 찾아 width를 조금 넓혀주고 다시 CSS트리를 만들고 합치고, 화면에 스케치하고 색을 채운다.<br>DOM 수정요청이 100번 온다면 브라우저는 위와 같은 짓을 100번 한다.</p><p><strong>즉 브라우저는 실시간 DOM 수정요청으로 그림을 다시 그리는데, 그닥 효율적이지 못하다.</strong></p><p>이런 브라우저의 단점을 도와주는 녀석이 가상돔(Virtual DOM)이다.<br>만약 100번의 DOM 수정 요청이 오면, 가상돔은 브라우저 대신 DOM 변경을 인지하고 그 내용을 가상돔에 반영한다.(아직 화면에 그리지 않음)<br>이 변화를 반영한 가상돔의 내용을 브라우저에게 전달하여 그리게 한다.(100번 그리던 것을 1번만 그린다.)</p><p>사실 가상돔(Virtual DOM)이라는 말이 어려워서 그렇지, 그냥 브라우저의 DOM과 렌더링을 위한 버퍼역할을 하는 것이다.</p><p>컴퓨터 그래픽스에서 연산되어 출력되는 영상의 화면 끊김을 방지하기 위해 2중버퍼, 3중버퍼 같은 것을 가지고 있는데 가상돔(Virtual DOM)가 브라우저에서 그 역할을 하는듯 보인다.</p><hr><h1 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h1><p><a href="https://www.youtube.com/watch?v=BYbgopx44vo" target="_blank" rel="external nofollow noopener noreferrer">React 가상돔 설명 유튜브</a><br><a href="https://velopert.com/3236" target="_blank" rel="external nofollow noopener noreferrer">React 가상돔 관련글 번역 포스트</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 가상돔 </tag>
            
            <tag> Virtual DOM </tag>
            
            <tag> VUE.JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 란?</title>
      <link href="/2018/08/15/vue-20180815-vue-what-is-the-vue/"/>
      <url>/2018/08/15/vue-20180815-vue-what-is-the-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>3~4년전 Anuglar1이 나왔을때 한번 프로젝트에 적용하기 위해 공부했었던 적이 있다.<br>당시 Angular의 신박한 기능은 매력적이었지만, 한글 이슈등 다양한 문제점이 있어서 포기하고, 그냥 jsp + jquery 로 개발한 기억이 난다.</p><p>요즘 다시 프론트엔드에 대한 관심이 생겨 이것저것 찾아보던중 Vue.js 라는 프론트엔드 프레임워크가 있어서 공부하는중이다.</p><p>그래서 Vue.js는 머냐?</p><p><img src="/images/20180815-vue-what-is-the-vue_1.png" alt="Vue.js로고"></p><hr><h1 id="Vue-js란"><a href="#Vue-js란" class="headerlink" title="Vue.js란?"></a>Vue.js란?</h1><p>Vue.js는 Anuglar, React와 같이 웹 페이지 화면을 개발하기 위한 프론트엔드 MVVM 프레임워크 중 하나이다.<br>여기저기 찾아보니 Vue는 프레임워크가 아니라 라이브러리라는 말도 있다.</p><p>뷰 코어 라이브러리는 화면단 데이터 표현에 관한 기능들을 중점적으로 지원하지만 프레임워크의 기능인 라우터, 상태 관리, 테스팅 등을 쉽게 결합할 수 있는 형태로도 제공된다.</p><p>따라서 구조상은 몰라도 기능상은 프레임워크의 기능을 하고 있는거 같기에 프레임워크가 맞다고 개인적으로 생각한다.</p><hr><h1 id="Vue의-장점"><a href="#Vue의-장점" class="headerlink" title="Vue의 장점"></a>Vue의 장점</h1><p><strong>1.일단 쉽단다.</strong></p><p>프론트엔드의 대표적인 프레임워크인 Angular, React에 비해 쉽다고 한다.<br>angualr는 타입스크립트(TypeScript), ES6(ECMAScript 2015)에 대한 지식이 필요하다.<br>react또한 ES6와 JSX라는 리액트 전용 탬플릿 작성 언어를 알아야 한다.<br>Vue.js는 HTML, javascript, CSS 정도를 알면 배워볼만 하다.(물론 웹에 대한 지식이 필요하다.)<br>쉬운것은 항상 옳다고 본다.</p><p><strong>2.타 프레임워크에 비해 성능면에서 빠르다.</strong></p><p>뷰 제작팀에서 리액트와 앵귤러를 가지고 같은 테스트 케이스(test case)에서 성능을 비교한 결과 뷰가 가장 빨랐다고 한다.<br>(뷰 제작팀이 진행한 테스트라 별로 신빙성은 안가지만…)</p><p>Vue.js 2버전 부터 스냅돔(snabbdom)기반의 가상돔을 통해 빠른 속도로 문서를 렌더링 하며, 메모리 소비 효율도가 최대 2~3배 정도 나온다고 하니 근거가 전혀 없는 것은 아닌것 같다.</p><p><strong>3. 리액트의 장점과 앵귤러의 장점을 갖는다.</strong></p><p>앵귤러의 데이터 바인딩과 리액트의 가상돔(Vitual DOM) 기반 렌더링의 특징을 모두 가지고 있다.<br>따라서 앵귤러, 리액트보다 쉽지만 기능상 뒤쳐지지 않는다.</p><p><strong>4.Vue.js 공식 페이지에서 재공하는 한글문서</strong></p><p>vue.js 공식페이지의 한글화가 잘 되어있어서, 별도의 책을 구입하지 않아도 공부하는데 용이 하다.</p><p><a href="https://kr.vuejs.org/v2/guide/index.html" target="_blank" rel="external nofollow noopener noreferrer">Vue.js 공식 홈페이지 가이드 문서</a></p><hr><h1 id="Vue-js의-단점"><a href="#Vue-js의-단점" class="headerlink" title="Vue.js의 단점"></a>Vue.js의 단점</h1><p><strong>1.규모가 큰 웹 어플리케이션 구현이 어렵다.</strong></p><p><strong>2.react.js 보다 생태계가 작다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC로 만드는 게시판 페이징 요점 정리(Thymeleaf기반 게시판)</title>
      <link href="/2018/08/10/spring-20180810-spring-board-paging/"/>
      <url>/2018/08/10/spring-20180810-spring-board-paging/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>항목</th><th>개발환경</th><th>비고</th></tr></thead><tbody><tr><td>운영체제</td><td>Widnwos10(64)</td><td></td></tr><tr><td>백엔드프레임워크</td><td>Spring MVC 4</td><td></td></tr><tr><td>개발언어</td><td>java1.8</td><td></td></tr><tr><td>WAS</td><td>Tomcat9</td><td></td></tr><tr><td>템플릿엔진</td><td>Thymeleaf3</td><td></td></tr><tr><td>템플릿엔진레이아웃</td><td>Tymeleaf-laout-dialect2</td><td></td></tr><tr><td>DB</td><td>mysql8</td><td></td></tr><tr><td>ORM</td><td>mybatis</td><td></td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>난 내가 나름 개발짬좀 먹었다고 생각했다.<br>그런데 아직도 게시판 만드는것이 어렵게 느껴진다.<br>특히 어려운 부분은 페이징에 관련된 것이라 생각된다.</p><p>그래서 이번에 스프링 책을 보며 페이징이 적용된 게시판 예제를 만들어 보았다.<br>이 글은 이번에 공부한 게시판의 페이징 부분에 포인트만 정리한 글이다.<br>게시판 자체의 CURD는 생략했다.</p><p><img src="/images/20180810-spring-board-paging_1.png" alt="페이징이 적용된 게시판 모습"></p><hr><h1 id="게시판-페이징-처리원칙"><a href="#게시판-페이징-처리원칙" class="headerlink" title="게시판 페이징 처리원칙"></a>게시판 페이징 처리원칙</h1><p>게시판의 페이지는 다른 사람에게 URL로 전달하는 경우가 많기 때문에, <strong>반드시 GET 방식으로만 처리된다.</strong><br>하지만 GET방식으로 게시판을 구현하다 보면, 어쩔수 없이 귀찮은 것이 생긴다.</p><p>화면을 변경할때 마다 기본적으로 유지해야 할 상태 값들을 쿼리스트링으로 URL에 달고 다녀야 하는 것이 문제다.<br>예를 들어 글을 읽으러 들어갈때, 게시판 페이징의 상태 값인 <strong>현재 페이지 번호</strong>와, <strong>한번에 보여줄 페이지 개수</strong>, <strong>한번에 보여줄 글의 개수</strong> 등을 가지고 다녀야 한다.<br>그래야 글을 다 읽고 게시판 목록으로 나올때 게시판 페이지상태를 유지할 수가 있기 때문이다.</p><p>위와 같은 이유로 게시판을 만들때 발생하는 다양한 링크를 생성할 때 주의해야 한다.</p><p>일단 게시판의 페이징은 크개 두개의 로직으로 나누어 진다.<br>하나는 <strong>Criteria</strong> 또 하나는 <strong>PageMaker</strong> 이다.<br>참고로 PageMaker는 Criteria를 기반한다.</p><hr><h1 id="특정-페이지의-게시판을-조회하기-위한-도우미-클래스-Criteria-java"><a href="#특정-페이지의-게시판을-조회하기-위한-도우미-클래스-Criteria-java" class="headerlink" title="특정 페이지의 게시판을 조회하기 위한 도우미 클래스 Criteria.java"></a>특정 페이지의 게시판을 조회하기 위한 도우미 클래스 Criteria.java</h1><p>일단 Criteria라는 말은 검색을 위한 기준데이터를 의미한다.<br>페이징이 적용된 게시판을 조회하기 위한 최소 <strong>필요 데이터</strong> 다음과 같다.</p><p><strong>한 페이지당 보여줄 게시글의 개수</strong> 그리고 <strong>어떤 페이지 번호</strong>를 보여줄 것인가?</p><p>위 데이터와 mysql 의 limit를 이용해서 특정 페이지를 조회하는 쿼리를 만들면 다음과 같다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">      *</span><br><span class="line">  <span class="keyword">from</span> 게시판테이블</span><br><span class="line">  <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">  <span class="keyword">and</span> 게시글번호 &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">order</span> <span class="keyword">by</span> 게시글번호 <span class="keyword">desc</span>, 등록일자 <span class="keyword">desc</span></span><br><span class="line">  <span class="keyword">limit</span> (현재 보여줄 페이지 번호 - <span class="number">1</span>) * 한 페이지당 보여줄 게시글의 개수, 한 페이지당 보여줄 게시글의 개수</span><br></pre></td></tr></table></figure><p>그리고 위 쿼리를 실제 mybatis 매핑 쿼리로 보면 다음과 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- criteria 를 적용한 게시판 페이징 조회 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCriteria"</span> <span class="attr">resultType</span>=<span class="string">"BoardVO"</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">select</span><br><span class="line">    bno, title, content, writer, regdate, viewcnt</span><br><span class="line">from</span><br><span class="line">    tbl_board</span><br><span class="line">where bno &gt; 0</span><br><span class="line">order by bno desc, regdate desc</span><br><span class="line">limit #&#123;pageStart&#125;, #&#123;perPageNum&#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pageStart:</strong> (현재 보여줄 페이지 번호 - 1) * 한 페이지당 보여줄 게시글의 개수 이다. 이 값은 Criteria.java로 부터 전달 받을 것이다.<br><strong>perPageNum:</strong> 한 페이지당 보여줄 게시글의 개수이다.</p><p>시스템에 게시판은 여러종류가 있을수 있으며, 이런 페이징 부분은 공통적으로 사용해야 하므로 페이징 관련 기능은 특정 게시판 로직에 넣지 말고 별도의 클래스로 분리한다.</p><p>Criteria.java는 페이징을 위해 분리한 VO종류의 클래스이며, 위 listCriteria 마이바티스 쿼리 동작시 전달될 파라미터가 된다.<br>내용은 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.vo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//게시판 페이징 전용 클래스</span></span><br><span class="line"><span class="comment">//Criteria : 사전적 의미로는 검색기준, 분류기준</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> page;      <span class="comment">// 보여줄 페이지 번호</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> perPageNum;   <span class="comment">// 페이지당 보여줄 게시글의 개수</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Criteria</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//최초 게시판에 진입할 때를 위해서 기본 값을 설정 해야 한다.</span></span><br><span class="line"><span class="keyword">this</span>.page = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>.perPageNum = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(page &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.page = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.page = page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> perPageNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerPageNum</span><span class="params">(<span class="keyword">int</span> perPageNum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(perPageNum &lt;= <span class="number">0</span> || perPageNum &gt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.perPageNum = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.perPageNum = perPageNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* limit 구문에서 시작 위치를 지정할 때 사용된다. 예를 들어 10개씩 출력하는 경우 3페이지의 데이터는 linit 20, 10 과 같은 형태가 되어야 한다. */</span></span><br><span class="line"><span class="comment">/* this.page 가 1이면 0이 되어야 한다 mysql limit 0, 10 해야 처음부터 10개씩 나온다. */</span></span><br><span class="line">  <span class="comment">/* 마이바티스 조회쿼리의 #&#123;pageStart&#125;에 전달된다. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.page -<span class="number">1</span>) * perPageNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Criteria [page="</span> + page + <span class="string">", perPageNum="</span> + perPageNum + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Criteria.java 와 위 조회쿼리를 이용하면 게시판을 한 페이지 씩 조회하는 것은 가능하다.<br>3번 페이지를 조회하고 10개 데이터를 추릴수가 있게 된 것이다. </p><p><img src="/images/20180810-spring-board-paging_2.png" alt="Criteria의 도움으로 특정 페이지를 조회한 모습"></p><hr><h1 id="게시판-페이징을-실제-담당하는-클래스-PageMaker-java"><a href="#게시판-페이징을-실제-담당하는-클래스-PageMaker-java" class="headerlink" title="게시판 페이징을 실제 담당하는 클래스 PageMaker.java"></a>게시판 페이징을 실제 담당하는 클래스 PageMaker.java</h1><p>Criteria.java의 도움으로 게시판의 특정 페이지를 조회하기 위한 준비는 끝났다.<br>이제 해야 할 것은 게시판 하단에 있을 페이징 관련 부분을 만드는 기능이 필요하다.</p><p><img src="/images/20180810-spring-board-paging_3.png" alt="게시판 페이징의 핵심인 페이징 버튼"></p><p>이 부분은 이전페이지버튼, 다음페이지버튼 그리고 페이지번호 버튼 크게 3부분으로 나뉜다.<br>즉 이 세부분을 다루어야 하며 이것을 위한 필요 데이터가 있다.</p><p><strong>필요 데이터</strong>는 다음과 같다.</p><p><strong>Criteria를 통한 현재페이지번호, 한페이지 당 게시글개수</strong></p><p>그리고 <strong>게시판 화면에서 한번에 보여질 페이지 번호의 개수</strong> 이다.</p><p>Criteria는 이미 생성했으니 PageMaker에서는 Criteria를 그대로 사용하면 된다.</p><p>위 필요데이터를 사용하여 PageMaker가 생성할 데이터는 다음과 같다. </p><p><strong>생성순서1 totalCount</strong> 게시판 글 전체 개수.<br><strong>생성순서2 tempEndPage:</strong> 게시판의 실제 마지막 페이지 번호.<br><strong>생성순서3 endPage:</strong> 게시판을 화면에 보여질 마지막 페이지 번호.<br><strong>생성순서4 startPage:</strong> 게시판을 화면에 보여질 첫번째 페이지 번호.<br><strong>생성순서5 prev:</strong> 이전 페이지 버튼 활성화 여부.<br><strong>생성순서6 next:</strong> 다음 페이지 버튼 활성화 여부. </p><p>생성순서는 중요하다. 뒤 순서 데이터는 앞 순서 데이터를 참조하기 때문이다.<br>데이터 생성 공식은 다음과 같다.</p><p><strong>totlaCount 공식:</strong> 조회 쿼리 count(*)를 이용해서 전체 게시글 개수를 구한다.</p><p><strong>tempEndPage 공식:</strong> (int)(Math.ceil(totalCount / (double)Criteria의 한페이지 당 게시글 개수))</p><p><strong>endPage 공식:</strong> (int)(Math.ceil(현재 페이지번호 / (double)한번에 보여질 페이지 번호개수) * 한번에 보여질 페이지번호 개수).<br>하지만 여기서 <strong>endPage의 값은 tempEndPage보다 클수 없어야 한다.</strong></p><p><strong>startPage 공식:</strong> (endPage - 한번에 보여질 페이지 번호 개수) + 1</p><p><strong>prev 공식:</strong> startPage가 1이 아니면 활성화, 1이 면 비활성화</p><p><strong>next 공식:</strong> (endPage * Criteria의 한페이지 당 게시글 개수) 가 totlaCount보다 크거나 같으면 비활성화, 아니면 활성화이다.<br>next공식은 책에서 나온 것인데, 그냥 endPage가 tempEndPage보다 작으면 활성화 아니면 비활성화 하는것이 더 간단해 보인다.</p><p>PageMaker.java의 내용은 아래와 같다.<br>calcData메소드에서 필요한 데이터를 생성하는 것을 확인 할 수 있따.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.vo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//게시판 페이징 하단 부문 담당</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalCount;     <span class="comment">// 게시판 전체 데이터 개수</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> displayPageNum = <span class="number">10</span>;   <span class="comment">// 게시판 화면에서 한번에 보여질 페이지 번호의 개수 ( 1,2,3,4,5,6,7,9,10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> startPage;      <span class="comment">// 현재 화면에서 보이는 startPage 번호</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> endPage;        <span class="comment">// 현재 화면에 보이는 endPage 번호</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> prev;       <span class="comment">// 페이징 이전 버튼 활성화 여부</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> next;       <span class="comment">// 페이징 다음 버튼 활서화 여부</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Criteria cri;       <span class="comment">// 앞서 생성한 Criteria를 주입받는다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> totalCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line"></span><br><span class="line">calcData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calcData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">endPage = (<span class="keyword">int</span>) (Math.ceil(cri.getPage() / (<span class="keyword">double</span>) displayPageNum) * displayPageNum);</span><br><span class="line"></span><br><span class="line">startPage = (endPage - displayPageNum) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tempEndPage = (<span class="keyword">int</span>) (Math.ceil(totalCount / (<span class="keyword">double</span>) cri.getPerPageNum()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(endPage &gt; tempEndPage) &#123;</span><br><span class="line">endPage = tempEndPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prev = startPage == <span class="number">1</span> ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">next = endPage * cri.getPerPageNum() &gt;= totalCount ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> startPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartPage</span><span class="params">(<span class="keyword">int</span> startPage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.startPage = startPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> endPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndPage</span><span class="params">(<span class="keyword">int</span> endPage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.endPage = endPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrev</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrev</span><span class="params">(<span class="keyword">boolean</span> prev)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.prev = prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(<span class="keyword">boolean</span> next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDisplayPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> displayPageNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplayPageNum</span><span class="params">(<span class="keyword">int</span> displayPageNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.displayPageNum = displayPageNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Criteria <span class="title">getCri</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCri</span><span class="params">(Criteria cri)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cri = cri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"PageMaker [totalCount="</span> + totalCount + <span class="string">", startPage="</span> + startPage + <span class="string">", endPage="</span> + endPage + <span class="string">", prev="</span></span><br><span class="line">+ prev + <span class="string">", next="</span> + next + <span class="string">", displayPageNum="</span> + displayPageNum + <span class="string">", cri="</span> + cri + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 게시판 페이징을 위한 준비물은 끝났다. </p><hr><h1 id="페이징-게시판-컨트롤러"><a href="#페이징-게시판-컨트롤러" class="headerlink" title="페이징 게시판 컨트롤러"></a>페이징 게시판 컨트롤러</h1><p>컨트롤러는 앞서 말한듯이 get 방식이고 파라미터는 Criteria이다.<br>Criteria에 파라미터가 없을시에 생성자에서 기본값을 셋팅될 것이다.<br>그리고 Criteria을 이용해서 특정 페이지의 게시판 리스트를 조회한다.</p><p>마지막으로 게시판 하단의 페이징을 담당하는 PageMaker를 생성하고 화면에 전달한다.<br>pageMaker의 setTotalCount메소드가 호출되면서 페이징에 필요한 데이터가 생성된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/listPage"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listPage</span><span class="params">(@ModelAttribute(<span class="string">"cri"</span>)</span> Criteria cri, Model model) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(cri.toString());</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"list"</span>, service.listCriteria(cri));  <span class="comment">// 게시판의 글 리스트</span></span><br><span class="line">PageMaker pageMaker = <span class="keyword">new</span> PageMaker();</span><br><span class="line">pageMaker.setCri(cri);</span><br><span class="line">pageMaker.setTotalCount(service.listCountCriteria(cri));</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"pageMaker"</span>, pageMaker);  <span class="comment">// 게시판 하단의 페이징 관련, 이전페이지, 페이지 링크 , 다음 페이지</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/samples/board/listPage"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="페이징-게시판-화면단"><a href="#페이징-게시판-화면단" class="headerlink" title="페이징 게시판 화면단"></a>페이징 게시판 화면단</h1><p>이 예제의 화면단은 jsp가 아니라 Thymeleaf3 템플릿엔진을 사용한다.<br>따라서 뷰는 html 페이지이다.<br>그리고 부트스트렙 테마를 사용중이라 소스가 좀 길다.</p><p>그 내용은 다음과 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>게시판예제-페이징<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result =<span class="comment">/*[[$&#123;msg&#125;]]*/</span> <span class="string">'default'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(result == <span class="string">'success'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"처리가 완료되었습니다. result:"</span> + result);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        게시판 페이징 적용</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>advanced tables<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Data tables<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>게시판 + 페이징<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-tools"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group input-group-sm"</span> <span class="attr">style</span>=<span class="string">"width: 150px;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"table_search"</span> <span class="attr">class</span>=<span class="string">"form-control pull-right"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 10px"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 40px"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"boardVO : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.bno&#125;"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/readPage(bno=$&#123;boardVO.bno&#125;,page=$&#123;pageMaker.cri.page&#125;,perPageNum=$&#123;pageMaker.cri.perPageNum&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.title&#125;"</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.writer&#125;"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(boardVO.regdate, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.viewcnt&#125;"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">              <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 게시판 하단의 페이징 버튼 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer clearfix"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination pagination-sm no-margin pull-right"</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:if</span>=<span class="string">"$&#123;pageMaker.prev&#125; == true"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;pageMaker.startPage&#125;-1,perPageNum=$&#123;pageMaker.cri.perPageNum&#125;)&#125;"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"idx,iterStat : $&#123;#numbers.sequence(pageMaker.startPage,pageMaker.endPage)&#125;"</span>  <span class="attr">th:classappend</span>=<span class="string">"$&#123;pageMaker.cri.page&#125; == $&#123;idx&#125; ? active : null"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;idx&#125;,perPageNum=$&#123;pageMaker.cri.perPageNum&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;idx&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:if</span>=<span class="string">"$&#123;pageMaker.next&#125; == true and $&#123;pageMaker.endPage &gt; 0&#125;"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;pageMaker.endPage&#125;+1,perPageNum=$&#123;pageMaker.cri.perPageNum&#125;)&#125;"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.col --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /.row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>뷰 단에서 중요한 점을 <strong>첫째는 모든 링크는 get방식의 링크이며, 항상 현재 페이지 정보와 페이지당 보여줄 게시글 개수 데이터를 가지고 다녀야 한다.</strong></p><p>게시판에서 다른페이지로 이동, 다음 페이지로 이동, 글을 읽다가 글 목록으로 나올때 등등 페이지 상태를 유지해야 하기 때문에 이 부분을 유념해야 한다.</p><p>끝!!!!</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
            <tag> 게시판 </tag>
            
            <tag> 페이징 </tag>
            
            <tag> page </tag>
            
            <tag> paging </tag>
            
            <tag> Criteria </tag>
            
            <tag> PageMaker </tag>
            
            <tag> board </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC UriComponentsBuilder(서버단에서 쉽게 URI 만들기)</title>
      <link href="/2018/08/10/spring-20180810-spring-UriComponentsBuilder/"/>
      <url>/2018/08/10/spring-20180810-spring-UriComponentsBuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>아주 간혹 Spring 서버단에서 문자열 URI를 만들어야 할때가 있다.<br>그냥 자바 String으로 만들어도 되지만, Spring MVC의 org.springframework.web.util 패키지의 UriComponentsBuilder를 사용하면 조금더 쉽고, 명확하게 URI 문자열을 생성 할 수 있다.</p><h1 id="UriComponentsBuilder-예제"><a href="#UriComponentsBuilder-예제" class="headerlink" title="UriComponentsBuilder 예제"></a>UriComponentsBuilder 예제</h1><p>아래처럼 사용하면된다.<br>URI같은 것을 동적으로 만드는 거 자체가 짜증나긴 하지만, Java String으로 만드는 것보다야 편한듯 하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testURI</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">UriComponents uriComponents = UriComponentsBuilder.newInstance()</span><br><span class="line">.path(<span class="string">"/samplehome/board/read"</span>)</span><br><span class="line">.queryParam(<span class="string">"bno"</span>, <span class="number">12</span>)</span><br><span class="line">.queryParam(<span class="string">"perPageNum"</span>, <span class="number">20</span>)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"/samplehome/board/read?bno=12&amp;perPageNum=20"</span>);</span><br><span class="line">logger.info(uriComponents.toString());  <span class="comment">// /samplehome/board/read?bno=12&amp;perPageNum=20 가 생성된다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testURI2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">UriComponents uriComponents = UriComponentsBuilder.newInstance()</span><br><span class="line">.path(<span class="string">"/&#123;a&#125;/&#123;b&#125;/&#123;c&#125;"</span>)</span><br><span class="line">.queryParam(<span class="string">"bno"</span>, <span class="number">12</span>)</span><br><span class="line">.queryParam(<span class="string">"perPageNum"</span>, <span class="number">20</span>)</span><br><span class="line">.build()</span><br><span class="line">.expand(<span class="string">"samplehome"</span>, <span class="string">"board"</span>, <span class="string">"read"</span>)</span><br><span class="line">.encode();</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"/samplehome/board/read?bno=12&amp;perPageNum=20"</span>);  </span><br><span class="line">logger.info(uriComponents.toString()); <span class="comment">// /samplehome/board/read?bno=12&amp;perPageNum=20 가 생성된다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> UriComponentsBuilder </tag>
            
            <tag> uriComponents </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring - thymeleaf-layout-dialect 2버전의 head 태그설정</title>
      <link href="/2018/08/07/spring-20180807-spring-thymeleaf-layout-dialect2-head/"/>
      <url>/2018/08/07/spring-20180807-spring-thymeleaf-layout-dialect2-head/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>항목</th><th>개발환경</th><th>비고</th></tr></thead><tbody><tr><td>운영체제</td><td>Widnwos10(64)</td><td></td></tr><tr><td>백엔드프레임워크</td><td>Spring MVC 4</td><td></td></tr><tr><td>개발언어</td><td>java1.8</td><td></td></tr><tr><td>WAS</td><td>Tomcat9</td><td></td></tr><tr><td>템플릿엔진</td><td>Thymeleaf3</td><td></td></tr><tr><td>템플릿엔진레이아웃</td><td>Tymeleaf-laout-dialect2</td><td></td></tr><tr><td>DB</td><td>mysql8</td><td></td></tr><tr><td>ORM</td><td>mybatis</td><td></td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Spring4에 Tymeleaf 3버전과 thymeleaf-layout-dialect 2버전으로 개발중 콘솔에서 아래와 같은 경고가 발생했다.</p><p><img src="/images/20180807-spring-thymeleaf-layout-dialect2-head_1.png" alt="경고내용"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN : nz.net.ultraq.thymeleaf.fragments.FragmentProcessor - You don&#39;t need to put the layout:fragment&#x2F;data-layout-fragment attribute into the &lt;head&gt; section</span><br></pre></td></tr></table></figure><p>발생하는 이유는 내 thymeleaf-layout-dialect 예제 소스가 1버전 소스를 사용하고 있어서 나오는 것이었다.<br>특히 head 태그 부분인데…</p><p>기존 버전에서는 레이아웃.html에 아래처럼 head 태그전용 어트리뷰트를 선언해서 사용했었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"fragments/head :: headFragment"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 별도의 head fragments 전용 html을 생성했었고, 거기에 컨텐츠.html에서는 아래처럼<br>head 영역에 자신만의 css 나 js 등의 리소스를 적용했었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  alert(<span class="string">"여긴 컨텐츠 영역 스크립트!"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하지만 thymeleaf-layout-dialect 2버전으로 올라가면서 이럴필요가 없었고, 이것 때문에 경고문구가 나온 것이다.</p><hr><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p>아래가 레이아웃 페이지다. 보시다 시피 그냥 head 태그를 사용하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layout page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"common-script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Page content goes here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>My footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">layout:fragment</span>=<span class="string">"custom-footer"</span>&gt;</span>Custom footer here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래는 컨텐츠 html이다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">layout:decorate</span>=<span class="string">"~&#123;layout.html&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Content page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"content-script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph from the content page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">layout:fragment</span>=<span class="string">"custom-footer"</span>&gt;</span>This is some footer content from the content page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 아래는 둘이 합쳐져 렌더링 된 결과이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Content page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"common-script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"content-script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph from the content page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>My footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some footer content from the content page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>결과적으로 보면 중복되는 title태그는 컨텐츠.html 것으로 교체되고, 레이아웃에 없는 script 태그가 자동으로 추가된다.<br>전보다는 훨씬 손될 부분이 적어졌다.</p><hr><h1 id="참고로-현재-내-예제는-다음과-같다"><a href="#참고로-현재-내-예제는-다음과-같다" class="headerlink" title="참고로 현재 내 예제는 다음과 같다."></a>참고로 현재 내 예제는 다음과 같다.</h1><p><strong>1.레이아웃.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">th:lang</span> = <span class="string">"ko"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>MokaBoard<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tell the browser to be responsive to screen width --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/css/bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Font Awesome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/font-awesome/css/font-awesome.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ionicons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/Ionicons/css/ionicons.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Theme style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/AdminLTE.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE Skins. We have chosen the skin-blue for this starter</span></span><br><span class="line"><span class="comment">        page. However, you can choose any other skin. Make sure you</span></span><br><span class="line"><span class="comment">        apply the skin class to the body tag so the changes take effect. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;link rel="stylesheet" th:href="@&#123;/resources/dist/css/skins/skin-blue.min.css&#125;"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/skins/_all-skins.min.css&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Google Font --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery/dist/jquery.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap 3.3.7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net/js/jquery.dataTables.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SlimScroll --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery-slimscroll/jquery.slimscroll.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FastClick --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/fastclick/lib/fastclick.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE App --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/adminlte.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE for demo purposes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/demo.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">BODY TAG OPTIONS:</span></span><br><span class="line"><span class="comment">=================</span></span><br><span class="line"><span class="comment">Apply one or more of the following classes to get the</span></span><br><span class="line"><span class="comment">desired effect</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">| SKINS         | skin-blue                               |</span></span><br><span class="line"><span class="comment">|                  | skin-black                              |</span></span><br><span class="line"><span class="comment">|                  | skin-purple                             |</span></span><br><span class="line"><span class="comment">|                  | skin-yellow                             |</span></span><br><span class="line"><span class="comment">|                  | skin-red                                |</span></span><br><span class="line"><span class="comment">|                  | skin-green                              |</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">|LAYOUT OPTIONS | fixed                                   |</span></span><br><span class="line"><span class="comment">|               | layout-boxed                            |</span></span><br><span class="line"><span class="comment">|               | layout-top-nav                          |</span></span><br><span class="line"><span class="comment">|               | sidebar-collapse                        |</span></span><br><span class="line"><span class="comment">|               | sidebar-mini                            |</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"hold-transition skin-blue sidebar-mini"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">th:replace</span>=<span class="string">"samples/fragments/leftAside :: leftAsideFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 실제 콘텐츠  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer:: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"fragments/controlDiv :: controlDivFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 모바일 버전에서 하단과 우측에 나오는 사이즈 조정바 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ./wrapper --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optionally, you can add Slimscroll and FastClick plugins.</span></span><br><span class="line"><span class="comment">     Both of these plugins are recommended to enhance the</span></span><br><span class="line"><span class="comment">     user experience. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.컨텐츠.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>게시판예제-페이징<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result =<span class="comment">/*[[$&#123;msg&#125;]]*/</span> <span class="string">'default'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(result == <span class="string">'success'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"처리가 완료되었습니다."</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        게시판 페이징 적용</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>advanced tables<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Data tables<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>게시판 + 페이징<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-tools"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group input-group-sm"</span> <span class="attr">style</span>=<span class="string">"width: 150px;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"table_search"</span> <span class="attr">class</span>=<span class="string">"form-control pull-right"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 10px"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 200px"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 40px"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"boardVO : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.bno&#125;"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/read(bno=$&#123;boardVO.bno&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.title&#125;"</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.writer&#125;"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(boardVO.regdate, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.viewcnt&#125;"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">              <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 게시판 하단의 페이징 버튼 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer clearfix"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;pageMaker.cri.page&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination pagination-sm no-margin pull-right"</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:if</span>=<span class="string">"$&#123;pageMaker.prev&#125; == true"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;pageMaker.startPage&#125;-1)&#125;"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"idx,iterStat : $&#123;#numbers.sequence(pageMaker.startPage,pageMaker.endPage)&#125;"</span>  <span class="attr">th:classappend</span>=<span class="string">"$&#123;pageMaker.cri.page&#125; == $&#123;idx&#125; ? active : userclass"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;idx&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;idx&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:if</span>=<span class="string">"$&#123;pageMaker.next&#125; == true and $&#123;pageMaker.endPage &gt; 0&#125;"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/listPage(page=$&#123;pageMaker.endPage&#125;+1)&#125;"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.col --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /.row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래 th:inline 어트리뷰트는 스프링 컨트롤러로 부터 전달 받은 값을 javascript영역에 전달하기 위해 사용되었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>게시판예제-페이징<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result =<span class="comment">/*[[$&#123;msg&#125;]]*/</span> <span class="string">'default'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(result == <span class="string">'success'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"처리가 완료되었습니다."</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>현재 head 태그 자체를 fragment 할수 없어서 레이아웃.html의 head 내용이 엄청 길어졌다.<br>저 부분을 별도의 config.html 파일로 분리하고 싶은데 조금더 고민해봐야 할것 같다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="https://github.com/ultraq/thymeleaf-layout-dialect" target="_blank" rel="external nofollow noopener noreferrer">“thymeleaf-layout-dialect 깃허브페이지”</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> thymeleaf-layout-dialect </tag>
            
            <tag> dialect </tag>
            
            <tag> head </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC에서 xml환경에서 bean scan 방법</title>
      <link href="/2018/08/07/spring-20180807-spring-bean-scan/"/>
      <url>/2018/08/07/spring-20180807-spring-bean-scan/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>자꾸 까먹는 부분이다.<br>특히 Junit 테스트 돌릴 때 이 bean scan을 잘 몰라서 해맨적이 있었다.</p><p>스프링 MVC에는 크게 root-context.xml 과 servet-context.xml로 나뉜다.<br>둘다 스프링 컨테이너를 위한 설정파일이다.</p><p>root-context.xml는 WEB과는 관련이 없는 설정을 담당하며, servet-context.xml는 WEB에 관련된 설정을 담당한다.</p><h1 id="root-context-xml의-bean-scan-설정"><a href="#root-context-xml의-bean-scan-설정" class="headerlink" title="root-context.xml의 bean scan 설정"></a>root-context.xml의 bean scan 설정</h1><p>아래는 내 샘플 프로젝트의 root-context.xml이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mybatis-spring</span>=<span class="string">"http://mybatis.org/schema/mybatis-spring"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Root Context: defines shared resources visible to all other web components --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="driverClassName" value="com.mysql.cj.jdbc.Driver"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/mokaboard_dev?useSSL=false"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="username" value="mokaboard"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="password" value="password"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:log4jdbc:mysql://127.0.0.1:3306/mokaboard_dev?useSSL=false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"mokaboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="configLocation" value="classpath:/mybatis-config.xml"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="mapperLocations" value="classpath:mappers/**/*.xml"&gt;&lt;/property&gt; MyBatis mapper 경로 지정한다.</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/**/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:sampleMappers/**/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionTemplate은 MyBatis의 SqlSession인터페이스를 구현한 클래스로 기본적인 트랜잭션의 관리나 쓰레드 처리의 안정성 등을 보장해주고, 데이터베이스의 연겨로가 종료를 책임진다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span> <span class="attr">destroy-method</span>=<span class="string">"clearCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanumoka.mokaboard, com.hanumoka.sample"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean scan 부분은 아래와 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanumoka.mokaboard, com.hanumoka.sample"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>base-package를 보면 두개의 패키지의 bean들을 스캔한다.<br>exclude-filter 를 이용하여 org.springframework.stereotype.Controller 즉 @Controller 빈들을 제외한 bean만 스캔한다.</p><h1 id="servlet-context-xml의-bean-scan-설정"><a href="#servlet-context-xml의-bean-scan-설정" class="headerlink" title="servlet-context.xml의 bean scan 설정"></a>servlet-context.xml의 bean scan 설정</h1><p>아래 역시 내 샘플 프로젝트의 servlet-context.xml 파일 전체이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:beans</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DispatcherServlet Context: defines this servlet's request-processing </span></span><br><span class="line"><span class="comment">infrastructure --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Enables the Spring MVC @Controller programming model --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Handles HTTP GET requests for /resources/** by efficiently serving </span></span><br><span class="line"><span class="comment">up static resources in the $&#123;webappRoot&#125;/resources directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources </span></span><br><span class="line"><span class="comment">in the /WEB-INF/views directory --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; </span></span><br><span class="line"><span class="comment">&lt;beans:property name="prefix" value="/WEB-INF/views/" /&gt; &lt;beans:property </span></span><br><span class="line"><span class="comment">name="suffix" value=".jsp" /&gt; &lt;/beans:bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf View 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cacheable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout을 쓰기위해 3rd Party 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout ViewResolver 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanumoka.mokaboard, com.hanumoka.sample"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>baen scan 설정부분을 추려보면 아래와 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanumoka.mokaboard, com.hanumoka.sample"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>root-context.xml와 같이 두개의 패키지를 스캔한다.<br>use-default-filters=”false” 의 의미는 component-scan의 기본 필터를 사용하지 않겠다는 의미이다.<br>기본필터는 @Component, @Repository, @Service, @Controller 어노테이션이 붙은 클래스들을 자동 탐지한다.</p><p>그리고 include-filter를 통해서 @Controller 가 지정된 빈만 스캔하게 설정한다.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bean scan </tag>
            
            <tag> root-context.xml </tag>
            
            <tag> servlet-context.xml </tag>
            
            <tag> use-default-filters </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC에서 Controller 일괄 예외처리하기 (@ControllerAdvice)</title>
      <link href="/2018/08/07/spring-20180807-spring-ControllerAdvice/"/>
      <url>/2018/08/07/spring-20180807-spring-ControllerAdvice/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>항목</th><th>개발환경</th><th>비고</th></tr></thead><tbody><tr><td>운영체제</td><td>Widnwos10(64)</td><td></td></tr><tr><td>백엔드프레임워크</td><td>Spring MVC 4</td><td></td></tr><tr><td>개발언어</td><td>java1.8</td><td></td></tr><tr><td>WAS</td><td>Tomcat9</td><td></td></tr><tr><td>템플릿엔진</td><td>Thymeleaf3</td><td></td></tr><tr><td>템플릿엔진레이아웃</td><td>Tymeleaf-laout-dialect2</td><td></td></tr><tr><td>DB</td><td>mysql8</td><td></td></tr><tr><td>ORM</td><td>mybatis</td><td></td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>Spring MVC에서 @ControllerAdvice를 사용해서 controller 에서 발생하는 예외를 일괄 처리하는 방법을 알아보겠다.</p><p><strong>이 예제는 Spring boot가 아닌, Spring lagacy project로 만들었으며 템플릿 엔진으로 Thymeleaf를 사용하고 있다.</strong></p><h1 id="1-ControllerAdvice를-등록할-클래스-만들기"><a href="#1-ControllerAdvice를-등록할-클래스-만들기" class="headerlink" title="1.@ControllerAdvice를 등록할 클래스 만들기"></a>1.@ControllerAdvice를 등록할 클래스 만들기</h1><p>아래처럼 클래스를 만든다.</p><p>스프링 MVC에서 제공하는 @ControllerAdvice는 호출되는 메소드에서 발생된 Exception을 모두 처리하는 역할을 한다.<br>@ControllerAdvice 애노테이션을 통해서 이 클래스의 객체가 컨트롤러에서 발생하는 Exception을 전문적으로 처리하는 클래스라는 것을 명시한다.</p><p>만드는 방식은 다음과 같다.</p><ul><li>1.클래스에 @ControllerAdvice 라는 애노테이션 처리</li><li>2.각 메소드에 @ExceptionHandler를 이용해서 적절한 타입의 Exception을 처리</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleCommonExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleCommonExceptionAdvice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* common메소드는  Exception 타입으로 처리하는 모든 예외를 처리하도록 설정 */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">common</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(e.toString());</span><br><span class="line"></span><br><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mav.setViewName(<span class="string">"/samples/errors/error_common"</span>);</span><br><span class="line">mav.addObject(<span class="string">"exception"</span>, e);  <span class="comment">//예외를 뷰에 던져서 주자.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-error-common-html-파일을-만들다"><a href="#2-error-common-html-파일을-만들다" class="headerlink" title="2.error_common.html 파일을 만들다."></a>2.error_common.html 파일을 만들다.</h1><p>이 파일은 exception 내용을 보여준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        error_common</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Optional description<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Here<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content container-fluid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--------------------------</span></span><br><span class="line"><span class="comment">        | Your Page Content Here |</span></span><br><span class="line"><span class="comment">        --------------------------&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$&#123;exception.getMessage()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"est : $&#123;exception.getStackTrace()&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"$&#123;est.toString()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>부트스트랩과 thymeleaf때문에 좀 지저분한데, exception내용을 보여주는 부분은 아래와 같다. 중요한 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$&#123;exception.getMessage()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"est : $&#123;exception.getStackTrace()&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"$&#123;est.toString()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-ControllerAdvice-동작-확인하기"><a href="#3-ControllerAdvice-동작-확인하기" class="headerlink" title="3.@ControllerAdvice 동작 확인하기"></a>3.@ControllerAdvice 동작 확인하기</h1><p>컨트롤러에 아래처럼 RunTimeException이 발생하게 수정하고 url로 접근해 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/listAll"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listAll</span><span class="params">(Locale locale, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"show all list........"</span>);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"list"</span>, service.listAll());</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> e1 = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/samples/board/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180807-spring-ControllerAdvice_1.png" alt="결과확인"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> thymeleaf </tag>
            
            <tag> @ControllerAdvice </tag>
            
            <tag> ControllerAdvice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring controller와 thymeleaf뷰간 데이터 전달방식 정리(게시판 crud)</title>
      <link href="/2018/08/05/spring-20180805-spring-controller-thymeleaf-crud/"/>
      <url>/2018/08/05/spring-20180805-spring-controller-thymeleaf-crud/</url>
      
        <content type="html"><![CDATA[<h1 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h1><table><thead><tr><th>개발환경</th></tr></thead><tbody><tr><td>windows10(64)</td></tr><tr><td>spring4</td></tr><tr><td>java1.8</td></tr><tr><td>tomcat9</td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이 글은 spring 개인 프로젝트에 thymeleaf를 적용함에 있어서, spring controller와 thymeleaf간의 데이터 전달 방식을 정리하기 위한 글이다.<br>게시판 crud 예제를 통해서 설명할 것이다.</p><h1 id="게시판-글-리스트-조회"><a href="#게시판-글-리스트-조회" class="headerlink" title="게시판 글 리스트 조회"></a>게시판 글 리스트 조회</h1><p><img src="/images/20180805-spring-controller-thymeleaf-crud_1.png" alt="게시판 글 리스트 조회 화면"></p><p><strong>1.controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/listAll"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listAll</span><span class="params">(Locale locale, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"show all list........"</span>);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"list"</span>, service.listAll());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/samples/board/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컨트롤러에서는 게시판글을 조회해서 글 vo를 List로 담아 model에 담는다.</p><p><strong>2.list.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result =<span class="comment">/*[[$&#123;msg&#125;]]*/</span> <span class="string">'default'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(result == <span class="string">'success'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"처리가 완료되었습니다."</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">'#example1'</span>).DataTable(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="string">'ordering'</span>    : <span class="literal">false</span>,   <span class="comment">/* 자동으로 정렬되는 것을 막자 */</span></span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    /* $('#example2').DataTable(&#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'paging'</span>      : <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'lengthChange'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'searching'</span>   : <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'ordering'</span>    : <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'info'</span>        : <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'autoWidth'</span>   : <span class="literal">false</span></span></span><br><span class="line">    &#125;); */</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        게시판 리스트</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>advanced tables<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Data tables<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>List All Page<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"example1"</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-striped"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"boardVO : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.bno&#125;"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/read(bno=$&#123;boardVO.bno&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.title&#125;"</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.writer&#125;"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(boardVO.regdate, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.viewcnt&#125;"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.col --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /.row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 html은 부트스트랩 테마때문에 좀 길긴 하다.<br>중요한 부분을 추리면 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th:each 는 thymeleaf의 반복문이다. list라는 spring controller부터 전달 받은 객체를 boardVO라는 이름으로 접근한다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"boardVO : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.bno&#125;"</span>&gt;</span>BNO<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 글의 제목을 눌렀을때 글 보기페이지로 이동하기 위한 링크 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /samplehome/board/read(bno=$&#123;boardVO.bno&#125;) 는 /samplehome/board/read?bno=$&#123;boardVO.bno&#125; 와 같은 의미이다.  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/samplehome/board/read(bno=$&#123;boardVO.bno&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.title&#125;"</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.writer&#125;"</span>&gt;</span>WRITER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf는 dataes.format을 통해 데이터 포멧 처리를 도와준다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(boardVO.regdate, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span>REGDATE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;boardVO.viewcnt&#125;"</span>&gt;</span>VIEWCNT<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="게시판-글-한개-조회화면"><a href="#게시판-글-한개-조회화면" class="headerlink" title="게시판 글 한개 조회화면"></a>게시판 글 한개 조회화면</h1><p>게시판 글 리스트에서 특정 글을 선택했을때 나오는 화면.</p><p><img src="/images/20180805-spring-controller-thymeleaf-crud_2.png" alt="게시판 글 한개 조회화면"></p><p><strong>1.controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/read"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(@RequestParam(<span class="string">"bno"</span>)</span> <span class="keyword">int</span> bno, Model model) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"sampleboard read bno:"</span> + bno);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"boardVO"</span>, service.read(bno));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/samples/board/read"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특정 게시글 하나를 db에서 조회하여 model에 boardVO라는 이름으로 담아 넘긴다.</p><p><strong>2.read.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> formObj = $(<span class="string">"form[role='form']"</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(formObj);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".btn-warning"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"action"</span>, <span class="string">"/samplehome/board/modify"</span>);</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"method"</span>, <span class="string">"get"</span>);</span></span><br><span class="line">formObj.submit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".btn-danger"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"action"</span>, <span class="string">"/samplehome/board/remove"</span>);</span></span><br><span class="line">formObj.submit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".btn-primary"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"action"</span>, <span class="string">"/samplehome/board/listAll"</span>);</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"method"</span>, <span class="string">"get"</span>);</span></span><br><span class="line">formObj.submit();</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        게시판 읽기</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Optional description<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 게시판<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>read<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content container-fluid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--------------------------</span></span><br><span class="line"><span class="comment">        | Your Page Content Here |</span></span><br><span class="line"><span class="comment">        --------------------------&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>READ BOARD<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- form start --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;boardVO&#125;"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"*&#123;bno&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardTitle"</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;title&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardTitle"</span>  <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">th:inline</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span>[[*&#123;content&#125;]]<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardWriter"</span>&gt;</span>Writer<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;writer&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardWriter"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>Modify<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>ListAll<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>역시 부트스트랩 테마 때문에 좀 길다.<br>데이터가 맵핑되는 부분을 추려보겠다.<br>form 태그 내부를 보면 아래처럼 controller으로 부터 전달되는 데이터를 받는 부분이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- th:object="$&#123;boardVO&#125;" 이렇게 선언하면 내부 태크에서 프로퍼티로 값 접근이 가능하다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;boardVO&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th:field="*&#123;bno&#125;" 는 boardVO.bno값을 꺼내 자동으로 값을 설정하며, 이 form이 get이나 post로 컨트롤러에 전달되면 bno라는 이름으로 값이 전달된다. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"*&#123;bno&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardTitle"</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- th:value도 th:field는 boardVO.title값을 꺼내 자동으로 태그에 값을 설정한다, 그러나 이 form 태그가 get이나 post로 controller에 전달 되었을때 title이라는 이름으로 값전달이 되지 않는다. 만약 input 태그에 name 어트리뷰트가 지정되어 있다면, 전달이 된다.  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;title&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardTitle"</span>  <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 컨트롤러에서 전달된 값을 textarea에 값을 채우기 위해서는 아래처럼 설정해야 한다. th:field로 설정이 가능하긴 하나, 이렇게 설정한 경우 앞서 말했듯이 form액션이 발생했을때 아래 texteare 태그에 name 어트리뷰트가 없지만 자동으로 컨트롤러로 값이 전달된다. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">th:inline</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span>[[*&#123;content&#125;]]<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardWriter"</span>&gt;</span>Writer<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;writer&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardWriter"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="게시글-수정-화면"><a href="#게시글-수정-화면" class="headerlink" title="게시글 수정 화면"></a>게시글 수정 화면</h1><p><img src="/images/20180805-spring-controller-thymeleaf-crud_3.png" alt="게시판 글 수정화면"></p><p><strong>1.controller</strong></p><p>게시글 수정화면 (GET)이동 함수와, 실제 게시글 수정(POST)을 해주는 함수이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/modify"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modifyGET</span><span class="params">(@RequestParam(<span class="string">"bno"</span>)</span> <span class="keyword">int</span> bno, Model model) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"sampleboard read bno:"</span> + bno);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"boardVO"</span>, service.read(bno));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/samples/board/modify"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/modify"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modifyPOST</span><span class="params">(BoardVO board, RedirectAttributes rttr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logger.info(<span class="string">"modify post......"</span>);</span><br><span class="line">logger.info(board.toString());</span><br><span class="line"></span><br><span class="line">service.modify(board);</span><br><span class="line"></span><br><span class="line">rttr.addFlashAttribute(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/samplehome/board/listAll"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.modify.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;samples/layout/sampleLayout&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> formObj = $(<span class="string">"form[role='form']"</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(formObj);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".btn-primary"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"action"</span>, <span class="string">"/samplehome/board/modify"</span>);</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"method"</span>, <span class="string">"post"</span>);</span></span><br><span class="line">formObj.submit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".btn-warning"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"action"</span>, <span class="string">"/samplehome/board/listAll"</span>);</span></span><br><span class="line"><span class="actionscript">formObj.attr(<span class="string">"method"</span>, <span class="string">"get"</span>);</span></span><br><span class="line">formObj.submit();</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content Wrapper. Contains page content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Content Header (Page header) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        게시판 수정</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>Optional description<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-dashboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 게시판<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>modify<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content container-fluid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--------------------------</span></span><br><span class="line"><span class="comment">        | Your Page Content Here |</span></span><br><span class="line"><span class="comment">        --------------------------&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-header with-border"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"box-title"</span>&gt;</span>MODIFY BOARD<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.box-header --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- form start --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-body"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;boardVO&#125;"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"*&#123;bno&#125;"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardTitle"</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"*&#123;title&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardTitle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">th:field</span>=<span class="string">"*&#123;content&#125;"</span>  <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputBoardWriter"</span>&gt;</span>Writer<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:field</span>=<span class="string">"*&#123;writer&#125;"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputBoardWriter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- /.box-body --&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-footer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>Cancle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.box --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /.content-wrapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>게시글 수정화면은 read와 달리 모든 값을 다 서버로 전달해야 하므로 th:field로 모든 값을 처리한 것을 확인 할수 있다.</p><h1 id="마무리-정리"><a href="#마무리-정리" class="headerlink" title="마무리 정리"></a>마무리 정리</h1><p>일단 html 태그에 name 어트리뷰트가 불 필요 하다.<br>name 어트리뷰트를 사용할수 있지만, 햇갈리니 안쓰는게 좋아보인다.<br>서버에서 단순히 thymeleaf 뷰 html 파일에 값을 전달할때 th:value, th:field를 사용 할수 있다.<br><strong>name 어트리뷰트가 없는경우 form 액션발생시 th:value는 컨트롤러에 값을 전달하지 않지만, th:field는 자동으로 값을 컨트롤러에 전달한다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> th:value </tag>
            
            <tag> th:field </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Controller URI 설계 팁</title>
      <link href="/2018/08/05/spring-20180805-spring-mvc-controller-url-tip/"/>
      <url>/2018/08/05/spring-20180805-spring-mvc-controller-url-tip/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>방식</th><th>URI</th><th>설명</th></tr></thead><tbody><tr><td>GET</td><td>/board/register</td><td>게시물의 등록 페이지를 보여준다.</td></tr><tr><td>POST</td><td>/board/register</td><td>게시물을 실제로 등록한다.</td></tr><tr><td>GET</td><td>/board/read?bno=xxx</td><td>특정 번호의 게시물을 조회한다.</td></tr><tr><td>GET</td><td>/board/mod?bno=xxx</td><td>게시물의 수정 화면으로 이동한다.</td></tr><tr><td>POST</td><td>/board/mod</td><td>게시물을 수정한다.</td></tr><tr><td>POST</td><td>/board/remove</td><td>게시물을 삭제한다.</td></tr><tr><td>GET</td><td>/board/list</td><td>게시물의 목록을 확인한다.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> tip </tag>
            
            <tag> controller </tag>
            
            <tag> url </tag>
            
            <tag> uri </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring4 + thymeleaf 템플릿엔진 lagacy html5 셋팅</title>
      <link href="/2018/08/05/spring-20180805-spring4-thymeleaf-lagacy-html5/"/>
      <url>/2018/08/05/spring-20180805-spring4-thymeleaf-lagacy-html5/</url>
      
        <content type="html"><![CDATA[<h1 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h1><table><thead><tr><th>개발환경</th></tr></thead><tbody><tr><td>windows10(64)</td></tr><tr><td>spring4</td></tr><tr><td>java1.8</td></tr><tr><td>tomcat9</td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p><strong>lagacy HTML5셋팅이란</strong> Thymeleaf는 Well-Formed XML로 HTML을 작성해야 한다.<br>즉 XHTML 문법처럼 모든 태그를 닫아주어야 한다.<br>따라서 HTML5로 작성된 디자인, 예를 들어 아래와 같이 br태그를 닫아주지 않는다면 서버 실행시 오류를 발생하며 동작하지 않게 된다.<br>tomcat 자체가 아예 동작하지 않는 것은 좀 충격적이었다….</p><p><img src="/images/20180805-spring4-thymeleaf-lagacy-html5_1.png" alt="Thymeleaf의 Well-Formed XML 비사용시 tomcat 오류"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>  <span class="comment">&lt;!-- Thymeleaf 템플릿 엔진을 사용할 경우 에러가 발생 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="comment">&lt;!-- 이렇게 br태그를 닫아줘야 Thymeleaf 템플릿 엔진이 동작한다. --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>lagacy HTML5셋팅은 Thymeleaf를 Well-Formed XML로 html을 작성하는 것이 아니라 HTML5 문법으로 작성할수 있게 도와주는 셋팅이다.</strong></p><h1 id="thymeleaf-lagacy-html5-셋팅"><a href="#thymeleaf-lagacy-html5-셋팅" class="headerlink" title="thymeleaf lagacy html5 셋팅"></a>thymeleaf lagacy html5 셋팅</h1><p><strong>1.pom.xml 설정</strong></p><p>혹시나해서 thymeleaf 관련 전체 내용보여주겠다.<br>nekohtml 가 lagacy html5관련 라이브러릴다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thymeleaf 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf lagacy html5를 위한 라이브러리 , 이건 스프링 부트 용인듯 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf lagacy html5를 위한 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sourceforge.nekohtml/nekohtml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.servlet-context.xml 설정</strong></p><p>음 아래 내용은 관련이 있는지 없는지 정확히 모르겠다.<br>하지만 혹시나 해서 기록한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf View 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cacheable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout을 쓰기위해 3rd Party 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout ViewResolver 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.application.properties 파일 생성하기.</strong></p><p>src/main/resources 폴더에 application.properties 파일을 생성하고 내용을 아래처럼 채우자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.mode&#x3D;LEGACYHTML5</span><br></pre></td></tr></table></figure><p><img src="/images/20180805-spring4-thymeleaf-lagacy-html5_2.png" alt="application.properties 파일"></p><p><strong>4.thymeleaf에서 html5 문법 동작확인</strong><br>즉 br태그를 html5형식으로 닫지않고 사용했을때 서버가 동작하는지 확인해보자.</p><p><img src="/images/20180805-spring4-thymeleaf-lagacy-html5_3.png" alt="결과확인"></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/08/04/spring-20180804-spring4-thymeleaf3-thymeleaf-layout/">“spring4 thymeleaf2 버전 설정”</a><br><a href="/2018/08/04/spring-20180804-spring4-thymeleaf3-thymeleaf-layout/">“spring4 thymeleaf3 버전 설정”</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> thymeleaf </tag>
            
            <tag> lagacy html5 </tag>
            
            <tag> html5 </tag>
            
            <tag> xhtml </tag>
            
            <tag> well formed xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring4 + Thymeleaf(3버전) + thymeleaf layout dialect(2버전) 레이아웃 설정하기</title>
      <link href="/2018/08/04/spring-20180804-spring4-thymeleaf3-thymeleaf-layout/"/>
      <url>/2018/08/04/spring-20180804-spring4-thymeleaf3-thymeleaf-layout/</url>
      
        <content type="html"><![CDATA[<h1 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h1><table><thead><tr><th>개발환경</th></tr></thead><tbody><tr><td>windows10(64)</td></tr><tr><td>spring4</td></tr><tr><td>java1.8</td></tr><tr><td>tomcat9</td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>저번엔 Spring4에 Thymeleaf2 그리고 thymeleaf layout dialect 레이아웃을 셋팅해보았다.<br>이번에는 Thymeleaf를 현재 최신버전인 3버전, thymeleaf layout dialect 2버전 설정을 해보겠다.</p><h1 id="Spring4-Thymeleaf3-thymeleaf-layout-dialect-레이아웃-셋팅하기"><a href="#Spring4-Thymeleaf3-thymeleaf-layout-dialect-레이아웃-셋팅하기" class="headerlink" title="Spring4 + Thymeleaf3 + thymeleaf layout dialect 레이아웃 셋팅하기"></a>Spring4 + Thymeleaf3 + thymeleaf layout dialect 레이아웃 셋팅하기</h1><p><strong>1.pom.xml 수정하기</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thymeleaf 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf-layout-dialect 라이브러리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.servlet-context.xml 파일 수정하기.</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 기존에 사용하던 리졸버 주석처리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; </span></span><br><span class="line"><span class="comment">&lt;beans:property name="prefix" value="/WEB-INF/views/" /&gt; </span></span><br><span class="line"><span class="comment">&lt;beans:property name="suffix" value=".jsp" /&gt; </span></span><br><span class="line"><span class="comment">&lt;/beans:bean&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf View 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cacheable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout을 쓰기위해 3rd Party 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout ViewResolver 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.템플릿 레이아웃관련 html 파일을 관리할 폴더를 만들자.</strong></p><p>WEB-INF/views/fragments 폴더를 생성하자.<br>이 폴더는 레이아웃 템플릿에서 재사용할 조각 html파일이 들어간다.<br>WEB-INF/views/layout 폴더를 생성하자.<br>이 폴더는 레이아웃 템플릿 html파일이 들어간다.</p><p><strong>4.WEB-INF/views/layout에 default.html 파일을 생성하자.</strong></p><p>이 파일은 레이아웃의 템플릿, 즉 틀이 되는 html파일이다.<br>자세한 설명은 주석을 보길바란다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>MokaBoard<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tell the browser to be responsive to screen width --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/css/bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Font Awesome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/font-awesome/css/font-awesome.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ionicons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/Ionicons/css/ionicons.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Theme style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/AdminLTE.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE Skins. We have chosen the skin-blue for this starter</span></span><br><span class="line"><span class="comment">        page. However, you can choose any other skin. Make sure you</span></span><br><span class="line"><span class="comment">        apply the skin class to the body tag so the changes take effect. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;link rel="stylesheet" th:href="@&#123;/resources/dist/css/skins/skin-blue.min.css&#125;"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/skins/_all-skins.min.css&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Google Font --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery/dist/jquery.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap 3.3.7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net/js/jquery.dataTables.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SlimScroll --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery-slimscroll/jquery.slimscroll.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FastClick --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/fastclick/lib/fastclick.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE App --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/adminlte.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE for demo purposes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/demo.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body 태그 내부의 header 를 담당하는 부분이다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 아래 div가 컨트롤러에 의해 교체되는 content 영역이다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body 태그 내부의 footer 를 담당하는 부분이다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer :: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.header.html, footer.html 파일을 만들다.</strong></p><p>WEB-INF/views/fragments 폴더에 header.html, footer.html을 생성하자.<br>header.html과 footer.html은 별 내용은 없다.<br>header.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"main-header"</span> <span class="attr">th:fragment</span>=<span class="string">"headerFragment"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 헤더 영역, 원하는 것을 넣으면 된다. --&gt;</span></span><br><span class="line"> 헤더 영역</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>footer.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Main Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"main-footer"</span> <span class="attr">th:fragment</span>=<span class="string">"footerFragment"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer 영역, 원하는 것을 넣으면 된다. --&gt;</span></span><br><span class="line">    푸터 영역</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>6.content영역에 들어갈 home.html 파일을 만들자.</strong></p><p>WEB-INF/views에 home.html 파일을 만들자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;layout/default&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">/*&lt;![CDATA[*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  alert(<span class="string">"여긴 컨텐츠 영역 스크립트!"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">/*]]&gt;*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  컨텐츠 영역</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 파일에서 중요한 부분을 찝어 보겠다.<br>일단 content가 될 html파일의 html태그를 보면 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-layout-decorate</span>=<span class="string">"~&#123;layout/default&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>html 태그 내부에 템플릿 레이아웃을 결정하는 구문은 아래다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-layout-decorate&#x3D;&quot;~&#123;layout&#x2F;default&#125;&quot;</span><br></pre></td></tr></table></figure><p>thymeleaf-layout-dialect 1버전과는 다른 형식이다.<br>layout/default는 해당 컨텐츠 html이 컨트롤러에 의해 호출될 때 가져오는 템플릿 레이아웃 html 파일이다.</p><p>콘텐츠.html파일 자체에서 템플릿레이아웃.html파일을 결정된다.</p><p>그리고 home.html의 아래부분이</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  컨텐츠 영역</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>default.html 의 아래를 치환하게 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>또 중요한 부분이 있다.<br>컨텐츠.html의 head 태그는 자동으로 레이아웃.html의 head 에 추가된다.<br>thymelef-layout-dialect2 에서는 1버전과 달리, head를 fragment로 관리할 필요 없다.<br>라이브러리에서 자동으로 head를 관리해 준다.</p><p>즉 아래처럼 레이아웃.html 의 head태그가 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>레이아웃 페이지의 타이틀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"제이쿼리"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 레이아웃에 컨텐츠 영역에 들어갈 컨텐츠.hmlt의 head가 아래와 같다면</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>컨텐츠 페이지 타이틀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"뷰JS"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>결과적으로 렌더링된 최종 html의 head태그 내부는 다음과 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>컨텐츠 페이지 타이틀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"제이쿼리"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"뷰JS"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>즉 중복된 태그는 컨텐츠.html의 것으로 따라가며, 없는 내용은 추가된다.<br>thymelef-layout-dialect버전이 2로 올라가면서 생긴 변화이다.</p><p><strong>7.controller 부분</strong></p><p>스프링의 컨트롤러는 jsp를 호출하는 것 처럼 home을 호출하면 된다.<br>앞서 설정한 servlet-context.xml에 설정으로 view/home.html을 리졸브한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/home"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(Locale locale, Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/home"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180804-spring4-thymeleaf3-thymeleaf-layout-dialect_1.png" alt="내 폴더 트리에는 파일이 위 내용보다 조금더 많지만, 신경쓸거 없다. 그냥 fragments가 조금더 많을 뿐이다."></p><p>내 실제 default.html은 참고로 보여준다면 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">th:lang</span> = <span class="string">"ko"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>MokaBoard<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tell the browser to be responsive to screen width --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/css/bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Font Awesome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/font-awesome/css/font-awesome.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ionicons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/Ionicons/css/ionicons.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Theme style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/AdminLTE.min.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE Skins. We have chosen the skin-blue for this starter</span></span><br><span class="line"><span class="comment">        page. However, you can choose any other skin. Make sure you</span></span><br><span class="line"><span class="comment">        apply the skin class to the body tag so the changes take effect. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;link rel="stylesheet" th:href="@&#123;/resources/dist/css/skins/skin-blue.min.css&#125;"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/dist/css/skins/_all-skins.min.css&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Google Font --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery/dist/jquery.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap 3.3.7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/bootstrap/dist/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataTables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net/js/jquery.dataTables.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SlimScroll --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/jquery-slimscroll/jquery.slimscroll.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- FastClick --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/bower_components/fastclick/lib/fastclick.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE App --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/adminlte.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- AdminLTE for demo purposes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resources/dist/js/demo.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">BODY TAG OPTIONS:</span></span><br><span class="line"><span class="comment">=================</span></span><br><span class="line"><span class="comment">Apply one or more of the following classes to get the</span></span><br><span class="line"><span class="comment">desired effect</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">| SKINS         | skin-blue                               |</span></span><br><span class="line"><span class="comment">|                  | skin-black                              |</span></span><br><span class="line"><span class="comment">|                  | skin-purple                             |</span></span><br><span class="line"><span class="comment">|                  | skin-yellow                             |</span></span><br><span class="line"><span class="comment">|                  | skin-red                                |</span></span><br><span class="line"><span class="comment">|                  | skin-green                              |</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">|LAYOUT OPTIONS | fixed                                   |</span></span><br><span class="line"><span class="comment">|               | layout-boxed                            |</span></span><br><span class="line"><span class="comment">|               | layout-top-nav                          |</span></span><br><span class="line"><span class="comment">|               | sidebar-collapse                        |</span></span><br><span class="line"><span class="comment">|               | sidebar-mini                            |</span></span><br><span class="line"><span class="comment">|---------------------------------------------------------|</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"hold-transition skin-blue sidebar-mini"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">th:replace</span>=<span class="string">"samples/fragments/leftAside :: leftAsideFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 실제 콘텐츠  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer:: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"fragments/controlDiv :: controlDivFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 모바일 버전에서 하단과 우측에 나오는 사이즈 조정바 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ./wrapper --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optionally, you can add Slimscroll and FastClick plugins.</span></span><br><span class="line"><span class="comment">     Both of these plugins are recommended to enhance the</span></span><br><span class="line"><span class="comment">     user experience. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 템플릿 </tag>
            
            <tag> 레이아웃 </tag>
            
            <tag> spring4 </tag>
            
            <tag> Thymeleaf3 </tag>
            
            <tag> dialect </tag>
            
            <tag> thymeleaf layout dialect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Thymeleaf(2버전) 적용해보기 + 레이아웃구성(thymeleaf-layout-dialect 1버전)</title>
      <link href="/2018/08/01/spring-20180801-spring-Thymeleaf/"/>
      <url>/2018/08/01/spring-20180801-spring-Thymeleaf/</url>
      
        <content type="html"><![CDATA[<h1 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h1><table><thead><tr><th>개발환경</th></tr></thead><tbody><tr><td>windows10</td></tr><tr><td>spring4</td></tr><tr><td>java1.8</td></tr><tr><td>tomcat9</td></tr></tbody></table><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>개인 스프링 프로젝트에서 사용할 템플릿 엔진을 찾고있다.<br>저번엔 JSP + tiles3를 사용해 보려했으나, 영 마음에 안들어 접었었다.<br>조금 찾아보니 Spring boot에서 공식 지원(민다고?)하는 Thymeleaf(타임리프?)라는 텍스트 템플릿 엔진이라는 것을 알게되었다.</p><hr><h1 id="JSP의-한계"><a href="#JSP의-한계" class="headerlink" title="JSP의 한계"></a>JSP의 한계</h1><p>순수한 HTML이 아닌것이 jsp의 한계이다.<br>JSP는 java server page 로 서버에서 렌더링 해주는 서버 페이지이다.<br>즉 HTML에 JSP의 고유한 문법인 스크립틀릿 등의 JSP 태그 라이브러리가 침투적으로 존재 한다.<br>JSP의 기술은 서블릿과 더불어 강력한 기술이지만, 아니 강력한 기술이었다.</p><p>JSP는 HTML에 서버의 기능적 관련 기술들이 침투함으로써 단독으로 프론트 엔드 개발을 할수 있는 기회를 잃게 된다.<br>요즘같이 강력한 프론트엔드 프레임워크가 있는 시기에 점차 JSP는 점차 입지를 잃어 가는듯 하다.</p><hr><h1 id="Thymeleaf란"><a href="#Thymeleaf란" class="headerlink" title="Thymeleaf란?"></a>Thymeleaf란?</h1><p>타임리프(Thymeleaf)는 Freemarker, Velocity와 같은 View Template Engine 입니다.<br>하지만 타임리프는 다른 템플릿 엔진들과는 차별화되는 장점을 지니고 있습니다.</p><ul><li>서버상에서 동작하지 않아도 된다.</li><li>전체적인 마크업 구조를 흐트려트리지 않는다.</li></ul><p>Thymeleaf 템플릿은 형태가 자연스럽고 태그 라이브러리에 의존하지 않는다.<br>또한 HTML이 사용 가능한 곳에서는 언제든 편집하거나 렌더링 할 수 있다.<br>그리고 서블릿 스펙과 관계가 없으므로 Thymeleaf 템플릿은 JSP가 감히 사용될 수 없는 곳에서도 사용된다.</p><hr><h1 id="Thymeleaf-장점"><a href="#Thymeleaf-장점" class="headerlink" title="Thymeleaf 장점"></a>Thymeleaf 장점</h1><p><strong>tag library를 사용한 JSP의 예</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form:inputText</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>thymeleaf standard dialect를 사용하는 예</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"James Carrot"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>요즘 웹 개발에서 필수적이라 생각되는 것은 프론트엔드와 백엔드의 독립된 개발이다.<br>위에 코드를 잘 보면 jsp tag library를 사용하였을 때 만약 서버에서 처리해주지 않는다면 해당 태그가 제대로 표시되지 않는다.<br>반면 아래 thymeleaf standard dialect를 사용 할 경우를 보면 <strong>th:</strong> 로 시작하는 부분이 처리되지 않더라도 완벽하게 html input 태그의 형태를 가지고 있다. </p><p>thymeleaf도 jsp처럼 html에 침투적인 기술이다.<br><strong>BUT HTML의 태그를 손대는 것이 아니라 HTML태그 내부의 어트리뷰트를 이용하여 기술을 구현하고 있다.</strong><br><strong>이 점이 thymeleaf의 장점이다.</strong><br>브라우저는 HTML 태그내부의 어트리뷰트에 관대하기 때문이다.<br>내 기억이 맞는지 모르겠으나, HTML5에서는 커스텀 어트리뷰트를 공식 지원하는것으로 기억하고 있다.<br>따라서 디자이너는 was의 상태와 관계없이 단독으로 html을 개발할수 있게 된다. </p><hr><h1 id="Spring4-mvc-lagacy-프로젝트에-Thymeleaf-적용하고-동작확인하기"><a href="#Spring4-mvc-lagacy-프로젝트에-Thymeleaf-적용하고-동작확인하기" class="headerlink" title="Spring4 mvc lagacy 프로젝트에 Thymeleaf 적용하고 동작확인하기"></a>Spring4 mvc lagacy 프로젝트에 Thymeleaf 적용하고 동작확인하기</h1><p><strong>1.pom.xml에 Thymeleaf 라이브러리 추가하기</strong></p><p>현재 3버전이 나와있지만, 나도 처음 접하고 공부하는 중이라 2버전을 기준으로 실습했다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template Engine 2 버전 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf의 레이아웃 추가 라이브러리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.servlet-context.xml 파일수정하기.</strong></p><p>일단 기존의 jsp에서 사용하던 InternalResourceViewResolver를 주석처리한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; </span></span><br><span class="line"><span class="comment">&lt;beans:property name="prefix" value="/WEB-INF/views/" /&gt; </span></span><br><span class="line"><span class="comment">&lt;beans:property name="suffix" value=".jsp" /&gt; &lt;/beans:bean&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>스프링에서 Thymeleaf를 사용하기 위해서 Thymeleaf-Spring 통합을 활성화 시키는 세 개의 빈을 설정해야한다.<br>1.논리적 뷰 이름으로 Thymeleaf 템플릿 뷰를 결정하는 ThymeleafViewResolver<br>2.템플릿을 처리하고 결과를 렌더링 하는 SpringTemplateEngine<br>3.Thymeleaf 템플릿을 불러오는 TemplateResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf View 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cacheable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout을 쓰기위해 3rd Party 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf laytout ViewResolver 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>사실 아래 additionalDialects는 현재는 필요가 없다.<br>아래 설정은 thymeleaf-layout-dialect 라는 이름의 Thymeleaf의 레이아웃 관련 라이브러리다.<br>일단 나중에 레이아웃을 설정하기 위해서 사용할 거라서 미리 셋팅했다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.WEB-INF/views/home.html 파일 만들기.</strong></p><p>이 html파일은 컨트롤러가 리턴해서 클라이언트에게 보여줄 파일이다.<br>thymeleaf 텍스트 템플릿 엔진이 스프링에게 jsp파일이 아니라 html파일을 렌더링 해서 클라이언트에게 전달하게 도와준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Hello World..!!</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:text</span>=<span class="string">"$&#123;serverTime&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4.HomeController.java</strong></p><p>컨트롤러는 jsp를 사용할때와 별반 다르지 않다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/home"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(Locale locale, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);</span><br><span class="line"></span><br><span class="line">String formattedDate = dateFormat.format(date);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"serverTime"</span>, formattedDate );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.동작 확인</strong></p><p>tomcat을 시작하고 스프링 컨트롤러가 html을 잘 전달하는지 확인하자.</p><p><img src="/images/20180801-spring-Thymeleaf_1.png" alt="동작을 확인했다."></p><hr><h1 id="ERROR-org-thymeleaf-exceptions-TemplateInputException-Error-resolving-template-“index”-template-might-not-exist-or-might-not-be-accessible-by-any-of-the-configured-Template-Resolvers"><a href="#ERROR-org-thymeleaf-exceptions-TemplateInputException-Error-resolving-template-“index”-template-might-not-exist-or-might-not-be-accessible-by-any-of-the-configured-Template-Resolvers" class="headerlink" title="ERROR - org.thymeleaf.exceptions.TemplateInputException: Error resolving template “index”, template might not exist or might not be accessible by any of the configured Template Resolvers"></a>ERROR - org.thymeleaf.exceptions.TemplateInputException: Error resolving template “index”, template might not exist or might not be accessible by any of the configured Template Resolvers</h1><p>Thymeleaf를 적용하고 tomcat을 실행할때 발생하는 독특한 에러이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">정보: Server startup in 22985 ms</span><br><span class="line">ERROR: org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-1] Exception processing template &quot;index&quot;: Error resolving template &quot;index&quot;, template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">8월 01, 2018 5:24:18 오전 org.apache.catalina.core.StandardWrapperValve invoke</span><br><span class="line">심각: Servlet.service() for servlet [appServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template &quot;index&quot;, template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template &quot;index&quot;, template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246)</span><br><span class="line">at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104)</span><br><span class="line">at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)</span><br><span class="line">at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)</span><br><span class="line">at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)</span><br><span class="line">at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1282)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)</span><br><span class="line">at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:417)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Unknown Source)</span><br></pre></td></tr></table></figure><p>내 경우는 아래처럼 컨트롤러에서 index를 리턴하는 메소드가 설정되어 있는데 정작 index.html이 없다.<br>(index.jsp파일은 있다. jsp로 개발중인 프로젝트를 지금 Thymeleaf를 변경중이기 때문이다.)</p><p>위 에러 해결 방법은 아래 index 컨트롤러의 함수를 제거 하거나, 위의 home.html을 복사해서 index.html을 만들어 주면 해결이 된다. </p><p><strong>즉 위 에러는 thymeleaf가 선언된 컨트롤러에서 리졸버할 뷰가 존재하지 않을때 발생하는듯 하다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/"</span>, <span class="string">"/index"</span>&#125;, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Locale locale, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);</span><br><span class="line"></span><br><span class="line">String formattedDate = dateFormat.format(date);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"serverTime"</span>, formattedDate );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Thymeleaf의-thymeleaf-layout-dialect-이용하여-레이아웃을-구성해보자"><a href="#Thymeleaf의-thymeleaf-layout-dialect-이용하여-레이아웃을-구성해보자" class="headerlink" title="Thymeleaf의 thymeleaf-layout-dialect 이용하여 레이아웃을 구성해보자."></a>Thymeleaf의 thymeleaf-layout-dialect 이용하여 레이아웃을 구성해보자.</h1><p>Thymeleaf에서 fragment라는 것을 이용하여 기본적으로 레이아웃을 구성할 수가 있다.<br>th:include를 사용하는 방법이 기본적인 방법인데, 여기서는 thymeleaf-layout-dialect라는 추가 레이아웃 라이브러리를 사용하여 Thymeleaf 레이아웃을 구성해 보겠다.</p><p><strong>1.pom.xml 파일에 thymeleaf-layout-dialect 추가하기</strong></p><p>위에 미리 설정했지만, 다시 확인차 정리한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180801-spring-Thymeleaf_2.png" alt="pom.xml"></p><p><strong>2.servlet-context.xml 파일 수정하기</strong></p><p>additionalDialects 빈 프로퍼티를 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf laytout을 쓰기위해 3rd Party 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"additionalDialects"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"nz.net.ultraq.thymeleaf.LayoutDialect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180801-spring-Thymeleaf_3.png" alt="servlet-context.xml"></p><p><strong>3.레이아웃의 틀이 될 html 생성하자</strong></p><p>이제 템플릿을 구성할 html파일들을 생성해야 한다.<br>일단 폴더트리구조는 다음과 같다.<br>노란색만 보면된다.</p><p><img src="/images/20180801-spring-Thymeleaf_4.png" alt="폴더 트리"></p><p>WEB-INF/views에 layout폴더를 생성하고 default.html파일을 생성하자.<br>default.html파일을 레이아웃의 틀로 지정할 것이다.<br>default.hmlt파일의 내용은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lagn</span>=<span class="string">"ko"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"fragments/config :: configFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer :: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>레이아웃의 구성은 고정된 틀인 config.html, header.html, footer.html 이다.<br>fragments/config의 의미는 WEB-INF/views/fragments/config.html을 사용한다는 의미이고, configFragment의 의미는<br>WEB-INF/views/fragments/config.html 파일의 아래 태그를 잘라서 가져와 사용한다는 의미이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head th:fragment&#x3D;&quot;configFragment&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>content 부분이 실제 컨텐츠가 들어갈 부분이다.<br>대충 실습을 하면 어떤식으로 돌아가는지 감이 올 것이다.</p><p><strong>4.config.html, header.html, footer.html을 생성하자.</strong></p><p>WEB-INF/views에 fragments 폴더를 생성하고 config.html, header.html, footer.html 파일들을 생성하자.</p><p>config.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"configFragment"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 영역이 들어감 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-2.2.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 영역이 들어감 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>header.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:fragment</span>=<span class="string">"headerFragment"</span>&gt;</span> 헤더 영역입니다. </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index&#125;"</span>&gt;</span>index 페이지 이동<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>footer.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"footerFragment"</span>&gt;</span> Footer영역입니다. <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.content가 될 home.html을 생성하자.</strong></p><p>위 예제에서 사용한 home.html을 수정할 생각이다.<br>경로는 WEB-INF/views 이다.<br>home.html 파일은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">layout:decorator</span>=<span class="string">"layout/default"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">Hello World..!! dd <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:text</span>=<span class="string">"$&#123;serverTime&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>여기서 thymeleaf-layout-dialect을 사용한 레이아웃의 독특한 부분이 있다.<br><strong>layout:decorator=”layout/default”</strong> 이 것의 의미는 home.html이 layout/default.html 이라는 레이아웃 템플릿을 사용하겠다는 의미이다.<br>즉 thymeleaf-layout-dialect 레이아웃 템플릿은 스프링 컨트롤러가 응답하는 컨텐츠.html파일에 의해서 레이아웃 템플릿이 결정된다. </p><p>이부분은 어쩌면 편해보이기도 하지만, 만약 공통의 템플릿.html파일이 변경되었을때 이 템플릿을 사용하는 수많은 컨텐치.html파일들을 수정해야 하는 수고가 발생할것 같기도하다.(요즘 툴이 좋아서 일괄 편집이 되긴 하지만…)</p><p>마지막 컨트롤러는 딱시 위의 컨트롤러와 다르지 않으므로 생략 하겠다.</p><p><strong>6.thymeleaf-layout-dialect 레이아웃 동작 확인</strong></p><p><img src="/images/20180801-spring-Thymeleaf_5.png" alt="thymeleaf 레이아웃 동작 확인"></p><hr><h1 id="마무리와-문제점"><a href="#마무리와-문제점" class="headerlink" title="마무리와 문제점"></a>마무리와 문제점</h1><p>이런 <strong>머더퍼커!</strong><br><strong>Thymeleaf는 xhtml 기반으로 작성되어야 하나보다. 즉 html 의 모든 태그는 닫혀야 한다.</strong></p><p>즉 아래의 br태그를</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래 처럼 꼭 닫아 주어야 한다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>닫아주지 않는다면, 심지어 오류를 뱉어내며 was가 기동조차 하지 않는다.!</p><p><img src="/images/20180801-spring-Thymeleaf_6.png" alt="br태그 때문에 발생하는 에러"></p><p>html5기반으로 제작된 테마를 빌려쓸려고 하는데 이것은 큰 문제가 아닐 수 없다.</p><p>내 생각에는 Thymeleaf를 접고 다른 템플릿 엔진을 찾아보는것이 좋을거 같다.</p><hr><h1 id="참고한-자료들"><a href="#참고한-자료들" class="headerlink" title="참고한 자료들"></a>참고한 자료들</h1><p><a href="http://wgenius.tistory.com/11" target="_blank" rel="external nofollow noopener noreferrer">http://wgenius.tistory.com/11</a><br><a href="https://blog.outsider.ne.kr/1004" target="_blank" rel="external nofollow noopener noreferrer">https://blog.outsider.ne.kr/1004</a><br><a href="https://elfinlas.github.io/2018/02/16/thymeleaf-layout-dialect_exam/" target="_blank" rel="external nofollow noopener noreferrer">https://elfinlas.github.io/2018/02/16/thymeleaf-layout-dialect_exam/</a><br><a href="https://elfinlas.github.io/2018/02/17/thymeleaf-layout-dialect/" target="_blank" rel="external nofollow noopener noreferrer">https://elfinlas.github.io/2018/02/17/thymeleaf-layout-dialect/</a></p><p><strong>아래는 Thymeleaf에 대한 사용법이 잘 정리되어 있다.</strong><br><a href="http://cyberx.tistory.com/132" target="_blank" rel="external nofollow noopener noreferrer">http://cyberx.tistory.com/132</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 템플릿 </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> 레이아웃 </tag>
            
            <tag> thymeleaf-layout-dialect </tag>
            
            <tag> spring4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring4에 tiles3 레이아웃 적용하기.</title>
      <link href="/2018/07/31/spring-20180731-spring4-mvc-tiles3/"/>
      <url>/2018/07/31/spring-20180731-spring4-mvc-tiles3/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>이 글은 Spring 프레임워크로 개인프로젝트를 만들기위해 tiles3를 적용하는 과정을 정리한 글이다.</p><table><thead><tr><th>개발환경</th></tr></thead><tbody><tr><td>windows10</td></tr><tr><td>spring4</td></tr><tr><td>java1.8</td></tr><tr><td>tomcat9</td></tr><tr><td>tiles3</td></tr><tr><td>jsp + bootstrap</td></tr></tbody></table><p>사실 tiles3 글을 쓰고 있지만, 난 tiles3를 포기하고 Handlebars 나 Thymeleaf를 좀 파보고 적당한 것을 골라 이번 스프링 프로젝트의 레이아웃으로 적용할 예정이다.</p><p>tiles3를 적용하고 내가 경험한 문제점은 특정 tile의 갱신, 즉 메뉴를 클릭했을때 컨텐츠 부분만 갱신하게 만들기 위해서 불필요한 자바스크립트 로직이 들어가게 된다.</p><p>더 큰 문제는 자바스크립트 함수를 이용하여 콘텐츠 영역만 갱신하게 되었을때, 내가 적용한 bootstrap 테마가 정상 동작하지 않는다.</p><p>아마 렌더링 될때 뷰포트 등에서 문제가 발생하는 듯하다.(내가 공부가 부족해서 스스로 해결하기 포기했다.)</p><p>다만 나중에 tiles를 쓸일이 생길수도 있기 때문에 이렇게 기록한다.<br>(bootstrap을 쓰지 않던가, 컨텐츠 영역만 갱신되게 할 필요가 없다면 충분히 쓸만하다고 생각하다.)</p><p><strong>tiles 레이아웃 적용전 유의점</strong><br>tiles는 레이아웃을 나눌수 있게 해주지만, 컨트롤러가 타일즈 뷰를 렌더링할 때 실질적으로 바뀌는 부분과 바뀌지 않는 부분 모두 새로 랜드링 한다.<br>따라서 레이아웃의 특정 부분만, 예를 들어 body나 content 부분만 갱신하기를 원한다면 tiles레이아웃을 피하길 바란다.</p><hr><h1 id="Spring-mvc-프로젝트에-tiles3-적용하기"><a href="#Spring-mvc-프로젝트에-tiles3-적용하기" class="headerlink" title="Spring mvc 프로젝트에 tiles3 적용하기"></a>Spring mvc 프로젝트에 tiles3 적용하기</h1><h2 id="1-pom-xml에-tiles3-라이브러리-추가하기"><a href="#1-pom-xml에-tiles3-라이브러리-추가하기" class="headerlink" title="1.pom.xml에 tiles3 라이브러리 추가하기."></a>1.pom.xml에 tiles3 라이브러리 추가하기.</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Tiles Core --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://mvnrepository.com/artifact/org.apache.tiles/tiles-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tiles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tiles-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Tiles Servlet --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://mvnrepository.com/artifact/org.apache.tiles/tiles-servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tiles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tiles-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Tiles JSP --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://mvnrepository.com/artifact/org.apache.tiles/tiles-jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tiles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tiles-jsp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-servlet-context-xml-파일-수정하기"><a href="#2-servlet-context-xml-파일-수정하기" class="headerlink" title="2.servlet-context.xml 파일 수정하기."></a>2.servlet-context.xml 파일 수정하기.</h2><p>일단 기존에 사용하던 InternalResourceViewResolver의 order를 2로 변경한다.<br>그리고 tielsViewResolver, tilesConfigurer를 추가한다.<br>tiles.xml 파일은 tiles 템플릿을 설정하는 설정 파일이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources </span></span><br><span class="line"><span class="comment">in the /WEB-INF/views directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span>  <span class="comment">&lt;!-- tiles3 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Tiles 뷰 리졸버 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"tielsViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.UrlBasedViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.tiles3.TilesView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Tiles 설정 파일 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"tilesConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.tiles3.TilesConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"definitions"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:value</span>&gt;</span>/WEB-INF/tiles/tiles.xml<span class="tag">&lt;/<span class="name">beans:value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-WEB-INF-tiles-tiles-xml-을-생성하자"><a href="#3-WEB-INF-tiles-tiles-xml-을-생성하자" class="headerlink" title="3. /WEB-INF/tiles/tiles.xml 을 생성하자."></a>3. /WEB-INF/tiles/tiles.xml 을 생성하자.</h2><p><img src="/images/20180731-spring4-mvc-tiles3_3.png" alt="그냥 참고용 내 파일트리"></p><p>위에서 말했듯이 tiles의 레이아웃을 정의하는 설정 파일이다.<br>내 경우에는 아래 처럼 설정했다.<br>biz-template 와 sample-template 라는 두 종류의 tiles템플릿을 동시에 사용하게 설정했다.<br>사실 템플리 jsp는 biz_template.jsp로 동일하지만 메뉴정보를 달리 하기 위해서 템플릿을 두개로 나눠놨다.</p><p>biz_template.jsp는 레이아웃 구조를 잡고 있는 중심 jsp 파일이다.<br>head, left-side, footer는 기본적으로 변하지 않는 고정된 부분이고, content 부분이 변경되는 부분이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">tiles-definitions</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"</span> <span class="meta-string">"http://tiles.apache.org/dtds/tiles-config_3_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tiles-definitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"biz-template"</span> <span class="attr">template</span>=<span class="string">"/WEB-INF/tiles/layouts/biz_template.jsp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Mokaboard 메인페이지"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"header"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/biz/header.jsp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"left-side"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/biz/left_side.jsp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/biz/footer.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"biz/*"</span> <span class="attr">extends</span>=<span class="string">"biz-template"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/&#123;1&#125;.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"biz/*/*"</span> <span class="attr">extends</span>=<span class="string">"biz-template"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/&#123;1&#125;/&#123;2&#125;.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"sample-template"</span> <span class="attr">template</span>=<span class="string">"/WEB-INF/tiles/layouts/biz_template.jsp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"sample 메인페이지"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"header"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/biz/header.jsp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"left-side"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/sample/left_side.jsp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/tiles/components/biz/footer.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"sample-t/*"</span> <span class="attr">extends</span>=<span class="string">"sample-template"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/sample/&#123;1&#125;.jsp"</span> <span class="attr">cascade</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"sample-t/*/*"</span> <span class="attr">extends</span>=<span class="string">"sample-template"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/sample/&#123;1&#125;/&#123;2&#125;.jsp"</span> <span class="attr">cascade</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tiles-definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-tiles에서-사용하는-template-jsp-를-만들자"><a href="#4-tiles에서-사용하는-template-jsp-를-만들자" class="headerlink" title="4.tiles에서 사용하는 template.jsp 를 만들자."></a>4.tiles에서 사용하는 template.jsp 를 만들자.</h2><p>아래 내 biz_template.jsp 템플릿 파일을 보면 bootstrap 테마를 적용해서 상당히 길다.<br>html 대부분은 무시하길 바란다.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://tiles.apache.org/tags-tiles"</span> prefix=<span class="string">"tiles"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">This is a starter template page. Use <span class="keyword">this</span> page to start your <span class="keyword">new</span> project from</span><br><span class="line">scratch. This page gets rid of all links and provides the needed markup only.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;html lang=<span class="string">"kr"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;&lt;tiles:getAsString name="title" /&gt;&lt;/title&gt;</span><br><span class="line">  &lt;!-- Tell the browser to be responsive to screen width --&gt;</span><br><span class="line">  &lt;meta content=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span> name=<span class="string">"viewport"</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;c:url value='/resources/bower_components/bootstrap/dist/css/bootstrap.min.css' /&gt;"</span>&gt;</span><br><span class="line">  &lt;!-- Font Awesome --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;c:url value='/resources/bower_components/font-awesome/css/font-awesome.min.css' /&gt;"</span>&gt;</span><br><span class="line">  &lt;!-- Ionicons --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;c:url value='/resources/bower_components/Ionicons/css/ionicons.min.css' /&gt;"</span>&gt;</span><br><span class="line">  &lt;!-- Theme style --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;c:url value='/resources/dist/css/AdminLTE.min.css' /&gt;"</span>&gt;</span><br><span class="line">  &lt;!-- AdminLTE Skins. We have chosen the skin-blue <span class="keyword">for</span> <span class="keyword">this</span> starter</span><br><span class="line">        page. However, you can choose any other skin. Make sure you</span><br><span class="line">        apply the skin <span class="class"><span class="keyword">class</span> <span class="title">to</span> <span class="title">the</span> <span class="title">body</span> <span class="title">tag</span> <span class="title">so</span> <span class="title">the</span> <span class="title">changes</span> <span class="title">take</span> <span class="title">effect</span>. --&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">link</span> <span class="title">rel</span></span>=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;c:url value='/resources/dist/css/skins/skin-blue.min.css' /&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Google Font --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span></span><br><span class="line">        href=<span class="string">"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">BODY TAG OPTIONS:</span><br><span class="line">=================</span><br><span class="line">Apply one or more of the following classes to get the</span><br><span class="line">desired effect</span><br><span class="line">|---------------------------------------------------------|</span><br><span class="line">| SKINS      | skin-blue                               |</span><br><span class="line">|               | skin-black                              |</span><br><span class="line">|               | skin-purple                             |</span><br><span class="line">|               | skin-yellow                             |</span><br><span class="line">|               | skin-red                                 |</span><br><span class="line">|               | skin-green                              |</span><br><span class="line">|---------------------------------------------------------|</span><br><span class="line">|LAYOUT OPTIONS | fixed                                   |</span><br><span class="line">|               | layout-boxed                            |</span><br><span class="line">|               | layout-top-nav                          |</span><br><span class="line">|               | sidebar-collapse                        |</span><br><span class="line">|               | sidebar-mini                            |</span><br><span class="line">|---------------------------------------------------------|</span><br><span class="line">--&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"hold-transition skin-blue sidebar-mini"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;tiles:insertAttribute name=<span class="string">"header"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;tiles:insertAttribute name=<span class="string">"left-side"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- content 위치 --&gt;</span><br><span class="line">&lt;div id="bodyTile"&gt;&lt;tiles:insertAttribute name="content" /&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mainfooter 위치 --&gt;</span><br><span class="line">&lt;tiles:insertAttribute name=<span class="string">"footer"</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Control Sidebar 모바일 모드일때 사이즈 변경을 위한 바 --&gt;</span><br><span class="line">  &lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-sidebar control-sidebar-dark"</span>&gt;</span><br><span class="line">    &lt;!-- Create the tabs --&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav nav-tabs nav-justified control-sidebar-tabs"</span>&gt;</span><br><span class="line">      &lt;li class="active"&gt;&lt;a href="#control-sidebar-home-tab" data-toggle="tab"&gt;&lt;i class="fa fa-home"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href="#control-sidebar-settings-tab" data-toggle="tab"&gt;&lt;i class="fa fa-gears"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- Tab panes --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab-content"</span>&gt;</span><br><span class="line">      &lt;!-- Home tab content --&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tab-pane active"</span> id=<span class="string">"control-sidebar-home-tab"</span>&gt;</span><br><span class="line">        &lt;h3 class="control-sidebar-heading"&gt;Recent Activity&lt;/h3&gt;</span><br><span class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-sidebar-menu"</span>&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">"javascript:;"</span>&gt;</span><br><span class="line">              &lt;i class="menu-icon fa fa-birthday-cake bg-red"&gt;&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu-info"</span>&gt;</span><br><span class="line">                &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-sidebar-subheading"</span>&gt;Langdon<span class="string">'s Birthday&lt;/h4&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;p&gt;Will be 23 on April 24th&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- /.control-sidebar-menu --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;h3 class="control-sidebar-heading"&gt;Tasks Progress&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="control-sidebar-menu"&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="string">              &lt;h4 class="control-sidebar-subheading"&gt;</span></span><br><span class="line"><span class="string">                Custom Template Design</span></span><br><span class="line"><span class="string">                &lt;span class="pull-right-container"&gt;</span></span><br><span class="line"><span class="string">                    &lt;span class="label label-danger pull-right"&gt;70%&lt;/span&gt;</span></span><br><span class="line"><span class="string">                  &lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;/h4&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              &lt;div class="progress progress-xxs"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="progress-bar progress-bar-danger" style="width: 70%"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- /.control-sidebar-menu --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- /.tab-pane --&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- Stats tab content --&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="tab-pane" id="control-sidebar-stats-tab"&gt;Stats Tab Content&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- /.tab-pane --&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- Settings tab content --&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="tab-pane" id="control-sidebar-settings-tab"&gt;</span></span><br><span class="line"><span class="string">        &lt;form method="post"&gt;</span></span><br><span class="line"><span class="string">          &lt;h3 class="control-sidebar-heading"&gt;General Settings&lt;/h3&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="string">            &lt;label class="control-sidebar-subheading"&gt;</span></span><br><span class="line"><span class="string">              Report panel usage</span></span><br><span class="line"><span class="string">              &lt;input type="checkbox" class="pull-right" checked&gt;</span></span><br><span class="line"><span class="string">            &lt;/label&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;p&gt;</span></span><br><span class="line"><span class="string">              Some information about this general settings option</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- /.form-group --&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- /.tab-pane --&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/aside&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- /.control-sidebar --&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- Add the sidebar'</span>s background. This div must be placed</span><br><span class="line">  immediately after the control sidebar --&gt;</span><br><span class="line">  &lt;div class="control-sidebar-bg"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- ./wrapper --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- REQUIRED JS SCRIPTS --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jQuery <span class="number">3</span> --&gt;</span><br><span class="line">&lt;script src="&lt;c:url value='/resources/bower_components/jquery/dist/jquery.min.js' /&gt;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- Bootstrap <span class="number">3.3</span><span class="number">.7</span> --&gt;</span><br><span class="line">&lt;script src="&lt;c:url value='/resources/bower_components/bootstrap/dist/js/bootstrap.min.js' /&gt;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- AdminLTE App --&gt;</span><br><span class="line">&lt;script src="&lt;c:url value='/resources/dist/js/adminlte.min.js' /&gt;"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">  &lt;!-- WARNING: Respond.js doesn<span class="string">'t work if you view the page via file:// --&gt;</span></span><br><span class="line"><span class="string">  &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Optionally, you can add Slimscroll and FastClick plugins.</span></span><br><span class="line"><span class="string">     Both of these plugins are recommended to enhance the</span></span><br><span class="line"><span class="string">     user experience. --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>그래서 tiles 관련된것만 정리해 보자.</p><p>template.jsp 파일 최 상단에는 아래 내용이 추가 되어야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri&#x3D;&quot;http:&#x2F;&#x2F;tiles.apache.org&#x2F;tags-tiles&quot; prefix&#x3D;&quot;tiles&quot; %&gt;</span><br></pre></td></tr></table></figure><p>아래는 내용은 tiles를 통해 template.jsp의 title내용을 변경하는 부분이다.<br>tiles는 동적으로 페이지의 구조를 바꾼다.<br>따라서 때에 따라 페이지의 title내용을 변경해줄 필요가 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;&lt;tiles:getAsString name&#x3D;&quot;title&quot; &#x2F;&gt;&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure><p>그리고 실제로 tiles 조각들이 채워질 공간은 아래이다.<br>header, left-side, content, footer 총 4부분이다.<br>left-side에 메뉴가 존재하며 메뉴를 클릭했을때 content 부분이 교체되는 형태이다.<br>주의할 점은 content tiles부분이 bodyTile이라는 div 태그로 감싸여 있는데, 이것은 left-side에서 메뉴를 클릭했을때<br>header, left-side, content, footer 모든 타일들이 refresh가 되는 것이 아니라 content 부분만 갱신하기 위한 태그이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;tiles:insertAttribute name&#x3D;&quot;header&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tiles:insertAttribute name&#x3D;&quot;left-side&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- content 위치 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;bodyTile&quot;&gt;&lt;tiles:insertAttribute name&#x3D;&quot;content&quot; &#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mainfooter 위치 --&gt;</span><br><span class="line">&lt;tiles:insertAttribute name&#x3D;&quot;footer&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="4-tiles-템플릿을-채워줄-공통-타일-header-jsp-footer-jsp-left-side-jsp를-생성하자"><a href="#4-tiles-템플릿을-채워줄-공통-타일-header-jsp-footer-jsp-left-side-jsp를-생성하자" class="headerlink" title="4.tiles 템플릿을 채워줄 공통 타일 header.jsp, footer.jsp, left_side.jsp를 생성하자."></a>4.tiles 템플릿을 채워줄 공통 타일 header.jsp, footer.jsp, left_side.jsp를 생성하자.</h2><p>header.jsp, footer.jsp는 생략 하겠다.</p><p>실질적인 메뉴가 되는 left-side.jsp 는 아래와 같다.</p><p>역시 bootstrap테마가 있어서 소스가 길다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">  &lt;!-- Left side column. contains the logo and sidebar --&gt;</span><br><span class="line">  &lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">"main-sidebar"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- sidebar: style can be found in sidebar.less --&gt;</span><br><span class="line">    &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"sidebar"</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- <span class="function">Sidebar user <span class="title">panel</span> <span class="params">(optional)</span> --&gt;</span></span><br><span class="line"><span class="function">      &lt;div class</span>=<span class="string">"user-panel"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-left image"</span>&gt;</span><br><span class="line">          &lt;img src=<span class="string">"&lt;c:url value='/resources/dist/img/user2-160x160.jpg' /&gt;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-circle"</span> alt=<span class="string">"User Image"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-left info"</span>&gt;</span><br><span class="line">          &lt;p&gt;Alexander Pierce&lt;/p&gt;</span><br><span class="line">          &lt;!-- Status --&gt;</span><br><span class="line">          &lt;a href="#"&gt;&lt;i class="fa fa-circle text-success"&gt;&lt;/i&gt; Online&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- <span class="function">search <span class="title">form</span> <span class="params">(Optional)</span> --&gt;</span></span><br><span class="line"><span class="function">      &lt;form action</span>=<span class="string">"#"</span> method=<span class="string">"get"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sidebar-form"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group"</span>&gt;</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> name=<span class="string">"q"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> placeholder=<span class="string">"Search..."</span>&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-btn"</span>&gt;</span><br><span class="line">              &lt;button type="submit" name="search" id="search-btn" class="btn btn-flat"&gt;&lt;i class="fa fa-search"&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">      &lt;!-- /.search form --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Sidebar Menu --&gt;</span><br><span class="line">      &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"sidebar-menu"</span> data-widget=<span class="string">"tree"</span>&gt;</span><br><span class="line">        &lt;li class="header"&gt;HEADER&lt;/li&gt;</span><br><span class="line">        &lt;!-- Optionally, you can add icons to the links --&gt;</span><br><span class="line">&lt;!--         &lt;li class="active"&gt;&lt;a href="#"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt; &lt;span&gt;Link&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt; &lt;span&gt;Another Link&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; --&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"treeview"</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">"#"</span>&gt;</span><br><span class="line">            &lt;i class="fa fa-share"&gt;&lt;/i&gt; &lt;span&gt;샘플페이지&lt;/span&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-right-container"</span>&gt;</span><br><span class="line">              &lt;i class="fa fa-angle-left pull-right"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"treeview-menu"</span>&gt;</span><br><span class="line">            &lt;!-- &lt;li&gt;&lt;a href="#"&gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; Level One&lt;/a&gt;&lt;/li&gt; --&gt;</span><br><span class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"treeview"</span>&gt;</span><br><span class="line">              &lt;a href="#"&gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 게시판</span><br><span class="line">                &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-right-container"</span>&gt;</span><br><span class="line">                  &lt;i class="fa fa-angle-left pull-right"&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">              &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"treeview-menu"</span>&gt;</span><br><span class="line">                &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;  </span><br><span class="line">                   &lt;a href="#" onClick="switchContent('/sample/board/read2');"&gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 조회2&lt;/a&gt;</span><br><span class="line">                  &lt;a href="/sample/board/register" &gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 입력&lt;/a&gt;</span><br><span class="line">                  &lt;a href="/sample/board/mod" &gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 수정&lt;/a&gt;</span><br><span class="line">                  &lt;a href="/sample/board/read" &gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 조회&lt;/a&gt;</span><br><span class="line">                  &lt;a href="/sample/board/list" &gt;&lt;i class="fa fa-circle-o"&gt;&lt;/i&gt; 리스트&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;!-- /.sidebar-menu --&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;!-- /.sidebar --&gt;</span><br><span class="line">  &lt;/aside&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/* 메뉴 선택시 컨텐츠만 갱신되게 하는 함수 */</span></span><br><span class="line"><span class="function">function <span class="title">switchContent</span><span class="params">(url)</span></span>&#123;</span><br><span class="line">    $(<span class="string">'#bodyTile'</span>).children().remove();  </span><br><span class="line">    $(<span class="string">'#bodyTile'</span>).load(url);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>위 소스를 보면 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onClick</span>=<span class="string">"switchContent('/sample/board/read2');"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 조회2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sample/board/register"</span> &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 입력<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sample/board/mod"</span> &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 수정<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sample/board/read"</span> &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 조회<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sample/board/list"</span> &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 리스트<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 부분이 메뉴 링크 부분이다. switchContent 함수는 스프링 컨트롤러에게 content 페이지를 요청할때, 모든 타일 header, footer, left-side, content들을 refresh하는 것이 아니라 content 타일만 갱신하기 위한 함수이다.<br>switchContent 자바스크립트 함수를 보면 bodyTile div 태그의 내부를 지우고 대신 content 페이지를 요청하여 렌더링 결과인 html을 대신 채워준다.<br>위 처럼 하면 content 타일만 refresh가 된다.</p><h2 id="5-Controller"><a href="#5-Controller" class="headerlink" title="5.Controller"></a>5.Controller</h2><p>tiles에서 가장 중요하다고 생각하는 부분은 tiles.xml과 controller이다.<br><strong>그 이유는 controller가 뷰 리졸버로 전달하는 명칭에 의해 해당 뷰를 타일즈를 통해 렌더링 할 것인가의 여부, 만약 타일즈를 통해 렌더링 한다면 어떤 타일즈 템플릿을 적용하는 지가 결정 되기 때문이다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.sample.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sample/board/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleBoardController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleBoardController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/list"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">logger.info(<span class="string">"샘플 게시판 list..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"sample-t/board/list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">logger.info(<span class="string">"샘플 게시판 register..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"sample-t/board/register"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/read"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">logger.info(<span class="string">"샘플 게시판 read..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"sample-t/board/read"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/mod"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">mod</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">logger.info(<span class="string">"샘플 게시판 mod..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"sample-t/board/mod"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//이녀석은 바디이기때문에 템플릿을 거치지 않게 하자.</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/read2"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read2</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">logger.info(<span class="string">"샘플 게시판 read2..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"sample/board/read"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 컨트롤러의 대부분 메소드는 보통 sample-t 로 시작하는 뷰를 뷰 리졸버에게 전달하고 있다.<br>이 경우 tiles.xml에 아래 내용이 동작하게 된다. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"sample-t/*"</span> <span class="attr">extends</span>=<span class="string">"sample-template"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/sample/&#123;1&#125;.jsp"</span> <span class="attr">cascade</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"sample-t/*/*"</span> <span class="attr">extends</span>=<span class="string">"sample-template"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/sample/&#123;1&#125;/&#123;2&#125;.jsp"</span> <span class="attr">cascade</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 컨트롤러의 마지막 read2를 보면 이 녀석만 독특하게 sample로 시작하는 뷰를 찾는다.<br>내 tiles.xml 파일을 보면 sample로 시작하는 타일즈 템플릿은 없다.<br>즉 이 녀석은 타일즈 리졸버를 거치지 않고 스프링의 내장 리졸버에 의해 렌더링 된 뷰가 화면단에 전달 된다.</p><p>위 글을 자세히 읽었다면 이 부분이 무엇을 의미 하는지 알 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.left-side.jsp에서 메뉴를 클릭</span><br><span class="line">&lt;a href&#x3D;&quot;#&quot; onClick&#x3D;&quot;switchContent(&#39;&#x2F;sample&#x2F;board&#x2F;read2&#39;);&quot;&gt;&lt;i class&#x3D;&quot;fa fa-circle-o&quot;&gt;&lt;&#x2F;i&gt; 조회2&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.아래 자바스크립트가 대신 컨트롤러에 &#x2F;sample&#x2F;board&#x2F;read2을 요청하여 그 결과물(타일즈가 적용되지 않은 내장 뷰 리졸버 html결과물)을 받아</span><br><span class="line">function switchContent(url)&#123;</span><br><span class="line">    $(&#39;#bodyTile&#39;).children().remove();  </span><br><span class="line">    $(&#39;#bodyTile&#39;).load(url);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.template-biz.jsp 파일의 bodyTile태그 내용물을 대체한다.</span><br><span class="line">&lt;!-- content 위치 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;bodyTile&quot;&gt;&lt;tiles:insertAttribute name&#x3D;&quot;content&quot; &#x2F;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/20180731-spring4-mvc-tiles3_1.png" alt="일바적인 tiles 동작, 재대로 동작하지만 왼쪽 아코디언 메뉴가 갱신된다. 열려있던 메뉴가 접혀버린 것이다."></p><p><img src="/images/20180731-spring4-mvc-tiles3_2.png" alt="/read2 tiles 동작, content 부분만 갱신되지만 bootstrap이 동작하지 않는다. 열려있던 메뉴가 접혀지지 않았다. 노란색 부분을 다 채워붜야 하는데 채우다가 만다."></p><p>개인적인 생각으로, 만약 레이아웃의 여러 부분중 특정 부분만 갱신되게 해야 한다면 tiles 레이아웃은 비추한다.</p><p>필요에 따라 컨텐츠만 갱신하는 로직을 제거해서 사용하면 될듯 하다.</p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> bootstrap </tag>
            
            <tag> layout </tag>
            
            <tag> tiles3 </tag>
            
            <tag> refresh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - html태그의 lang 속성</title>
      <link href="/2018/07/28/html-20180728-html-tag-attribute-lang/"/>
      <url>/2018/07/28/html-20180728-html-tag-attribute-lang/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180728-html-tag-attribute-lang_1.png" alt="html lang=&#39;ko&#39;"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html 태그에서는 lang이라는 속성을 사용해서 문서에서 사용할 언어를 지정할수 있다.<br>예를 들어 한국어라면 korea의 약자인 ko를 사용한다.</p><p>간단히 &#60;html&#92;&#62; 이라고만 해도 문제가 없는데 굳이 사용 언어를 명시하는 이유는 무엇일까?<br>우선 검색 사이트에서 특정 언어로 제한해 검색할 때 그 대상이 될 수 있기 때문이다.<br>예를 들어 검색 옵션중에서 ‘한국어로 된 문서’로 범위를 제한할 경우, &#60;html lang=”ko”&#92;&#62;라고 된 문서를 우선 검색한다.</p><p>또한 화면 낭독기에서 웹 문서를 소리내어 읽어줄 때 언어가 명시되면 그 언어에 맞추어 발음이나 억양, 목소리 등을 다르게 해서 들려줄수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring MyBatis에 log4jdbc-log4j2 설정하기</title>
      <link href="/2018/07/27/spring-20180727-Spring-add-log4jdbc-log4j2-in-mysql-mybatis/"/>
      <url>/2018/07/27/spring-20180727-Spring-add-log4jdbc-log4j2-in-mysql-mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="추가사항-20180819"><a href="#추가사항-20180819" class="headerlink" title="추가사항(20180819)"></a>추가사항(20180819)</h1><p>이 설정은 스프링 mybatis 환경에서 DAO Junit 테스트에 대해서만 로그가 발생한다.<br>기존의 log4j가 동작하지 않으며 java 소스의 logger 부분이 동작하지 않는다.<br>현재 log4j2의 환경설정에 문제가 있어 보인다. 찾는중 ….</p><h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>MyBatis를 사용해서 개발하다가 보면 가끔 잘못된 SQL이나 잘못된 속성의 이름으로 인해서 예외가 발생하는 경우가 종종 있다.<br>이런 경우를 대비해서 MyBatis의 로그를 보다 자세히 조사할 수 있도록 로그를 설정해 주는 것이 좋다.</p><p>Log4jdbc-log4j2라는 라이브러리를 이용하면, 기존의 jdbc datasource보다 더 상세한 로그를 콘솔에서 확인할수 있다.<br>다만 log4jdbc를 이용하는 경우 속도가 기존보다 저하될수 있고, 데이터베이스에 따라서 지원되지 않는 경우도 있으므로 설정 후에 정상적 동작을 반드시 확인해야 한다.</p><hr><h1 id="Spring-MVC-프로젝트-MySql8-Mybatis-환경에-Log4jdbc-log4j2-적용실습"><a href="#Spring-MVC-프로젝트-MySql8-Mybatis-환경에-Log4jdbc-log4j2-적용실습" class="headerlink" title="Spring MVC 프로젝트 + MySql8 + Mybatis 환경에 Log4jdbc-log4j2 적용실습"></a>Spring MVC 프로젝트 + MySql8 + Mybatis 환경에 Log4jdbc-log4j2 적용실습</h1><p><strong>1.pom.xml에 log4jdbc-log4j2 라이브러리를 추가하자.</strong></p><p>아래 내용을 pom.xml에 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis log4jdbc-log4j2 라이브러리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bgee.log4jdbc-log4j2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4jdbc-log4j2-jdbc4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.root-context.xml파일에 dataSource를 수정하자.</strong></p><p>root-context.xml파일의 dataSource 빈을 아래처럼 수정하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 기존 데이터 소스 설정</span></span><br><span class="line"><span class="comment">&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="driverClassName" value="com.mysql.cj.jdbc.Driver"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/mokaboard_dev?useSSL=false"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="username" value="mokaboard"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="password" value="password"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 변경된 datasouce --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:log4jdbc:mysql://127.0.0.1:3306/mokaboard_dev?useSSL=false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"mokaboard"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.log4jdbc.log4j2.properties파일과 logback.xml 파일을 추가하자.</strong></p><p>src/main/resource 경로에 log4jdbc.log4j2.properties 파일을 생성하고 아래 내용을 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4jdbc.spylogdelegator.name&#x3D;net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</span><br></pre></td></tr></table></figure><p>src/main/resource 경로에 logback.xml 파일을 생성하고 아래 내용을 입력하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.splonly"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqltiming"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.audit"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultset"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultsettable"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.connection"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180727-Spring-add-log4jdbc-log4j2-in-mysql-mybatis_1.png" alt="log4jdbc.log4j2.properties파일과 logback.xml 위치"></p><p><strong>4.테스트 해보자</strong></p><p>임의의 테이블을 생성하고, VO, DAO, DAOImpl, MybatisMapper.xml을 추가한뒤</p><p>/src/test/java 경로에 단순히 테이블에 Mybatis를 이용해 데이터를 insert하고 그 결과 로그를 확인해 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">INFO : org.springframework.test.context.support.DefaultTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF&#x2F;spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]</span><br><span class="line">INFO : org.springframework.test.context.support.DefaultTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@402f32ff, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@573f2bb1, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@5ae9a829, org.springframework.test.context.support.DirtiesContextTestExecutionListener@6d8a00e3, org.springframework.test.context.transaction.TransactionalTestExecutionListener@548b7f67, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@7ac7a4e4]</span><br><span class="line">INFO : org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from file [C:\Users\amagr\Desktop\projectes\MokaBoard\src\main\webapp\WEB-INF\spring\root-context.xml]</span><br><span class="line">INFO : org.springframework.context.support.GenericApplicationContext - Refreshing org.springframework.context.support.GenericApplicationContext@548e7350: startup date [Fri Jul 27 23:48:12 KST 2018]; root of context hierarchy</span><br><span class="line">INFO : org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor - JSR-330 &#39;javax.inject.Inject&#39; annotation found and supported for autowiring</span><br><span class="line">Loading class &#96;com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is &#96;com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br><span class="line">INFO : org.springframework.jdbc.datasource.DriverManagerDataSource - Loaded JDBC driver: net.sf.log4jdbc.sql.jdbcapi.DriverSpy</span><br><span class="line">Log4j 동작 테스트</span><br><span class="line">INFO : jdbc.connection - 1. Connection opened</span><br><span class="line">INFO : jdbc.audit - 1. Connection.new Connection returned </span><br><span class="line">INFO : jdbc.audit - 1. Connection.getAutoCommit() returned true</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.new PreparedStatement returned </span><br><span class="line">INFO : jdbc.audit - 1. Connection.prepareStatement(select now()) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@415b0b49</span><br><span class="line">INFO : jdbc.sqlonly - select now() </span><br><span class="line"></span><br><span class="line">INFO : jdbc.sqltiming - select now() </span><br><span class="line"> &#123;executed in 22 msec&#125;</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.execute() returned true</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.new ResultSet returned </span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getResultSet() returned net.sf.log4jdbc.sql.jdbcapi.ResultSetSpy@383dc82c</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getMetaData() returned com.mysql.cj.jdbc.result.ResultSetMetaData@5f9edf14 - Field level information: </span><br><span class="line">com.mysql.cj.result.Field@68746f22[catalog&#x3D;null,tableName&#x3D;null,originalTableName&#x3D;null,columnName&#x3D;now(),originalColumnName&#x3D;null,mysqlType&#x3D;12(FIELD_TYPE_DATETIME),sqlType&#x3D;93,flags&#x3D; BINARY, charsetIndex&#x3D;63, charsetName&#x3D;ISO-8859-1]</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getType() returned 1003</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.next() returned true</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.getString(now()) returned 2018-07-27 14:48:14</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.wasNull() returned false</span><br><span class="line">INFO : jdbc.resultsettable - </span><br><span class="line">|--------------------|</span><br><span class="line">|now()               |</span><br><span class="line">|--------------------|</span><br><span class="line">|2018-07-27 14:48:14 |</span><br><span class="line">|--------------------|</span><br><span class="line"></span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.next() returned false</span><br><span class="line">INFO : jdbc.resultset - 1. ResultSet.close() returned void</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getConnection() returned net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@4c2bb6e0</span><br><span class="line">INFO : jdbc.audit - 1. Connection.getMetaData() returned com.mysql.cj.jdbc.DatabaseMetaDataUsingInfoSchema@3e62d773</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getMoreResults() returned false</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.getUpdateCount() returned -1</span><br><span class="line">INFO : jdbc.audit - 1. PreparedStatement.close() returned </span><br><span class="line">INFO : jdbc.connection - 1. Connection closed</span><br><span class="line">INFO : jdbc.audit - 1. Connection.close() returned </span><br><span class="line">DB 시간:2018-07-27 14:48:14</span><br><span class="line">INFO : jdbc.connection - 2. Connection opened</span><br><span class="line">INFO : jdbc.audit - 2. Connection.new Connection returned </span><br><span class="line">INFO : jdbc.audit - 2. Connection.getAutoCommit() returned true</span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.new PreparedStatement returned </span><br><span class="line">INFO : jdbc.audit - 2. Connection.prepareStatement(insert into tbl_member (userid, userpw, username, email) </span><br><span class="line">values(?, ?, ?, ?)) returned net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy@3cce57c7</span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.setString(1, &quot;user10&quot;) returned </span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.setString(2, &quot;user10&quot;) returned </span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.setString(3, &quot;USER10&quot;) returned </span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.setString(4, &quot;user10@aaa.com&quot;) returned </span><br><span class="line">INFO : jdbc.sqlonly - insert into tbl_member (userid, userpw, username, email) values(&#39;user10&#39;, &#39;user10&#39;, &#39;USER10&#39;, </span><br><span class="line">&#39;user10@aaa.com&#39;) </span><br><span class="line"></span><br><span class="line">INFO : jdbc.sqltiming - insert into tbl_member (userid, userpw, username, email) values(&#39;user10&#39;, &#39;user10&#39;, &#39;USER10&#39;, </span><br><span class="line">&#39;user10@aaa.com&#39;) </span><br><span class="line"> &#123;executed in 21 msec&#125;</span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.execute() returned false</span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.getUpdateCount() returned 1</span><br><span class="line">INFO : jdbc.audit - 2. PreparedStatement.close() returned </span><br><span class="line">INFO : jdbc.connection - 2. Connection closed</span><br><span class="line">INFO : jdbc.audit - 2. Connection.close() returned </span><br><span class="line">INFO : org.springframework.context.support.GenericApplicationContext - Closing org.springframework.context.support.GenericApplicationContext@548e7350: startup date [Fri Jul 27 23:48:12 KST 2018]; root of context hierarchy</span><br></pre></td></tr></table></figure><p>기존보다 뭔가 자세하고? 상세히 로그가 찍히는 것을 확인 할수 있다.</p><p>이상, 끝!</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> maven </tag>
            
            <tag> mybatis </tag>
            
            <tag> log4jdbc-log4j2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STS(Spring Tool Suite) - github issues 트래커 연동(mylyn) GitHub Extensions 설치</title>
      <link href="/2018/07/25/STS-20180725-STS-github-issue-plugin/"/>
      <url>/2018/07/25/STS-20180725-STS-github-issue-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>현재 STS(Spring Tool Suite)와 Github를 통해 개인 프로젝트를 개발하고 있다.<br>Github의 Issue 관리 시스템을 STS 연동하여 사용하고 싶은 생각에, 인터넷을 조금 검색하니 연동하는 방법이 있어서 이렇게 정리한다.</p><p>참고로 <strong>이클립스(Eclipce)에서는 GitHub 관련 Mylyn 커넥터가 없어서 안되더라.</strong><br>(뭔가 내가 잘못했거나, 다른 방법이 있을수도…)</p><hr><h1 id="STS에서-GitHub-Extensions-플러그인-설치하기"><a href="#STS에서-GitHub-Extensions-플러그인-설치하기" class="headerlink" title="STS에서 GitHub Extensions 플러그인 설치하기"></a>STS에서 GitHub Extensions 플러그인 설치하기</h1><p>일단 STS에서 GitHub의 Issues를 Task에 연동하려면 GitHub Extension이라는 플러그인을 STS에 설치해야 한다.</p><p>STS툴에서 -&gt; Help -&gt; Eclipse Maketplace… 선택 -&gt; Find에 github 입력후 검색 -&gt; Gitub Extensions를 설치하자.<br><strong>GitHub Extensions 플러그인의 설명을 보면 GitHub Mylyn Connector라고 되어있다.</strong></p><p><img src="/images/20180725-STS-github-issue-plugin_1.png" alt="GitHub Extensions를 설치하자. 나는 이미 설치해서 Installed라고 보아는 것 뿐이다."></p><p>GitHub Extensions 설치 뒤(아마 STS재시작을 해야 할 것이다.) -&gt; STS의 Window 메뉴의 Show view 에서 Task Repositoreis를 열어서 -&gt; github 원격 저장소 정보를 입력하여 Task Repository를 추가한다.(http 방식으로 입력해야 한다.)</p><p><img src="/images/20180725-STS-github-issue-plugin_4.png" alt="Task Repositoreis에서 마우스 우클릭 하면 add Task Repositories를 선택한 뒤 Github issuses를 선택"></p><p><img src="/images/20180725-STS-github-issue-plugin_5.png" alt="github 저장소의 정보를 입력하는 창이 뜬다. 정보를 입력하여 저장하자"></p><p><strong>주의</strong><br>Task Repository를 추가할때 이 정보입력에서 삽질을 좀 했다.<br>github의 원격 리파지토리에서 clone with https 버튼을 누르면, 해당 원격저장소의 web URL 정보가 나오는데 그 형태는 아래와 같다.</p><blockquote><p><a href="https://github.com/유저명/리파지토리명.git" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/유저명/리파지토리명.git</a></p></blockquote><p>일반적인 형상관리를 위해서는 위 URL을 그대로 사용하면 되지만, STS에 add Task repository 화면에서 입력 할때에는 아래와 같이 입력해야 한다.</p><blockquote><p><a href="http://github.com/유저명/리파지토리명" target="_blank" rel="external nofollow noopener noreferrer">http://github.com/유저명/리파지토리명</a></p></blockquote><p><img src="/images/20180725-STS-github-issue-plugin_6.png" alt="github 원격저장소 정보와 사용자명, 비밀번호를 입력하면 된다."></p><p><img src="/images/20180725-STS-github-issue-plugin_2.png" alt="위처럼 github의 원격 저장소정보가 저장된 것을 확인 할수 있다."></p><p>TaskList 뷰에서 연결된 github의 Issue등을 관리 할수 있다.</p><p><img src="/images/20180725-STS-github-issue-plugin_3.png" alt="STS에서 github에 있는 이슈들을 바로 볼수 있으며 수정, 삭제등도 가능하다."></p><p>GitHub Extensions플러그인은 github의 이슈를 STS의 Task로 대체해서 보여주는듯 하다.<br>소스를 커밋할때 이슈와 커밋은 연결 할 수 있으며, 커밋메시지를 통해서 이슈의 상태도 변화 시킬수 있다.<br>대충 보면 어떻게 사용해야 할지 감이 올것이다.</p><p>이클립스의 Mylyne, Task, Task tag, ToDo등 조금더 정밀한 사용법은 공부를 해 봐야 할것 같다.</p><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> STS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> Spring Tool Suite </tag>
            
            <tag> github </tag>
            
            <tag> issues </tag>
            
            <tag> issue </tag>
            
            <tag> mylyn </tag>
            
            <tag> GitHub Extensions </tag>
            
            <tag> 이슈트래커 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STS(Spring Tool Suite) - 프로젝트에 빨간 느낌표 해결하기</title>
      <link href="/2018/07/23/STS-20180723-STS-jre-unbound-error/"/>
      <url>/2018/07/23/STS-20180723-STS-jre-unbound-error/</url>
      
        <content type="html"><![CDATA[<p>어제 Windows에서 java 업데이트를 했다.<br>그리고 사용중인 STS에서 프로젝트에 빨간 느낌표(!)가 발생했다.<br>거기다 어제까지 잘되던 프로젝트 빌드가 안된다!!!!</p><p><img src="/images/20180723-STS-jre-unbound-error_1.png" alt="프로젝트에 빨간 느낌표가 빌드를 거부한다!!!"></p><p>인터넷을 찾아보니 import 시킨 jar 파일의 경로가 잘못되거나, 유효하지 않은 파일이나 디렉토리를 참조한 경우라고 한다.</p><p>프로젝트의 properties에 Java Build Path의 Libraries 탭을 선택하니 왠걸, JRE System Library에 빨간 엑스 표시가 있다.<br>어제 Windows에서 java 업데이트를 하면서 뭔가 문제가 발생한듯 하다.</p><p><img src="/images/20180723-STS-jre-unbound-error_2.png" alt="JRE 라이브러리가 맛탱이가 간 것을 확인 했다."></p><p>STS에 Problems 창을 보니 다음과 같은 에러가 보인다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The container &#39;JRE System Library [jre1.8.0_171]&#39; references non existing library &#39;C:\Program Files\Java\jre1.8.0_171\lib\ext\access-bridge-64.jar&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/20180723-STS-jre-unbound-error_3.png" alt="역시 JRE System Library에 문제가 발생한것 같다."></p><p>STS에서 사용하고 있는 JRE 라이브러리가 존재하지 않는다고 하는 것 같은데… </p><h1 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h1><p><img src="/images/20180723-STS-jre-unbound-error_4.png" alt="STS에서 프로젝트 우클릭 -&gt; properties"></p><p><img src="/images/20180723-STS-jre-unbound-error_5.png" alt="Java Build Path -&gt; Libraries 탭 선택 -&gt; 기존에 문제가 발생하던 JRE System Library 제거(본인의 경우 jre1.8.0_171) -&gt; Add Library 버튼 클릭"></p><p><img src="/images/20180723-STS-jre-unbound-error_6.png" alt="JRE System Library  선택 후 Next"></p><p><img src="/images/20180723-STS-jre-unbound-error_7.png" alt="Add Library 창에서 Alternate JRE 선택 후 Installed JREs 버튼 클릭"></p><p><img src="/images/20180723-STS-jre-unbound-error_8.png" alt="Add 버튼 클릭"></p><p><img src="/images/20180723-STS-jre-unbound-error_9.png" alt="Standard Vn 선택후 next"></p><p><img src="/images/20180723-STS-jre-unbound-error_10.png" alt="JRE Definition 창이 열리는데, JRE home 에서 Directory 버튼 클릭 후 시스템에 설치된 JRE 폴더를 찾아간다. 내 경우에 jre가 jre1.8.0_171 과 jre1.8.0_181 두개가 있다.내 생각에는 처음에 설치된 jre가 jre1.8.0_171 이였고, 어제 windows에서 java 업데이트하면서 jre1.8.0_181을 설치하면서 뭔가 문제가 발생한 것 같다. 따라서 새로 설치된 jre1.8.0_181을 선택하고 확인을 누르자."></p><p><img src="/images/20180723-STS-jre-unbound-error_11.png" alt="finish 버튼을 누르자."></p><p><img src="/images/20180723-STS-jre-unbound-error_12.png" alt="방금 등록한 jre가 Installed JREs에 보인다. 체크하고 Apply and close 를 누르자."></p><p><img src="/images/20180723-STS-jre-unbound-error_13.png" alt="자동으로 빌드되면서 아까 발생했던 빨간 느낌표가 사라진 것을 확인 할 수 있다."></p>]]></content>
      
      
      <categories>
          
          <category> STS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> Spring Tool Suite </tag>
            
            <tag> eclipse </tag>
            
            <tag> JRE System Library </tag>
            
            <tag> The container JRE System Library references non existing library </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STS(Spring Tool Suite) JS파일 에러표시 제거(빨간 엑스)</title>
      <link href="/2018/07/22/STS-20180722-sts-exclude-javascript-files/"/>
      <url>/2018/07/22/STS-20180722-sts-exclude-javascript-files/</url>
      
        <content type="html"><![CDATA[<h1 id="STS에서-Spring-MVC프로젝트에-bootstrap-디자인을-적용한-결과-많은-js파일에서-에러가-발생했다"><a href="#STS에서-Spring-MVC프로젝트에-bootstrap-디자인을-적용한-결과-많은-js파일에서-에러가-발생했다" class="headerlink" title="STS에서 Spring MVC프로젝트에 bootstrap 디자인을 적용한 결과 많은 js파일에서 에러가 발생했다."></a>STS에서 Spring MVC프로젝트에 bootstrap 디자인을 적용한 결과 많은 js파일에서 에러가 발생했다.</h1><p><img src="/images/20180722-sts-exclude-javascript-files_1.png" alt="js파일에 에러표시를 하는 STS"></p><p>남이 만들어 놓은 디자인 영역 부분이기에 내가 이후 수정할 일도 거이 없으며, 애시당초 이클립스나 STS(Spring Tool Suite)에서 프론트영역에 대한 warning, error 체크는 무시하는 것이 정신건강에 좋다.<br>그러므로 눈에 거슬리는 저 빨간 오류를 제거해 보자.</p><h1 id="STS에서-특정-영역에서-발생하는-에러-경고등을-무시하기"><a href="#STS에서-특정-영역에서-발생하는-에러-경고등을-무시하기" class="headerlink" title="STS에서 특정 영역에서 발생하는 에러, 경고등을 무시하기"></a>STS에서 특정 영역에서 발생하는 에러, 경고등을 무시하기</h1><p><img src="/images/20180722-sts-exclude-javascript-files_2.png" alt="프로젝트 우클릭 -&gt; properties 선택"><br><img src="/images/20180722-sts-exclude-javascript-files_3.png" alt="Javascript 선택 -&gt; include Path 선택 -&gt; Source 탭 선택 -&gt; 프로젝트를 펼치고 Exclued: 선택 후 Edit 버튼 클릭"><br><img src="/images/20180722-sts-exclude-javascript-files_4.png" alt="Inclusion and Exclusion Patters 이라는 창이 열린다. -&gt; Exclusion patters 영역의 Add Multiple 선택"><br><img src="/images/20180722-sts-exclude-javascript-files_5.png" alt="경고 에러등을 무시할 폴더나, 파일 선택 -&gt; 적용"><br><img src="/images/20180722-sts-exclude-javascript-files_6.png" alt="프로젝트 clean"><br><img src="/images/20180722-sts-exclude-javascript-files_7.png" alt="눈에 거슬리던 warning, erorr가 안보인다."></p>]]></content>
      
      
      <categories>
          
          <category> STS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> Spring Tool Suite </tag>
            
            <tag> 이클립스 </tag>
            
            <tag> eclipse </tag>
            
            <tag> js파일 </tag>
            
            <tag> exclude </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>애자일을 프로젝트에 적용해보기</title>
      <link href="/2018/07/21/programing-model-20180721-agile-for-me/"/>
      <url>/2018/07/21/programing-model-20180721-agile-for-me/</url>
      
        <content type="html"><![CDATA[<h1 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h1><p>음…<br>이번에 포트폴리오 목적으로 개인 프로젝트를 진행할 예정이다.<br>여기에 애자일(Agile)이라는 개발프로세스를 적용해 보고 싶어서 애자일에 관해 조금 공부해 보고 있다.<br>이 글은 내가 공부하는 애자일이라는 녀석을 정리하는 글이다.</p><hr><p><img src="/images/20180721-agile-for-me_1.jpg" alt="폭포수와 애자일"></p><h1 id="애자일은-무엇이고-대체-왜-쓰나"><a href="#애자일은-무엇이고-대체-왜-쓰나" class="headerlink" title="애자일은 무엇이고? 대체 왜 쓰나?"></a>애자일은 무엇이고? 대체 왜 쓰나?</h1><p>애자일 방법론이 뭐냐? 아주 단순하게 후려친다면, 프로젝트의 시작~종료 기간 까지 폭포수 방법론의 프로세스를 여러번 반복하는 것이다.</p><p><strong>폭포수 방법론의 프로세스</strong></p><blockquote><p>소프트웨어 요구사항 기술 - 소프트웨어 설계 - 소프트웨어 구현(또는 코딩) - 테스트와 디버깅 - 설치 - 소프트웨어 유지보수 </p></blockquote><p><strong>애자일 방법론의 프로세스</strong></p><blockquote><p>폭포수 방법론 1번 사이클 - 폭포수 방법론2번 사이클  - …. - 폭포수 방법론 n번 사이클 </p></blockquote><p>폭포수 방법론은 <strong>소프트웨어 전체</strong>에 대한 요구사항을 분석한 다음에 소프트웨어 설계 단계로 넘어간다.<br>따라서 단계단계 들어가는 인력은 한정되며, 시간은 많이 들어간다.</p><p>애자일 방법론은 소프트웨어 전체에 대한 요구사항을 분석하는 대신 가장 중요하고 필요한 <strong>기능</strong>에 대한 요구사항을 분석하고, 그 기능에 한정하여 다음단계로 진행한다. </p><p>폭포수 방법론은 소프트웨어 전체로 단 한번의 개발 프로세스를 진행하며, 애자일은 소프트웨어를 기능별로 잘게 쪼개고 그 쪼개진 기능을 중심으로 개발프로세스를 여러번 진행하는 것이다.</p><p>애자일 프로세스가 추구하는 목표는 정해진 기간 내에 일부 기능을 빨리 완성하여 제공함으로써 고객들의 참여를 앞당기자는 것이다.</p><p>고객이 소프트웨어를 테스트하는 시점을 앞당김으로써 고객의 피드백을 빨리 받을 수 있으며, 이는 소프트웨어를 변경할 수 있는 시간을 확보할 수 있다.<br>또한, 초반에 모든 요구사항을 분석 설계하는 것이 아니라 점진적, 반복적으로 소프트웨어를 개선해나가는 것이다.</p><p>지금까지 상당수의 프로젝트가 초반에 많은 부분을 결정한 다음에 프로젝트 중, 후반에 변화를 막으려는 시도를 했다.<br>그러나 미래를 예측하고 변화를 막는다는 것은 거의 불가능에 가깝다.<br>변화를 막을 수 없다면 변화에 빠르게 대응할 수 있는 방법을 찾는데 시간을 투자하는 것이 바람직하다.</p><p>애자일 방법론이란 인간의 불완전성을 인정하고, 변화를 빠르고 유연하게 받아들이기 위한 개발 방법론이다.</p><hr><h1 id="애자일-프로젝트-진행-원칙"><a href="#애자일-프로젝트-진행-원칙" class="headerlink" title="애자일 프로젝트 진행 원칙"></a>애자일 프로젝트 진행 원칙</h1><ol><li>변화를 막을 수 없다면 변화에 빠르게 대응하는 방법을 찾아라</li><li>최대한 빠르게 피드백을 받을 수 있는 개발 프로세스와 개발환경을 만든다.</li><li>개발 프로세스와 개발 환경은 항상 진행형이다. 단지 개선될 뿐이다.</li></ol><hr><h1 id="실제-프로젝트에-적용할-애자일의-방법론적-요소"><a href="#실제-프로젝트에-적용할-애자일의-방법론적-요소" class="headerlink" title="실제 프로젝트에 적용할 애자일의 방법론적 요소"></a>실제 프로젝트에 적용할 애자일의 방법론적 요소</h1><p><strong>첫째,</strong> 우선순위가 높은 기능을 최대한 빨리 개발하고, 피드백을 받아 점진적으로 개선한다.<br>지금까지 개발 과정을 살펴보면 프로젝트 초기에는 설계에 일정시간을 투자하고, 서버 측 api를 개발한 다음 클라이언트 기능을 개발하는 과정으로 진행했다.<br>그런데 새롭게 진행하는 프로젝트는 초반 설계 기간을 최소화 하고 우선순위가 높은 기능을 선택한 다음 설계, 서버 측 개발, 클라이언트 측 개발, 테스트, 개선하는 방식으로 개발을 한다.</p><p><strong>둘째,</strong> 프로젝트 반복 주기를 여러번 두어 반복 주기에서 개발한 기능을 시연하고 피드백하는 시간을 가진다.<br>또한, 매 반복주기마다 회고시간을 가짐으로써 개발과정에서 좋았던 점과 나빴던 점을 찾아내어, 개선할 부분은 개선하고 좋은점은 지속적으로 활용할 수 있게 한다.<br>이런과정을 통해 프로젝트에 참여하는 구성원들의 협업과 개발 환경을 지속적으로 개선해나갈수 있다.</p><p><strong>셋째,</strong> 익스트림 프로그래밍(eXtreame Programming, XP)에서 제안하는 실천 방법 중 테스트 주도개발(Test Driven Developement, TDD)과 짝 프로그래밍(Pair Programming)을 도입한다.<br>점진적으로 설계를 발전시키면서 API를 발전시켜야 하므로 프로젝트를 진행하면서 수없이 많은 리팩토링을 해야 한다.<br>이런 과정에서 TDD는 필수나 다름없다.<br>특히 데이터베이스 테이블에 대한 리팩토링까지 고려해야 하기에 TDD는 더 중요하게 인식된다.</p><p><strong>애자일 프로세스는 정형화된 규칙과 실천 방법을 수행하는 것이 아니다.프로젝트에서 발생하는 문제점을 개션하려는 노력으로 만들어진 실천 방법과 개발환경이 모두 애자일 프로세스의 일부가 될 수 있다.</strong></p><hr><h1 id="실제-프로젝트에-적용할-애자일의-기술적-도구-요소"><a href="#실제-프로젝트에-적용할-애자일의-기술적-도구-요소" class="headerlink" title="실제 프로젝트에 적용할 애자일의 기술적(도구) 요소"></a>실제 프로젝트에 적용할 애자일의 기술적(도구) 요소</h1><p><strong>1.이슈관리 시스템을 활용한 프로젝트 관리</strong></p><p>기존의 정보 공유 방법은 한 번에 매우 많은 정보를 프로젝트 구성원에게 전달해야 했기 때문에 문서의 활용도가 낮을 수 밖에 없었다.<br>이슈관리시스템으로는 프로젝트를 기능별로 요구사항 분석, 화면 분석내용을 분리 할수가 있다.<br>기능을 구현하는 담당자라면 이슈관리시스템에서 해당 기능만 확인하면 관련된 모든 정보를 얻을 수 있다.<br>만약 기능을 변경해야 한다면 이슈관리시스템에서 해당 기능의 내용만 수정하면, 이슈관리시스템에서 수정된 기능과 관련된 담당자에게 변경 사항을 알려주는 방식으로 프로젝트가 진행된다.</p><p><strong>2.위키를 이용한 문서관리</strong></p><p>끊임없이 변화하는 문서를 관리하고 소프트웨어 개발자가 접근하기 쉽게 하는 데 위키(WIKI)를 활용할 수 있다.<br>위키는 하나의 문서를 여러명이 동시에 편집할 수 있고, 웹 브라우저만 있으면 어디에서나 접근할 수 있어 변화하는 요구사항을 쉽게 반영 할 수 있다. </p><p><strong>3.Mylyn 이클립스 플러그인을 활용한 태스트 기반 개발</strong></p><p>Mylyn 이클립스 플러그인은 jira, Bugzilla, trac 과 같은 이슈관리 시스템과 개발툴의 통합은 개발자와 개발자, 개발자와 QA사이에 발생하는 의사소통 비용을 줄여준다.<br>Mylyn은 점점 더 복잡해지고 대형화되는 프로젝트의 업무들을 기능 단위로 묶어서 관리한다.<br>한번에 여러개의 업무에 집중하는 대신 이슈관리 시스템에 등럭된 기능의 우선순위대로 업무에 집중하게 하고 해당 태스크와 관련된 리소스를 관리하는 콘텍스트(context) 기능을 제공한다.</p><p><strong>4.지속적인통합개발환경(CI)</strong> </p><p>지금까지 수동으로 해왔던 빌드, 테스트, 배포 작업을 자동화 하고, 문제가 발생하면 개발자에게 빠르게 피드백할 수 있는 개발 환경이 그 무엇보다 중요하다.<br>지속적인 통합개발 환경은 개발자에게만 이점을 주는 것이 아니라 최신 소스를 개발 서버에서 바로 테스트 가능하기 때문에 프로젝트에 참여하는 고객, 업무분석가(기획자), 디자이너, 개발자, QA 모두에게 이익이 된다.</p><p><strong>5.테스트 주도 개발(Test Driven Developement, TDD)</strong></p><p>테스트를 먼저 작성하고 구현 코드를 만드는 TDD에서는 단위 테스트를 필수로 만들어야 하므로 좋은 개발 습관을 익히기에 좋은 방법이다.<br>단위 테스트를 만드는데 익숙하지 않은 개발자나 초보 개발자가 TTD기반으로 개발하는 것은 학습 효과면에서도 좋은 방법이다.<br>그러나 모든 기능을 TDD 기반으로 개발할 필요는 없다.<br>지속적인 통합 개발 환경의 효과를 높이려면 테스트 코드가 반드시 필요하므로 테스트의 중요성을 인식하고, 자연스럽게 테스트 코드를 만들어나갈 수 있는 환경을 만들어야 한다.</p><hr><h1 id="애자일-프로젝트-진행시-핵심-포인트-업무단위가-아닌-기능단위-개발"><a href="#애자일-프로젝트-진행시-핵심-포인트-업무단위가-아닌-기능단위-개발" class="headerlink" title="애자일 프로젝트 진행시 핵심 포인트(업무단위가 아닌 기능단위 개발)"></a>애자일 프로젝트 진행시 핵심 포인트(업무단위가 아닌 기능단위 개발)</h1><p>정보의 흐름을 업무단위가 아닌 기능단위로 바꾸면, 최초 업무분석 단계에서 모든 기능을 사용자 스토리 기반으로 추출하게 된다.<br>즉 프로젝트의 업무단위가 아니라 기능단위로 프로세스를 짧은 주기로 반복하는 것이 핵심이다.<br>프로젝트의 전체 요구사항 분석 -&gt; 화면설계를 진행하는 것이 아니라.<br>회원관리 기능에 대한 분석 -&gt; 회원관리 기능에 대한 화면설계를 진행함으써 작은 기능 단위로 프로젝트를 진행하는 것이 포인트이다.</p><p>사용자스토리(글이나 말로된 고객의 요구사항)를 통해 기능의 범위와 기능의 리스트를 정리하는 것이 중요하다.</p><hr><h1 id="스프린터-마일스톤-기능단위-개발-프로세스-반복-주기-를-진행하는-방식"><a href="#스프린터-마일스톤-기능단위-개발-프로세스-반복-주기-를-진행하는-방식" class="headerlink" title="스프린터(마일스톤 = 기능단위 개발 프로세스 반복 주기)를 진행하는 방식"></a>스프린터(마일스톤 = 기능단위 개발 프로세스 반복 주기)를 진행하는 방식</h1><p>스크럼 개발 프로세스에서 스프린터를 시작할 때 해당 스프린터의 목표와 개발할 사용자 스토리를 계획하는 미팅을 가지는 것과 스프린터을 완료한 다음 마지막에 회고를 두며, 문제점을 파악하여 지속적으로 개선해나간다.</p><p>일일회의 15분 , 어제한일과 오늘 할일을 이야기하고 현재 이슈사항만 짧게 공유 한다.<br>기타 이슈사항은 관련자끼리 따로 회의 한다.</p><h2 id="용어정리"><a href="#용어정리" class="headerlink" title="용어정리"></a>용어정리</h2><p>반복주기: 스프린트 또는 마일스톤. 반복주기의 기간설정은 보통 1주에서 4주 정도로 잡는다.</p><hr><h1 id="사용자-스토리-추출-및-스토리-포인트-산정-방법"><a href="#사용자-스토리-추출-및-스토리-포인트-산정-방법" class="headerlink" title="사용자 스토리 추출 및 스토리 포인트 산정 방법"></a>사용자 스토리 추출 및 스토리 포인트 산정 방법</h1><p>사용자가 프로젝트 초기에 소프트웨어의 기능을 사용하게 지원하는 것이 무엇보다 중요하다.<br>미리 소프트웨어를 사용해보면 자신이 원하는 기능이 무엇인지를 정확하게 이해할 수 있다.<br>그 후에 사용자가 정말 원하는 기능이 무엇인지를 파악하게 된다.<br>이렇게 애자일 프로세스의 반복적, 점짐적인 개발프로세스로 사용자의 피드백을 빨리 받을 수 있게 해야 한다.</p><p><strong>그러나 프로젝트를 시작하는 시점에 어떤 기능을 개발할지 전혀 알지 못한다면 프로젝트를 진행할 수 없다.</strong><br>프로젝트를 시작하는 시점에 해당 프로젝트에서 구현해야 할 기능을 사용자 관점에서 사용자의 언어로 분석하는 것이 사용자 스토리이다.<br>이렇게 추출된 사용자 스토리는 사용자와 지속적으로 의사소통을 하는 용도로 사용한다.</p><p>소프트웨어에 대한 사용자 스토리를 모두 추출한 다음에 진행해야 하는 부분은, 각 사용자 스토리별 우선순위와 개발시간의 산정이다.<br><strong>사용자 스토리별로 소요될 개발 시간을 스토리 포인트라고 한다.</strong><br>스토리 포인트는 일반적으로 절대적인 시간이 아니라 기준이 되는 사용자 스토리에 대한 상대적인 시간을 산정한다.</p><p>사용자 스토리를 추출하고 스토리 포인트를 산정하는 작업은 프로젝트에 참여하는 모든 구성원이 함께 진행하는 것이 좋다.<br>스토리 포인트를 산정할 때 스토리 포인트가 큰 사용자 스토리일 경우 1의 차이를 판단하기 어렵다.<br>따라서 스토리 포인트가 커질수록 스토리 포인트 사이의 간격을 크게 하는 것이 더 유용하다.<br>(1, 2, 3, 5, 8, 13, 20, 50, 기권)</p><hr><h1 id="사용자-스토리의-우선순위-결정"><a href="#사용자-스토리의-우선순위-결정" class="headerlink" title="사용자 스토리의 우선순위 결정"></a>사용자 스토리의 우선순위 결정</h1><p>사용자 스토리의 스토리 포인트를 산정한 후에는 사용자 스토리의 우선순위를 결정해야 한다.<br>스토리 포인트 산정은 개발자가 주도하지만 우선순위 결정은 업무 분석가(기획자)가 주도하는 것이 일반적이다.<br>그런데 업무 분석가에게 상,중,하로 우선순위를 결정하도록 요청할 경우 대부분의 사용자 스토리를 상으로 결정하게 된다.<br>업무 분석가의 관점에서는 모든 사용자 스토리의 중요도가 높은 것으로 결정해야 기능이 구현될 것으로 보이기 때문이다.<br>이런 결과는 업무 분석가와 개발자 간에 신뢰가 부족한 경우 더 자주 발생한다.<br>우선순위를 결정하는 취지에 대해서 충분히 설명해도 결과는 약 90%가 상, 나머지 10%가 중이 된다. 하에 해당하는 사용자 스토리는 하나도 없다.</p><p>이 문제를 해결하려면 업무 분석가와 개발자 사이의 신뢰를 회복하는 것이 무엇보다도 중요하다.<br>그리고 이에 대한 해결책으로 각 사용자 스토리를 상, 중, 하가 아니라 상상, 상중, 상하… 처럼 좀더 세분화 하는 것이 효과적이다.</p><h2 id="마이크-콘-불확실성과-화해하는-프로젝트-추정과-계획-인사이트-2008-은-우선순위를-결정해야-할-때-반드시-고려해야-하는-네가지-요소는-다음과-같다"><a href="#마이크-콘-불확실성과-화해하는-프로젝트-추정과-계획-인사이트-2008-은-우선순위를-결정해야-할-때-반드시-고려해야-하는-네가지-요소는-다음과-같다" class="headerlink" title="마이크 콘(불확실성과 화해하는 프로젝트 추정과 계획, 인사이트 2008)은 우선순위를 결정해야 할 때 반드시 고려해야 하는 네가지 요소는 다음과 같다."></a>마이크 콘(불확실성과 화해하는 프로젝트 추정과 계획, 인사이트 2008)은 우선순위를 결정해야 할 때 반드시 고려해야 하는 네가지 요소는 다음과 같다.</h2><ol><li>해당 기능의 재정적(금전적) 가치</li><li>해당 기능을 구현하거나 지원하는데 드는 비용</li><li>해당 기능을 구현하기 위해 배워야 할 지식이나 구현 과정에서 새롭게 창출되는 지식의 양과 그 중요성</li><li>해당 기능을 구현함으로써 제거되는 위험 요소의 양</li></ol><p>마이크 콘은 <strong>가치와 위험성의 관계를 설명하면서 가치도 높고 위험성도 높은 기능을 제일 먼저 개발해야 한다고 설명한다.</strong><br>이런 기능을 먼저 개발하면서 고객에게 가장 많은 가치를 전달할 수 있을 뿐만 아니라 프로젝트의 위험 요소를 빨리 제거할 수 있기 때문이다.<br>그 다음으로 구현해야 할 기능은 가치가 높고 위험성이 낮은 기능이다.</p>]]></content>
      
      
      <categories>
          
          <category> programing_model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 폭포수 방법론 </tag>
            
            <tag> 에자일 </tag>
            
            <tag> agile </tag>
            
            <tag> agile software development </tag>
            
            <tag> Mylyn </tag>
            
            <tag> 마이크콘 </tag>
            
            <tag> 불완전성 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 주요 애노테이션(Annotation)정리</title>
      <link href="/2018/07/20/spring-20180720-Spring-MVC-Annotation/"/>
      <url>/2018/07/20/spring-20180720-Spring-MVC-Annotation/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>애노테이션</th><th>설명</th><th>사용</th></tr></thead><tbody><tr><td>@Controller</td><td>스프링 MVC의 컨트롤러 객체임을 명시하는 애노테이션</td><td>클래스</td></tr><tr><td>@RequestMapping</td><td>특정 URI에 매칭되는 클래스나 메소드임을 명시하는 애노테이션</td><td>클래스, 메소드</td></tr><tr><td>@RequestParam</td><td>요청(request)에서 특정한 마라미터의 값을 찾아낼 때 사용하는 애노테이션</td><td>파라미터</td></tr><tr><td>@RequestHeader</td><td>요청(request)에서 특정 HTTP 헤더 정보를 추출할 때 사용</td><td>파라미터</td></tr><tr><td>@PathVariable</td><td>현재의 URI에서 원하는 정보를 추출할 때 사용하는 애노테이션</td><td>파라미터</td></tr><tr><td>@CookieValue</td><td>현재 사용자의 쿠키가 존재하는 경우 쿠키의 이름을 이용해서 쿠키의 값을 추출</td><td>파라미터</td></tr><tr><td>@ModelAttribute</td><td>자동으로 해당 객체를 뷰까지 전달하도록 만드는 애노테이션</td><td>메소드, 파라미터</td></tr><tr><td>@SessionAttribute</td><td>세션상에서 모델의 정보를 유지하고 싶은 경우에 사용</td><td>클래스</td></tr><tr><td>@InitBinder</td><td>파라미터를 수집해서 객체로 만들 경우에 커스터마이징</td><td>메소드</td></tr><tr><td>@ResponseBody</td><td>리턴 타입 HTTP의 응답 메시지로 전송</td><td>메소드, 리턴타입</td></tr><tr><td>@RequestBody</td><td>요청(request) 문자열이 그대로 파라미터로 전달</td><td>파라미터</td></tr><tr><td>@Repository</td><td>DAO 객체</td><td>클래스</td></tr><tr><td>@Service</td><td>서비스 객체</td><td>클래스</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 어노테이션 </tag>
            
            <tag> Annotation </tag>
            
            <tag> mvc </tag>
            
            <tag> 애노테이션 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YAML</title>
      <link href="/2018/07/08/web-20180708-what-is-YAML/"/>
      <url>/2018/07/08/web-20180708-what-is-YAML/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180708-what-is-YAML_1.png" alt="YAML"></p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>YAML은 구조화된 데이터를 표현하기 위한 데이터 포멧이다.<br>YAML은 Python처럼 들여쓰기로 데이터 계층을 표기한다.<br>들여쓰기를 할 때에는 <strong>Tab</strong>이 아닌 <strong>Space Bar</strong>를 사용한다.<br>다른 사람이 보더라도 코드를 이해하기 쉬워 설정 파일에 적합한 형식이다.</p><p>YAML은 배열을 나타낼 때 데이터 앞에 ‘-‘ 를 붙이며 뒤에는 반드시 <strong>Space Bar</strong>를 입력해야 한다.<br>파일의 확장자는 yml을 사용하며, 아래는 워드프레스 docker-compose.yml 의 예이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.DB 서버 설정</span></span><br><span class="line"><span class="attr">dbserver:</span></span><br><span class="line"> <span class="comment"># 1-1.이미지 지정</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 1-2.데이터 저장 장소 지정</span></span><br><span class="line"> <span class="attr">volumes_from:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dataonly</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 1-3.환경변수 지정</span></span><br><span class="line"> <span class="attr">environment:</span></span><br><span class="line">  <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.웹 서버 설정</span></span><br><span class="line"><span class="attr">webserver:</span></span><br><span class="line">  <span class="comment"># 2-1.이미지 지정</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">wordpress</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 2-2.포트 설정</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 2-3.컨테이너 링크 지정</span></span><br><span class="line"> <span class="attr">links:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"dbserver:mysql"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> YAML </tag>
            
            <tag> yml </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker - Mysql 컨테이너에 데이터전용(dataonly) 컨테이너 연결하기</title>
      <link href="/2018/07/08/docker-20180708-docker-mysql-with-dataonly-by-dockerfile/"/>
      <url>/2018/07/08/docker-20180708-docker-mysql-with-dataonly-by-dockerfile/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>시스템을 운영하다보면 다양한 데이터(DB, 로그 …)가 생성, 축적되며 이 데이터는 프로그램이 종료된 후에도 스토리지 등에 저장된다.<br>이를 영속 데이터라 하며 시스템 가동 시간에 따라 증감하고 변화한다.<br>스토리지 저장 공간은 한정되어 있고 장애로 인해 데이터가 소실될 수도 있으므로 이를 잘 관리하는 것은 중요하다.</p><h3 id="데이터-전용-컨테이너-dataonly-란"><a href="#데이터-전용-컨테이너-dataonly-란" class="headerlink" title="데이터 전용 컨테이너(dataonly)란?"></a>데이터 전용 컨테이너(dataonly)란?</h3><p>다양한 종류의 컨테이너를 동시에 여러개 서비스 할수 있는 도커에서도 위와 같은 영속적인 데이터를 관리할 필요가 있다.</p><p>Docker 기능으로는 데이터 전용 컨테이너에서 데이터를 관리하는 방법과 로컬호스트를 마운트하여 데이터를 저장하는 방법이 있다.</p><p>로컬호스트에 마운트하는 방법도 간단하고 좋은 방법이지만, 개인적으로 데이터 전용 컨테이너를 만들어 다양한 컨테이너에서 발생하는 데이터를 일관적으로 관리하는 방법이 좋아보인다.<br>데이터 전용 컨테이너란 말 그대로 데이터만 전문적으로 저장할 용도의 컨테이너를 말한다.<br>이번 글에서는 데이터 전용 컨테이너를 만들고 mysql 컨테이너를 연동시키는 방법을 정리해 보겠다.</p><h3 id="데이터-전용-컨테이너-생성하기"><a href="#데이터-전용-컨테이너-생성하기" class="headerlink" title="데이터 전용 컨테이너 생성하기"></a>데이터 전용 컨테이너 생성하기</h3><p>먼저 데이터를 저장하는 데이터 저뇽 컨테이너를 생성하자.<br>데이터 전용 컨테이너는 데이터를 저장하는 역할만 가지며 다른 기능은 수행하지 않는다.<br>필요한 Linux 커맨드의 실행만을 확인하면 되므로 Docker Hub에 공개된 BusyBox 공식 이미지를 사용한다.</p><p><strong>busybox</strong>란 표준 Linux 커맨드를 하나의 바이너리 파일에 저장한 애플리케이션이다.<br>가전제품, 네트워크 장비, 모바일 장치 등의 임베디드 기기에서 자주 사용되고 있다.</p><p>Dockerfile 작성하지 파일명은 dockfile 이고 확장자는 없다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1.Docker 이미지 가져오기</span><br><span class="line">FROM busybox</span><br><span class="line"></span><br><span class="line"># 2.작성자 정보 </span><br><span class="line">MAINTAINER 0.1 your-name@your-domain.com</span><br><span class="line"></span><br><span class="line"># 3.데이터 설정</span><br><span class="line">VOLUME &#x2F;var&#x2F;lib&#x2F;mysql</span><br></pre></td></tr></table></figure><p>VOLUME으로 지정한 디렉터리는 다른 컨테이너가 마운트할 수 있는 불롬이 된다.<br>MySQL 데이터를 저장해야 하므로 /var/lib/mysql 디렉터리로 지정한다.</p><p>다음 명령으로 dataonly 라는 이름의 데이터 전용 컨테이너 이미지를 생성하자.<br>아래 명령은 dockfile과 같은 경로에서 실행해야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t dataonly .</span><br></pre></td></tr></table></figure><p><img src="/images/20180708-docker-mysql-with-dataonly-by-dockerfile_1.png" alt="결과1"></p><p>데이터 전용 컨테이너를 구동 시키자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dataonly dataonly</span><br></pre></td></tr></table></figure><p><img src="/images/20180708-docker-mysql-with-dataonly-by-dockerfile_2.png" alt="결과2"></p><p>일단 데이터 컨테이너는 중지시켰다.<br>참고로 중지된 상태에서도 데이터는 마운트가 된다. </p><h3 id="Mysql-컨테이너-생성하기"><a href="#Mysql-컨테이너-생성하기" class="headerlink" title="Mysql 컨테이너 생성하기"></a>Mysql 컨테이너 생성하기</h3><p>Mysql 컨테이너는 docker-compose을 이용하여 생성하겠다.<br>원하는 경로에 docker-compose.xml 파일을 생성하고 아래 내용을 입력했다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB 서버 설정</span></span><br><span class="line"><span class="attr">dbserver:</span></span><br><span class="line"> <span class="comment">#이미지 지정</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#포트지정</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#데이터 저장 장소 지정</span></span><br><span class="line"> <span class="attr">volumes_from:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dataonly</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">#환경변수 지정</span></span><br><span class="line"> <span class="attr">environment:</span></span><br><span class="line">  <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><p>volumes_from에서 앞서 생성한 데이터 컨테이너를 마운트 설정한다.</p><p>아래 명령을 입력하여, 백그라운드로 mysql 컨테이너를 구동하자.<br>아래 명령은 docker-compose.yml 파일과 같은 경로에서 실행해야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>이미지가 없어서 새로 다운받고 자동으로 컨테이너를 실행하는 것을 확인 할 수 있다.</p><p><img src="/images/20180708-docker-mysql-with-dataonly-by-dockerfile_3.png" alt="결과3"></p><h3 id="데이터-컨테이너-시동-및-mysql-마운트-확인"><a href="#데이터-컨테이너-시동-및-mysql-마운트-확인" class="headerlink" title="데이터 컨테이너 시동 및 mysql 마운트 확인"></a>데이터 컨테이너 시동 및 mysql 마운트 확인</h3><p>아래 명령으로 데이터 컨테이너를 동작시키고, mysql컨테이너가 마운트 된 위치를 열어보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start -ia dataonly</span><br></pre></td></tr></table></figure><p><img src="/images/20180708-docker-mysql-with-dataonly-by-dockerfile_4.png" alt="결과4"></p><p>위 화면을 보면 /var/lib/mysql 디렉터리가 마운트 된 것을 확인할수 있다.</p><p>아래 화면에서 mysql 컨테이너에 접속하여 mysql 서버의 동작도 확인했다.</p><p><img src="/images/20180708-docker-mysql-with-dataonly-by-dockerfile_5.png" alt="결과5"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> dataonly </tag>
            
            <tag> busybox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven Error - Fatal error compiling: tools.jar not found</title>
      <link href="/2018/07/07/maven-20180707-error-maven-Fatal-error-compiling-tools-jar/"/>
      <url>/2018/07/07/maven-20180707-error-maven-Fatal-error-compiling-tools-jar/</url>
      
        <content type="html"><![CDATA[<h3 id="오류-내용"><a href="#오류-내용" class="headerlink" title="오류 내용"></a>오류 내용</h3><p>STS(Spring Tool Suite)에서 Spring Maven project를 Maven cealn install 명령으로 빌드를 했는데 아래와 같이 빌드가 실패했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Downloading: https:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;org&#x2F;apache&#x2F;maven&#x2F;plugins&#x2F;maven-install-plugin&#x2F;2.4&#x2F;maven-install-plugin-2.4.pom</span><br><span class="line">[INFO] Downloaded: https:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;org&#x2F;apache&#x2F;maven&#x2F;plugins&#x2F;maven-install-plugin&#x2F;2.4&#x2F;maven-install-plugin-2.4.pom (7 KB at 4.0 KB&#x2F;sec)</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ mokaboard ---</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ mokaboard ---</span><br><span class="line">[WARNING] Using platform encoding (MS949 actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ mokaboard ---</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding MS949, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to C:\Users\amagr\Desktop\projectes\MokaBoard\target\classes</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 4.644 s</span><br><span class="line">[INFO] Finished at: 2018-07-07T17:57:37+09:00</span><br><span class="line">[INFO] Final Memory: 10M&#x2F;114M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:compile (default-compile) on project mokaboard: Fatal error compiling: tools.jar not found: C:\Program Files\Java\jre1.8.0_171\..\lib\tools.jar -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http:&#x2F;&#x2F;cwiki.apache.org&#x2F;confluence&#x2F;display&#x2F;MAVEN&#x2F;MojoExecutionException</span><br></pre></td></tr></table></figure><p>핵심 오류 내용은 아래인것 같다. 해결방법을 검색해 보자…</p><p><strong>Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:compile (default-compile) on project mokaboard: Fatal error compiling: tools.jar not found: C:\Program Files\Java\jre1.8.0_171..\lib\tools.jar</strong></p><p>결국 Maven 빌드하는데 tools.jar를 못찾겠다고 하는 것이다.</p><h3 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h3><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_1.jpg" alt="STS에서 프로젝트의 properties에 들어간다. Java Build Path -&gt; Libraries 탭에서 JRE System Library를 클릭하고 Edit 버튼을 클릭."></p><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_2.jpg" alt="Installed JREs를 클릭."></p><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_3.png" alt="JRE를 선택하고 Edit 클릭."></p><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_4.png" alt="Add External Jars를 클릭."></p><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_5.png" alt="java가 설치된 경로에서 jdk/lib로 이동후 tools.jar를 선택 후 열기 클릭."></p><p><img src="/images/20180707-error-maven-Fatal-error-compiling-tools-jar_6.png" alt="방금 선택된 tools.jar가 추가된 것을 확인!."></p><p>이제 Maven clean install을 하면 성공적으로 Maven 빌드가 실행된다.</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> error </tag>
            
            <tag> Maven </tag>
            
            <tag> tools.jar </tag>
            
            <tag> Fatal error compiling: tools.jar not found </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven Error - Cannot read lifecycle mapping metadata for artifact</title>
      <link href="/2018/07/07/maven-20180707-error-maven-pom-cantnot-read-lifecycle-mapping-for-artifact/"/>
      <url>/2018/07/07/maven-20180707-error-maven-pom-cantnot-read-lifecycle-mapping-for-artifact/</url>
      
        <content type="html"><![CDATA[<h3 id="Cannot-read-lifecycle-mapping-metadata-for-artifact-org-apache-maven-plugins-mav"><a href="#Cannot-read-lifecycle-mapping-metadata-for-artifact-org-apache-maven-plugins-mav" class="headerlink" title="Cannot read lifecycle mapping metadata for artifact org.apache.maven.plugins:mav"></a>Cannot read lifecycle mapping metadata for artifact org.apache.maven.plugins:mav</h3><p><img src="/images/20180707-error-maven-pom-cantnot-read-lifecycle-mapping-for-artifact_1.png" alt="pom.xml 에러내용"></p><p>STS의 Maven 프로젝트의 pom.xml파일에서 위와 같은 빨간 error 가 발생했다.</p><h3 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h3><p>프로젝트를 refrech, clean, maven update project 했지만 문제해결 실패.</p><p>결국 Maven의 .m2 폴더 제거후 maven update project 실행</p><p>문재해결!!!</p><p>결론은 maven이 뭔가 이상한 오류를 보여주면 일단, .m2 파일을 날리고 디펜던시 라이브러리를 다시 받아보면 보통 해결된다.</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> STS </tag>
            
            <tag> error </tag>
            
            <tag> Cannot read lifecycle mapping metadata for artifact </tag>
            
            <tag> org.apache.maven.plugins:mav </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>에자일(Agile)이란?</title>
      <link href="/2018/07/03/programing-model-20180703-Agile/"/>
      <url>/2018/07/03/programing-model-20180703-Agile/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180703-Agile_1.png" alt></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이글은 애자일의 의미, 맥락을 정리한 글이다.<br>구체적인 애자일 방법론에서 사용되는 기술명세는 다루고 있지 않다.</p><hr><h3 id="애자일-Agile-민첩"><a href="#애자일-Agile-민첩" class="headerlink" title="애자일(Agile:민첩)"></a>애자일(Agile:민첩)</h3><p>애자일은 어떤 단일 개념이 아니다.<br>애자일은 서로 다른 여러 맥락에 따른 방법론과 테크닉의 조합이다.<br>소프트웨어 프로젝트는 변화 자체가 기본 속성이다.<br>애자일은 개발팀과 기업들이 그러한 변화에 적응할 수 있도록 변화와 관련된 위험을 줄이기위한 방법론 중 하나이다.<br>애자일의 핵심은 변화에 민첩하게 대응하기 위한 빠른 피드백이다.</p><p>개발자라면 한번쯤 들어 봤을법한 마틴파울러, 켄트벡과 같은 IT업계에 유명한 개발자들이 2001년 애자일 연합을 만들고, 애자일 매니페스토를 창안했다.</p><hr><h3 id="애자일-매니페스토"><a href="#애자일-매니페스토" class="headerlink" title="애자일 매니페스토"></a>애자일 매니페스토</h3><p>우리는 스스로 소프트웨어를 개발하고, 다른 사람들이 개발하는 것을 도와주면서 더 나은 소프트웨어 개발 방법들을 찾고 있다.<br>이 과정에서 우리는 다음과 같은 가치를 중요하게 생각한다.</p><p>절차와 도구보다는 <strong>개성과 화합</strong>을<br>방대한 문서작업 보다는 <strong>동작하는 소프트웨어</strong>를<br>계약 조건에 대한 협상보다는 <strong>고객과의 협력</strong>을<br>계획을 따르는 것을 넘어서서 <strong>변화에 대처하는 것</strong>을<br>더 가치있게 여긴다.</p><p>좌측의 사항도 가치가 있음을 인정하지만 우리는 우측의 사항에 더 높은 가치를 둔다는 것이다.</p><hr><h3 id="애자일-메니페스토의-원칙들"><a href="#애자일-메니페스토의-원칙들" class="headerlink" title="애자일 메니페스토의 원칙들"></a>애자일 메니페스토의 원칙들</h3><ol><li>가치있는 소프트웨어를 일찍, 지속적으로 전달하여 고객을 만족시키는 것을 최우선으로 한다.</li><li>개발의 막바지 단계이더라도 고객의 요구사항 변경을 환영한다. 애자일 프로세스들은 변화를 활용하여 고객의 경쟁력을 높이는 데 기여한다.</li><li>동작하는 소프트웨어를 몇 주에서 몇 개월 단위로 자주 전달한다. 가능한 한 전달주기를 짧게 한다.</li><li>비지니스 담당자들은 프로젝트 기간 내내 매일 개발자와 함께 일한다.</li><li>프로젝트는 동기가 부여된 개인들로 구성한다. 그들이 필요로 하는 환경과 지원을 제공하고 프로젝트가 완료될 때까지 믿고 맡긴다.</li><li>개발팀 내에서 정보를 전달하는 가장 효율적이고 효과적인 방법은 얼굴을 마주보고 대화하는 것이다.</li><li>프로젝트의 진척도를 가늠하는 가장 기본 요소는 동작하는 소프트웨어다.</li><li>애자일 프로세스들은 지속 가능한 개발을 이끈다. 투자자, 개발자, 사용자들은 일정한 개발속도를 계속 수용할 수 있어야 한다.</li><li>기술적인 탁월함과 좋은 설계에 대한 지속적인 관심은 기민함을 높인다.</li><li>단순함, 즉 하지 않아도 될 일은 최대한 하지 않아야 한다.</li><li>최선의 아키텍처, 요구사항, 설계는 스스로 조직화되는 팀에서 나온다.</li><li>개발팀은 정기적으로 일을 어떻게 하는 것이 더 효과적인지 되돌아보고 그에 맞추어 일하는 방식을 조율하고 바로잡는다.</li></ol><hr><h3 id="절차적-관점에서의-애자일-원칙"><a href="#절차적-관점에서의-애자일-원칙" class="headerlink" title="절차적 관점에서의 애자일 원칙"></a>절차적 관점에서의 애자일 원칙</h3><p>애자일은 탐과 조직이 어떻게 구성되고 협업해야 하는지에 대한 것들을 규정한다.</p><ul><li>회의 방식</li><li>구성원 각각의 역할</li><li>요구사항 파악 방법</li><li>작업 진척 속도 파악방법</li><li>점진적/반복적으로 일할 때 취하는 방식</li><li>진행 상황을 개발팀 밖의 관계자(고객, 영업 등)에게 전달하는 방식</li><li>비지니스 피드백 방식</li></ul><hr><h3 id="기술적인-관점에서의-애자일-원칙"><a href="#기술적인-관점에서의-애자일-원칙" class="headerlink" title="기술적인 관점에서의 애자일 원칙"></a>기술적인 관점에서의 애자일 원칙</h3><p>애자일 원칙의 기술적인 부분들은 개발, 확장, 유지보수, 제품을 출시(또는 납품, 서비스 배포)하면서 겪는 어려움들에 대해 특정한 기술적 관례나 기술 자체를 매우 구체적으로 가이드한다.<br>테스트 주도 개발(TDD), 페어 프로그래밍, 지속적인 통합, 단순한 디자인 원칙등과 같은 것들이다.<br>이러한 기술적 원칙들은 소프트웨어의 품질에 집중하여 팀이 결과물을 올바르게 만들어 가는지, 즉 <strong>목표한 것을 올바르게 실행하고 있는지</strong>에 대해 안심할 수 있게 한다.</p><hr><h3 id="애자일-방법론-사용시-주의점"><a href="#애자일-방법론-사용시-주의점" class="headerlink" title="애자일 방법론 사용시 주의점"></a>애자일 방법론 사용시 주의점</h3><p>애자일도 그저 수많은 방법론 중에 하나이다.<br>맹신은 금물이다.<br>그냥 따르기만 하면 갑자기 모든 것이 나아지는 마법의 방법론이 아니다.<br>애자일의 모든 절차들에는 기술적 탁월함이 전제되어 있어야 한다.<br>애자일 전환은 주로 절차, 동기부여 권한이양, 관료주의와 낭비의 제거, 우선순위, 업무의 가시화, 그리고 정보의 흐름에 집중한다.</p><p>절차에만 집중하고 스프트웨어 개발을 공장 라인처럼 취급하면, 그저 시키는 일만 하고 출퇴근하는 공장 노동자와 다를 바 없는 개발자들만 생긴다.<br>이렇게 되면 비효율적인 피드백 시스템이 되어 전체 프로젝트에 해를 끼친다.</p><p>완전한 애자일 전환을 위해서는 프로페셔널 소프트웨어 개발자들이 필요하다.<br>이들은 기술적 실행 관례, 기술적 전문성 그리고 관련도구들을 마스터하고 있어야 한다.<br>정기적으로 계속해서 배포되는 소프트웨어에 대해서도 높은 품질을 유지시키며, 완벽하게 테스트되고 쉽게 변형할 수 있는 소프트웨어를 개발할 수 있어야 한다.<br>완전한 애자일 전환을 위해서는 기업들이 소프트웨어 장인정신을 품어야 한다.</p><hr><h3 id="참고서적"><a href="#참고서적" class="headerlink" title="참고서적"></a>참고서적</h3><p>소프트웨어 장인(산드로 만쿠소)</p>]]></content>
      
      
      <categories>
          
          <category> programing_model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 애자일 </tag>
            
            <tag> Agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>폭포수 방법론의 단점</title>
      <link href="/2018/06/30/programing-model-20180630-weakness-of-waterfall-model/"/>
      <url>/2018/06/30/programing-model-20180630-weakness-of-waterfall-model/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180630-weakness-of-waterfall-model_1.png" alt></p><h3 id="폭포수-워터폴-방법론-이란"><a href="#폭포수-워터폴-방법론-이란" class="headerlink" title="폭포수(워터폴) 방법론 이란?"></a>폭포수(워터폴) 방법론 이란?</h3><p>폭포수 방법론은 프로그래밍 개발 방법론 중 아마도 가장 오래된 방법론이 아닐까 생각된다.<br>이름 그대로 폭포수 처럼 위에서 아래로, 즉 한방향으로 진행하는 프로그램 개발 방법론이다.</p><p>예를 들어 자바 웹 프로그램을 개발한다고 치면 아래와 같이 프로젝트가 단계별로 진행하는 것이다.</p><p>요구사항 분석(업무분석가) -&gt; 화면설계서(디자인) -&gt; 디자인 이지미(디자인) -&gt; HTML(퍼블리셔) -&gt; 자바스크립트, ajax 코드(퍼빌리셔, 개발자) -&gt; JSP, JAVA 코드(백엔드 개발자) -&gt; 테스트 케이스, 테스트 코드 …</p><p><strong>차근차근, 하나하나, 차곡차곡 단계별로 프로젝트를 진행하는 이 폭포수 방법론은 방법론이라는 말이 무색하게 아주 심플하기 때문에 프로젝트 구성원이 이 방법론을 따로 배울 필요가 없다는 엄청난 장점이 있다.</strong></p><p>하지만 그 반대로 엄청난 단점 또한 있으니…</p><hr><h3 id="폭포수-방식-프로젝트-진행의-문제점"><a href="#폭포수-방식-프로젝트-진행의-문제점" class="headerlink" title="폭포수 방식 프로젝트 진행의 문제점"></a>폭포수 방식 프로젝트 진행의 문제점</h3><h4 id="문제점1"><a href="#문제점1" class="headerlink" title="문제점1"></a>문제점1</h4><p>하위 업무가 상위 업무에 종속되므로 상위 업무가 완료될 때까지 하위 업무 담당자들은 대기해야 한다.<br>가장 하위에 있는 개발자와 QA가 항상 일정에 쫒기는 이유가 된다.</p><h4 id="문제점2"><a href="#문제점2" class="headerlink" title="문제점2"></a>문제점2</h4><p>프로세스 진행중 지속적으로 발생하는 변화에 대응하기 어렵다.<br>즉, 개발 중 기능 변경하기 어렵다.<br>차곡차곡 아래부터 쌓아 올리는 돌탑의 아랫돌을 빼기가 어렵듯이 말이다.</p><p><strong>위와 같은 문제가 발행하는 이유는, 폭포수 개발 방법론이 인간의 불완전성을 간과하고 있기 때문이다.</strong><br><em>인간의 생각에는 많은 오류가 있다.</em><br><em>인간이 미래를 예측하는 것은 매우 어렵다.</em><br><em>인간은 복잡한 것을 다루는 것이 취약하다.</em><br>위 말을 달리 하면, 인간은 완벽한 요구사항 분석을 할 수 없다.<br>인간은 완벽한 화면설계를 할 수 없다.<br>인간은 완벽한 개발을 할 수 없다.<br>인간은 완벽한 테스트를 할 수 없다.</p><hr><h3 id="변화에-능숙하게-대응-하기-위해서…"><a href="#변화에-능숙하게-대응-하기-위해서…" class="headerlink" title="변화에 능숙하게 대응 하기 위해서…"></a>변화에 능숙하게 대응 하기 위해서…</h3><p>애자일, xp, 스크럼 등등 방법론은 폭포수 방법론의 문제점을 극복하기 위해 태어난 방법론이다.<br>이 것들도 완벽한 방법론이 아니다.<br>각자 자신의 환경에 맞게 필요한 것만 차용하고 커스텀할 필요가 있다.<br>다만 중요한 점은 애자일 등의 방법론은 인간의 불완전성을 인지하고 있다는 것이다.<br>이것이 중요하다.</p>]]></content>
      
      
      <categories>
          
          <category> programing_model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> waterfall </tag>
            
            <tag> 워터폴 </tag>
            
            <tag> 폭포수 방법론 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOs7의 Jenkins에서 Spring Maven 프로젝트(SVN연동) 빌드 후 Tomcat7에 배포하기</title>
      <link href="/2018/05/23/jenkins-20180523-jenkins-use-job-with-svn/"/>
      <url>/2018/05/23/jenkins-20180523-jenkins-use-job-with-svn/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이 실습은 로컬 개발pc(Wincows10 pro) + SVN 서버(CentOs7_1) + Tomcat 서버(CentOs_2) + Jenkins 서버(CentOs7_3) 환경에서 실습을 진행했다.(윈도우 pc 1개, centos7 3개)<br>실습을 위해 기본적으로 maven 프로젝트와 이 프로젝트를 관리하는 svn서버, tomcat 서버, 젠킨스 서버가 필요하다.</p><h3 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h3><ul><li>CentOs7</li><li>jdk1.8</li><li>maven3</li><li>Tomcat7</li><li>Spring mvc maven project.war</li></ul><hr><h3 id="선행작업"><a href="#선행작업" class="headerlink" title="선행작업"></a>선행작업</h3><p><a href="/2018/04/30/centOs-20180430-centos-install-jdk/">CentOs7에 jdk 설치</a><br><a href="/2018/05/23/centOs-20180523-centos-install-maven/">CentOs7에 메이븐(maven) 설치</a><br><a href="/2018/05/23/centOs-20180523-centos-install-jenkins/">CentOs7에 Jenkins설치</a></p><hr><h3 id="젠킨스에-jdk-maven-연결"><a href="#젠킨스에-jdk-maven-연결" class="headerlink" title="젠킨스에 jdk, maven 연결"></a>젠킨스에 jdk, maven 연결</h3><p>일단 젠킨스에서 maven 프로젝트를 빌드하려면 jdk, maven 을 연동해야 한다.<br>젠킨스 웹에서 Jenkins관리 - Global Tool Configuration을 클릭한다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_1.png" alt="Jenkins관리 - Global Tool Configuration을 클릭 한다."></p><p>아래처럼 Global Tool Configuration화면이 나오는데 JDK, Maven항목에 버튼을 이용하여 각각 설치된 JDK, Maven 을 설정해야 한다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_2.png" alt="Global Tool Configuration 화면"></p><p><img src="/images/20180523-jenkins-use-job-with-svn_3.png" alt="Global Tool Configuration jdk, maven 설정"></p><p>위 처럼 젠킨스 서버에 설치된 JDK 경로와, Maven 경로를 설정하자.<br>Install automatically항목을 끄자.(만약 설치가 않되어 있을경우 자동 설치해주는 옵션이다.)<br>그리고 보면 알겠지만 jdk든 maven이던 여러버전을 복수개 설정하여 젠킨스에서 유동적으로 골라 사용할 수도 있다.</p><hr><h3 id="톰캣-배포용-플러그인-설치"><a href="#톰캣-배포용-플러그인-설치" class="headerlink" title="톰캣 배포용 플러그인 설치"></a>톰캣 배포용 플러그인 설치</h3><p>젠킨스가 빌드한 결과물(war파일)을 톰캣에게 배포하려면 Deploy to container Plugin 플러그인이 필요하다.<br>Deploy to container Plugin 플러그인을 설치하자.</p><p>다시 jenkins 관리로 이동한 뒤, 플러그인 관리를 클릭하자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_4.png" alt="플러그인 관리로 이동"></p><p>설치 가능 탭으로 이동하여 필터에 deploy를 검색하여 Deploy to container Plugin을 찾아 설치하자.<br>안전성을 위해 플러그인 설치시 자동 젠킨스 재시작 옵션을 추가하도록 하자. </p><p><img src="/images/20180523-jenkins-use-job-with-svn_b.png" alt="플러그인 조회"></p><p><img src="/images/20180523-jenkins-use-job-with-svn_5.png" alt="플러그인 설치결과"></p><hr><h3 id="톰캣서버의-tomcat-users-xml-수정"><a href="#톰캣서버의-tomcat-users-xml-수정" class="headerlink" title="톰캣서버의 tomcat-users.xml 수정"></a>톰캣서버의 tomcat-users.xml 수정</h3><p>젠킨스가 톰캣서버에 접근하여 빌드 결과물인 war를 배포하기 위해서는 톰캣에 접근할수 있는 계정이 필요하다.<br>톰캣서버의 관리자 계정을 만들어서 이 계정을 젠킨스에게 알려주면 된다.<br>톰캣이 설치되어 있는 서버에 /etc/tomcat/tomcat-users.xml 파일에 아래 내용을 추가하자.<br>tomcat-users라는 루트 태크 내부에 추가하면 된다.<br>톰캣의 관리자 계정은 admin / admin 으로 설정했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;manager-script&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;manager-jmx&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;manager-status&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;admin-gui&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;admin-script&quot;&#x2F;&gt;</span><br><span class="line">&lt;user username&#x3D;&quot;admin&quot; password&#x3D;&quot;admin&quot; roles&#x3D;&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-jenkins-use-job-with-svn_6.png" alt="젠킨스가 사용할 톰캣 계정 설정"></p><p>톰캣을 리스타트 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart tomcat</span><br></pre></td></tr></table></figure><hr><h3 id="젠킨스에-svn-빌드-배포-잡-생성"><a href="#젠킨스에-svn-빌드-배포-잡-생성" class="headerlink" title="젠킨스에 svn 빌드+배포 잡 생성"></a>젠킨스에 svn 빌드+배포 잡 생성</h3><p><img src="/images/20180523-jenkins-use-job-with-svn_7.png" alt="새로운 item 생성화면 이동"></p><p>적절한 Job 이름을 입력하고, Freestyle project를 클릭한뒤 ok를 클릭하자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_8.png" alt="새로운 item(JOB)생성화면"></p><p>그 다음에는 자세한 젠킨스 Job 설정화면이 탭으로 구별되어 나온다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_9.png" alt="General 탭"></p><p>General 탭에는 딱히 설정 할 것이 없다. 넘어가자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_10.png" alt="소스 코드 관리 탭"></p><p>소스코드 관리 탭에서는 이 젠킨스 잡에서 빌드할때 가져올 소스코드의 위치인 SVN 경로를 설정해야 한다.<br>Subversion을 선택하고 SVN원격 리파지토리 URL과 리파지토리에 접근할수 있는 svn 계정정보를 입력하자.<br>svn계정은 read 권한만 있어도 된다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_11.png" alt="소스 코드 관리 탭 - svn 계정을 등록하려면 add버튼을 클릭해라."></p><p>Jenkins가 나오는데 그것을 클릭하면 아래처럼 젠킨스에서 계정정보를 관리하는 화면이 나온다.<br>젠킨스는 다양한 외부 시스템에 접속을 할 필요가 있는데, 그때 접속할 계정정보를 관리하는 화면이 이 화면이다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_12.png" alt="tomcat접속 계정정보를 입력하자."></p><p>입력을 끝내고 add를 누르면 소스 코드 관리 탭의 Credentials항목에서 입력한 계정을 선택 할 수 있다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_13.png" alt="Build 탭으로 이동하자."></p><p>이글의 초반부에 설정한 maven을 선택하고 Goals에 maven 명령어인 clean install 을 입력하자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_a.png" alt="빌드 후 조치 탭으로 이동하자."></p><p>빌드 후 조치 추가를 클릭하고 Deploy war/ear to a container 를 클릭하자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_14.png" alt="빌드 후 조치에서 배포대상인 tomcat의 정보를 입력하자."></p><p>container항목을 선택하고 배포서버의 tomcat 버전인 tomcat7을 골라주자.<br>빌드 후 조치에서는 빌드 결과물인 war파일을 tomcat 서버에 배포하기 위한 설정을 해야 한다.<br>배포 대상인 war파일을 위 이미지 처럼 설정하고, context path를 설정하자.<br>이 context path는 war의 url경로가 된다.</p><p>그리고 아까 tomcat에 설정한 톱캣 관리자 정보를 입력하자.<br>Tomcat URL은 배포가 되는 Tomcat서버의 URL을 입력하면된다.</p><p>입력이 끝났다면 저장하자.</p><p>이제 모든 준비가 끝났다.<br>만든 젠킨스 잡을 실행하여 maven 웹 프로젝트를 빌드하고 톰캣에 배포해보자.</p><hr><h3 id="젠킨스-빌드"><a href="#젠킨스-빌드" class="headerlink" title="젠킨스 빌드"></a>젠킨스 빌드</h3><p><img src="/images/20180523-jenkins-use-job-with-svn_15.png" alt="생성한 젠킨스 잡이 보인다. 클릭하자."></p><p><img src="/images/20180523-jenkins-use-job-with-svn_16.png" alt="build now를 클릭하면 잡이 동작하게 된다."></p><p><img src="/images/20180523-jenkins-use-job-with-svn_17.png" alt="빌드와 배포가 정상적으로 SUCCESS가 되었다."></p><hr><h3 id="톰캣서버에서-배포-결과를-확인"><a href="#톰캣서버에서-배포-결과를-확인" class="headerlink" title="톰캣서버에서 배포 결과를 확인"></a>톰캣서버에서 배포 결과를 확인</h3><p>톰캣서버의 관리자 페이지로 이동해보자.</p><p>브라우저에 <strong>톰캣URL/manaver/html</strong> 을 입력하자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_18.png" alt="톰캣 배포결과 확인"></p><p>젠킨스 잡 설정에서 입력한 context path가 생긴것을 확인할 수 있다.</p><p>브라우저에 <strong>톰캣URL/아까입력한contextpath</strong>를 입력해보자.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_19.png" alt="배포 war 동작 확인"></p><p>배포된 내용이 반영되어 동작하는 것을 확인 할 수 있다.</p><hr><h4 id="추가-빌드중-오류-발생"><a href="#추가-빌드중-오류-발생" class="headerlink" title="추가 : 빌드중 오류 발생"></a>추가 : 빌드중 오류 발생</h4><p>이번 실습에서 빌드중 발생한 오류내용을 추가한다.</p><p>젠킨스 잡에서 maven 빌드시 아래 오류메세지들이 발생했다.</p><h4 id="오류-내용-error-unmappable-character-for-encoding-UTF8"><a href="#오류-내용-error-unmappable-character-for-encoding-UTF8" class="headerlink" title="오류 내용 :error: unmappable character for encoding UTF8"></a>오류 내용 :error: unmappable character for encoding UTF8</h4><p>찾아보니 윈도우 환경에서 개발된 소스가 리눅스 환경에 빌드될때 발생하는 인코딩 문제라고 한다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_20.png" alt="maven빌드 시 error: unmappable character for encoding UTF8"></p><p><strong>개발환경의 스프링 maven 프로젝트의 pom.xml에 UTF-8 인코딩 설정을 추가해야한다.</strong></p><p>pom.xml 아래 내용을 추가한다.</p><p>일단 properties 항목에 아래 내용을 추가하자.<br>maven이 빌드할때 아래 프로퍼티를 참조하여 인코딩을 정한다고 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180523-jenkins-use-job-with-svn_21.png" alt="Maven빌드 UTF-8 인코딩 설정"></p><p>그리고 maven-compiler-plugin 플러그인의 configuration에 아래 내용을 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180523-jenkins-use-job-with-svn_22.png" alt="maven-compiler-plugin UTF-8 인코딩 설정"></p><p>로컬에서 maven 빌드를 해보면 이제는 로컬에서 error: unmappable character for encoding UTF8 오류가 발생하는 것을 확인 할 수 있다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_23.png" alt="STS에서 maven 빌드시 error: unmappable character for encoding UTF8d 발생"></p><p>개발도구인 STS(Spring Tool Suite) 또는 이클립스에서도 UTF-8 인코딩 설정이 필요하다.</p><p><img src="/images/20180523-jenkins-use-job-with-svn_24.png" alt="Window - Preferences - General - Workspace 에서 Text file encoding에 UTF-8 설정을 하자."></p><p>그리고</p><p><img src="/images/20180523-jenkins-use-job-with-svn_25.png" alt="Window - Preferences - General - Content Types에도 UTF-8을 설정하자"></p><p>Java Class File과 Text에 Default encoding을 UTF-8을 입력하고 update를 클릭하여 각각 인코딩을 적용하자.<br>주의할 점은 개발툴 UTF-8인코딩 설정을 하면 자바 파일등에서 기존에 작성한 한글등이 깨진다.</p><p><strong>그 뒤 로컬에서 maven 빌드시 빌드 성공 확인!!!</strong></p><p>이제 수정된 내용을 SVN에 commit하고 젠킨스에서 다시 빌드+배포잡을 돌리자.</p><p>젠킨스에서 오류없이 빌드+배포 되었으며 tomcat에서 결과를 확인 했다.</p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> war </tag>
            
            <tag> deploy </tag>
            
            <tag> centos7 </tag>
            
            <tag> spring maven project </tag>
            
            <tag> tomcat7 </tag>
            
            <tag> build </tag>
            
            <tag> auto build deploy </tag>
            
            <tag> unmappable character for encoding UTF8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7에 maven(메이븐) 설치하기</title>
      <link href="/2018/05/23/centOs-20180523-centos-install-maven/"/>
      <url>/2018/05/23/centOs-20180523-centos-install-maven/</url>
      
        <content type="html"><![CDATA[<h3 id="선행작업"><a href="#선행작업" class="headerlink" title="선행작업"></a>선행작업</h3><p><a href="/2018/04/30/centOs-20180430-centos-install-jdk/">CentOs7에 jdk 설치</a></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이번글 에서는 CentOs7에 빌드도구인 Maven을 설치하도록 하겠다.<br>Maven설치 뒤 빌드 태스트를 위해 jdk를 미리 설치해 놓아야 한다.</p><h3 id="CentOs7에-메이븐-설치하기"><a href="#CentOs7에-메이븐-설치하기" class="headerlink" title="CentOs7에 메이븐 설치하기"></a>CentOs7에 메이븐 설치하기</h3><p>일단 / (루트)경로에 tools라는 폴더를 만든다.<br>이 폴더에 maven을 넣을 생각이다.<br>추후 ant, gradle과 같은 다른 빌드 도구를 추가할 경우, 그것들도 tools폴더에 넣어 관리할 예정이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;tools</span><br><span class="line">cd &#x2F;tools</span><br></pre></td></tr></table></figure><p>/tools 경로에서 아래 명령을 입력하여 maven을 다운받고, 설치하자.<br>심볼릭 링크를 거는 이유는, 나중에 메이븐 버전이 바뀌었을 때의 수고를 줄이고자 함이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www-eu.apache.org&#x2F;dist&#x2F;maven&#x2F;maven-3&#x2F;3.5.3&#x2F;binaries&#x2F;apache-maven-3.5.3-bin.tar.gz</span><br><span class="line">sudo tar xzf apache-maven-3.5.3-bin.tar.gz</span><br><span class="line">sudo ln -s apache-maven-3.5.3  maven</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-centos-install-maven_1.png" alt="maven 설치 결과"></p><p>설치는 완료가 되었다. 다음은 설정을 하자.</p><h3 id="CentOs7에-메이븐-환경설정-하기"><a href="#CentOs7에-메이븐-환경설정-하기" class="headerlink" title="CentOs7에 메이븐 환경설정 하기"></a>CentOs7에 메이븐 환경설정 하기</h3><p>/etc/profile.d/maven.sh 파일을 생성하자.<br>이 파일은 maven 환경변수 설정 스크립트이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile.d&#x2F;maven.sh</span><br></pre></td></tr></table></figure><p>그리고 아래 maven 환경설정 내용을 채워 저장하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME&#x3D;&#x2F;tools&#x2F;maven</span><br><span class="line">export PATH&#x3D;$&#123;MAVEN_HOME&#125;&#x2F;bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>maven.sh를 실행하여 설정내용을 바로 적용하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile.d&#x2F;maven.sh</span><br></pre></td></tr></table></figure><p>그리고 아래 명령어로 maven 버전을 확인하자.<br>아래 명령어 결과로 maven 버전정보가 나온다면 maven 환경설정까지 끝난것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-centos-install-maven_2.png" alt="mvn -version 결과"></p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7에 Jenkins(젠킨스)설치하기</title>
      <link href="/2018/05/23/centOs-20180523-centos-install-jenkins/"/>
      <url>/2018/05/23/centOs-20180523-centos-install-jenkins/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="선행작업"><a href="#선행작업" class="headerlink" title="선행작업"></a>선행작업</h3><p><a href="/2018/04/30/centOs-20180430-centos-install-jdk/">CentOs7에 jdk 설치</a><br><a href="/2018/05/23/centOs-20180523-centos-install-maven/">CentOs7에 메이븐(maven) 설치</a></p><hr><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이 글에서는 CentOs7에 Jenkins를 설치해보도록 하겠다.<br>젠킨스를 사용하려면 jdk와 메이븐이 CentOs에 먼저 설치되어 있어야 한다.<br>실습의 편의를 위헤 selinux는 꺼져있는 환경에서 실습했다.</p><hr><h3 id="젠킨스-jenkins-란"><a href="#젠킨스-jenkins-란" class="headerlink" title="젠킨스(jenkins)란?"></a>젠킨스(jenkins)란?</h3><p>젠킨스는 자바로 작성된 오픈 소스 소프트웨어로 지속적인 통합(CI:Continuous Integration)와 지속적인 배포(CD:Continuous Delivery)를 제공한다.<br>개발자가 소스코드를 수정하여, 그것들을 svn나 git 같은 형상관리 도구에 올리면 젠킨스는 그 내용들을 자동으로 읽어 빌드 및 테스트등의 작업을 실행할 수 있다.<br>즉 젠킨스는 CI에서 핵심적인 역할을 한다.</p><hr><h3 id="젠킨스-주요기능"><a href="#젠킨스-주요기능" class="headerlink" title="젠킨스 주요기능"></a>젠킨스 주요기능</h3><ul><li>형상관리 도구와의 연동</li><li>웹 인터페이스</li><li>빌드 및 테스트 자동화</li><li>코드 품질 검사</li><li>배포 관리 자동화</li><li>그루비 스크립트를 이용한 자유로운 잡 스케줄링</li><li>소스 코드 체크아웃</li><li>테스트 보고서 생성</li><li>실행 결과 통보</li><li>다양한 인증 기반과 결합한 인증 및 권한 관리</li><li>분산 빌드(마스터 슬레이브)</li></ul><hr><h3 id="젠킨스-설치하기"><a href="#젠킨스-설치하기" class="headerlink" title="젠킨스 설치하기"></a>젠킨스 설치하기</h3><p>Jenkins 설치를 위한 yum레파지토리 설정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat&#x2F;jenkins.repo</span><br><span class="line">sudo rpm --import http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat&#x2F;jenkins-ci.org.key</span><br></pre></td></tr></table></figure><p>아래 명령으로 젠킨스를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install jenkins</span><br></pre></td></tr></table></figure><p>Jenkins에 사용할 포트 설정하자.<br>/etc/sysconfig/jenkins 파일을 열어 수정하도록 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br></pre></td></tr></table></figure><p>파일은 연뒤 아래 내용을 추가하여 젠킨스의 웹 포트를 9090으로 변경하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_PORT&#x3D;&quot;9090&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-centos-install-jenkins_0.png" alt="JENKINS_PORT 설정화면"></p><p>Jenkins의 9090 포트 사용을 위한 방화벽 설정을 하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;9090&#x2F;tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>젠킨스 설치와 설정이 끝났다.</p><hr><h3 id="Jenkins-서비스-명령어"><a href="#Jenkins-서비스-명령어" class="headerlink" title="Jenkins 서비스 명령어"></a>Jenkins 서비스 명령어</h3><p><strong>Jenkins 시작</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins start</span><br></pre></td></tr></table></figure><p><strong>Jenkins 종료</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins stop</span><br></pre></td></tr></table></figure><p><strong>Jenkins 재시작</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins restart</span><br></pre></td></tr></table></figure><p><strong>CentOs에서 젠킨스를 항상 실행하게 설정</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable jenkins</span><br></pre></td></tr></table></figure><hr><h3 id="브라우저로-젠킨스에-접속해보기"><a href="#브라우저로-젠킨스에-접속해보기" class="headerlink" title="브라우저로 젠킨스에 접속해보기"></a>브라우저로 젠킨스에 접속해보기</h3><p>service jenkins start를 이용해 젠킨스를 동작시키고, 호스트에서 브라우저를 열고 ip:9090으로 접속해 보자</p><p><img src="/images/20180523-centos-install-jenkins_1.png" alt="젠킨스 웹 최조 접근시 화면"></p><p>최초 젠킨스 시작뒤 브라우저에 접속하면 나오는 화면이다. 설명과 같이 경로에 있는 키를 복사하여 입력하면 젠킨스 최초 셋팅이 진행된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br></pre></td></tr></table></figure><p>위 명령어로 해당 파일을 열어보면 한줄의 코드가 있을 것이다.<br>그것을 복사해서 Administrator password에 입력한뒤 Continue를 클릭하자.</p><p>그러면 아래와 같은 화면이 나온다. 젠킨스는 다양한 기능들을 플러그인으로 제공한다.<br>install suggeested plugins 를 클릭해 기초 플러그인을 설치하자.<br>추후 필요한 플러그인이 있다면, 추가 설치도 가능하다.</p><p><img src="/images/20180523-centos-install-jenkins_2.png" alt="젠킨스 기초 플러그인 설치"></p><p>아래처럼 기초 플러그인이 설치가 되는데 시간이 좀 걸린다.</p><p><img src="/images/20180523-centos-install-jenkins_3.png" alt="젠킨스 기초 플러그인 설치 진행"></p><p>그 다음에 다음과 같이 관리자 정보를 입력하라고 나온다. 적절하게 입력하고 진행하자 </p><p><img src="/images/20180523-centos-install-jenkins_4.png" alt="젠킨스 관리자 정보 생성"></p><p>그다음 계속 진행하다 보면 다음과 같이 젠킨스 페이지가 뜨면 젠킨스 설치가 완료된 것이다.</p><p><img src="/images/20180523-centos-install-jenkins_5.png" alt="젠킨스 기초 플러그인 설치 진행"></p><p>젠킨스 설치 끝</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install </tag>
            
            <tag> centos7 </tag>
            
            <tag> 젠킨스 </tag>
            
            <tag> Jenkins </tag>
            
            <tag> 젠킨스 설치 </tag>
            
            <tag> setup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7 고정IP설정</title>
      <link href="/2018/05/23/centOs-20180523-centos-set-network/"/>
      <url>/2018/05/23/centOs-20180523-centos-set-network/</url>
      
        <content type="html"><![CDATA[<h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>이 글은 dhcp로 이더넷이 설정된 centOs7에 고정 아이피를 할당하는 방법이다.</p><h3 id="CentOs7-고정아이피-할당하기"><a href="#CentOs7-고정아이피-할당하기" class="headerlink" title="CentOs7 고정아이피 할당하기"></a>CentOs7 고정아이피 할당하기</h3><p>/etc/sysconfig/network-scripts 경로에서 ifcfg-xxxx 파일을 찾아 수정하자</p><p><img src="/images/20180523-centos-set-network_1.png" alt="실습화면 ifcfg파일 모습"></p><p>보통 위처럼 ifcfg-ete0 라는 명칭을 갖을 것이다. 하지만 자신의 CentOs의 환경(이더넷, 가상머신 등)에 따라 뒤에 xxxx가 다른 명칭일 수도 있다.</p><p>vi 편집기로 해당 파일을 열어서 아래처럼 수정하자</p><p>BOOTPROTO=dhcp(기존) -&gt; BOOTPROTO=none(수정후)<br>IPADDR=원하는고정아이피<br>NETMASK=넷마스크<br>GATEWAY=게이트웨이주소<br>DNS1=DNS주소</p><p><img src="/images/20180523-centos-set-network_2.png" alt="CentOs에 고정아이피 설정 예"></p><p>마지막으로 설정을 적용 하려면 네트워크를 재시작 하면 된다.<br>아래 명령을 입력하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-centos-set-network_3.png" alt="CentOs에 고정아이피 결과 확인"></p><p>위처럼 ifconfig로 설정된 내용을 확인 하자.</p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centOs7 </tag>
            
            <tag> network </tag>
            
            <tag> ip </tag>
            
            <tag> BOOTPROTO=none </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 selinux disabled 하기</title>
      <link href="/2018/05/23/centOs-20180523-centos-selinux-disable/"/>
      <url>/2018/05/23/centOs-20180523-centos-selinux-disable/</url>
      
        <content type="html"><![CDATA[<h3 id="selinux-disable-하기"><a href="#selinux-disable-하기" class="headerlink" title="selinux disable 하기"></a>selinux disable 하기</h3><p>CentOs로 여러가지 실습을 할 때, 발생하는 다양한 문제들 중 하나는 selinux이다.<br>일단 리눅스 시스템에 보안을 담당하는 부분이니 문제라고 여기면 안될것 같다.<br>하지만 개인적으로 selinux가 어려운데다가 테스트하기도 바쁜 와중에 이녀석의 딴지는 내 정신건강에 악영향을 주는 경우가 많다.</p><p>그래서 나 같은 경우, selinux를 보통 꺼버린다. ㅋㅋㅋㅋ</p><p>vi 편집기로 /etc/sysconfig/selinux 파일을 연뒤<br>SELINUX=enforcing 항목을 SELINUX=disabled 변경한 뒤 CentOs를 재시작 하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br></pre></td></tr></table></figure><p><img src="/images/20180523-centos-selinux-disable_1.png" alt="selinux disabled 설정화면"></p><p>끝!!!<br>언젠가 selinux도 공부해 봐야 것다.</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> selinx </tag>
            
            <tag> disabled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOs7 - vsftpd 설치하기</title>
      <link href="/2018/05/21/centOs-20180521-centos-install-vsftpd/"/>
      <url>/2018/05/21/centOs-20180521-centos-install-vsftpd/</url>
      
        <content type="html"><![CDATA[<h4 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h4><p>로컬 pc에 있는 war파일을 centos7의 톰캣에 배포 하려니, centOs에 ftp가 없다.<br>그래서 레드헷 계열에서 쓰는 기존 ftp보다 보안및 성능이 강화된 vsftpd설치하고 사용해보자.</p><p>실습의 편의를 위해 selinux를 disable 했으며, root 계정으로 접속하는 예제이다.<br><strong>주의: 이실습은 보안은 개나 줘버린 예제이다.</strong><br>그리고 실습을 진행하면서 자잘한 문제사항을 발견하게 된다.<br>만약 예제를 따라 실습한다면, 한번 전체적으로 읽어보고 따라하길 바란다.</p><h4 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h4><p>centos7(vsftpd), ftp 클라이언트(filezilla)</p><h4 id="centOs7에-vsftpd-설치하기"><a href="#centOs7에-vsftpd-설치하기" class="headerlink" title="centOs7에 vsftpd 설치하기"></a>centOs7에 vsftpd 설치하기</h4><p>vsftpd가 설치되어있는지 일단 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed vsftpd</span><br></pre></td></tr></table></figure><p>설치가 안되어 있다면, 다음 명령으로 vsftpd를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure><p>그리고 vsftpd를 업데이트 하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update vsftpd</span><br></pre></td></tr></table></figure><p>/etc/vsftpd/vsftpd.conf 파일을 수정하자.<br>/etc/vsftpd/vsftpd.conf 은 vsftpd의 설정파일이다.</p><p>기존의 vsftpd.conf 파일을 vsftpd.conf_back으로 바꿔보관하고,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv vsftpd.conf vsfptd.conf_back</span><br><span class="line">vi vsftpd.conf</span><br></pre></td></tr></table></figure><p>새로운 vsftpd.conf 파일을 만들어 아래 내용을 채우고 저장한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable&#x3D;NO</span><br><span class="line">local_enable&#x3D;YES</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line">local_umask&#x3D;022</span><br><span class="line">dirmessage_enable&#x3D;YES</span><br><span class="line">xferlog_enable&#x3D;YES</span><br><span class="line">connect_from_port_20&#x3D;YES</span><br><span class="line">xferlog_file&#x3D;&#x2F;var&#x2F;log&#x2F;xferlog</span><br><span class="line">xferlog_std_format&#x3D;YES</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line">listen&#x3D;YES</span><br><span class="line">pam_service_name&#x3D;vsftpd</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line">tcp_wrappers&#x3D;YES</span><br></pre></td></tr></table></figure><p>vsftpd를 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start</span><br></pre></td></tr></table></figure><p>다음 명령으로 동작중인 vsftpd 포트를 확인 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vsftpd]# netstat --tcp -anp | grep vsftpd</span><br><span class="line">tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      18131&#x2F;vsftpd</span><br></pre></td></tr></table></figure><p>다음 명령으로 vsfptd 서비스가 항상 동작하도록 설정하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure><p>방화벽에서 21, 20포트를 열어준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;21&#x2F;tcp</span><br><span class="line">sudo firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;20&#x2F;tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="Windows-pc에서-filezilla를-이용헤서-ftp-에-접속해보자"><a href="#Windows-pc에서-filezilla를-이용헤서-ftp-에-접속해보자" class="headerlink" title="Windows pc에서 filezilla를 이용헤서 ftp 에 접속해보자"></a>Windows pc에서 filezilla를 이용헤서 ftp 에 접속해보자</h3><p>일단 root 계정으로 접속해보자.</p><p><img src="/images/20180521-centos-install-vsftpd_1.png" alt="하지만 오류가 발생하며 접속이 안된다."></p><p>530 Permission denied 오류를 찾아보니, vsftpd에 기본적으로 접속거부 리스트에 root 계정이 포함되어 있다고 한다.</p><p>아래 두 파일에 이 접속거부 계정 정보가 있다.<br>/etc/vsftpd/ftpusers<br>/etc/vsftpd/user_list</p><p>/etc/vsftpd/ftpusers 를 열어보니, 아래와 같다</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vsftpd]<span class="comment"># vi /etc/vsftpd/ftpusers</span></span><br><span class="line"><span class="comment"># Users that are not allowed to login via ftp</span></span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure><p>root 계정을 지워서 저장하자.<br>일단 실습용이니 보안은 개나 줘버리자. ㄷㄷㄷ</p><p>/etc/vsftpd/user_list 파일을 열어보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vsftpd]# vi &#x2F;etc&#x2F;vsftpd&#x2F;user_list</span><br><span class="line"># vsftpd userlist</span><br><span class="line"># If userlist_deny&#x3D;NO, only allow users in this file</span><br><span class="line"># If userlist_deny&#x3D;YES (default), never allow users in this file, and</span><br><span class="line"># do not even prompt for a password.</span><br><span class="line"># Note that the default vsftpd pam config also checks &#x2F;etc&#x2F;vsftpd&#x2F;ftpusers</span><br><span class="line"># for users that are denied.</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure><p>역시 root 가 있다. 이 파일에서도 root 를 제거하고 저장하자.</p><p>서비스를 재 시작하고 접속이 root계정을 이용해 파일질라고 접속해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><p>이번엔 </p><p><strong>500 OOPS: vsftpd: refusing to run with writable root inside chroot() 라는 오류 메세지가 뜬다.</strong></p><p><img src="/images/20180521-centos-install-vsftpd_2.png" alt="500 OOPS 오류 발생"></p><p>찾아보니 chroot내에 쓰기 권한이 없어서 발생하는 문제라고 한다.</p><p>/etc/vsftpd/vsftpd.conf 파일을 수정해야 한다.</p><p>하단에 아래 스크립트를 추가하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow_writeable_chroot&#x3D;yes</span><br></pre></td></tr></table></figure><p>다시 vsftpd 서비스를 재시작 하자.</p><p>다시 파일질라에서 root 계정으로 접속해보자</p><p>또다시 안된다. 산넘어 산이다. </p><p><img src="/images/20180521-centos-install-vsftpd_3.png" alt="디렉터리 목록 조회 실패 오류"></p><p>인터넷에 찾아보니 vsftpd 에 passive 모드에 대한 설정이 필요하다고 한다.</p><p>ftp 서버 만들어 쓰는데 참 할게 많다. </p><p>다시 /etc/vsftpd/vsftpd.conf파일을 열어 하단에 아래 내용을 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pasv_enable&#x3D;Yes</span><br><span class="line">pasv_max_port&#x3D;40000</span><br><span class="line">pasv_min_port&#x3D;40000</span><br></pre></td></tr></table></figure><p>40000 번 포트를 방화벽에서 열어주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --permanent --add-port&#x3D;40000&#x2F;tcp</span><br><span class="line"># firewall-cmd --reload</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="최종-etc-vsftpd-vsftpd-conf-파일-내용"><a href="#최종-etc-vsftpd-vsftpd-conf-파일-내용" class="headerlink" title="최종 /etc/vsftpd/vsftpd.conf 파일 내용"></a>최종 /etc/vsftpd/vsftpd.conf 파일 내용</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable&#x3D;NO</span><br><span class="line">local_enable&#x3D;YES</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line">local_umask&#x3D;022</span><br><span class="line">dirmessage_enable&#x3D;YES</span><br><span class="line">xferlog_enable&#x3D;YES</span><br><span class="line">connect_from_port_20&#x3D;YES</span><br><span class="line">xferlog_file&#x3D;&#x2F;var&#x2F;log&#x2F;xferlog</span><br><span class="line">xferlog_std_format&#x3D;YES</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line">listen&#x3D;YES</span><br><span class="line">listen_port&#x3D;21</span><br><span class="line">pam_service_name&#x3D;vsftpd</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line">tcp_wrappers&#x3D;YES</span><br><span class="line">allow_writeable_chroot&#x3D;YES</span><br><span class="line">pasv_enable&#x3D;Yes</span><br><span class="line">pasv_max_port&#x3D;40000</span><br><span class="line">pasv_min_port&#x3D;40000</span><br></pre></td></tr></table></figure><p>음 vsftp 패시브모드 설정도 끝냈다. 다시 접속 시도해보자</p><p>접속이 되는 것을 확인했다. 파일질라에서 능동, 수동 둘다 접속이 가능하다.</p><p><img src="/images/20180521-centos-install-vsftpd_4.png" alt="접속확인"></p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs </tag>
            
            <tag> vsfptd </tag>
            
            <tag> filezilla </tag>
            
            <tag> 530 Permission denied </tag>
            
            <tag> 500 OOPS: vsftpd: refusing to run with writable root inside chroot() </tag>
            
            <tag> 오류:Connection timed out after 20 seconds of inactivity </tag>
            
            <tag> 오류:디렉터리 목록 조회 실패 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7 Spring war 배포하기(deploy)</title>
      <link href="/2018/05/21/centOs-20180521-centos-deploy-spring-war/"/>
      <url>/2018/05/21/centOs-20180521-centos-deploy-spring-war/</url>
      
        <content type="html"><![CDATA[<h3 id="선행작업"><a href="#선행작업" class="headerlink" title="선행작업"></a>선행작업</h3><p><a href="/2018/04/30/centOs-20180430-centos-install-jdk/">CentOs에 JDK 설치</a><br><a href="/2018/05/21/centOs-20180521-centos-install-tomcat/">CentOs에 Tomcat 설치</a><br><a href="/2018/05/21/centOs-20180521-centos-install-vsftpd/">CentOs에 vsftpd 설치</a></p><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><p>배포파일 경로 : /usr/share/tomcat/webaaps<br>설정파일 : /etc/tomcat/server.xml<br>로그파일 경로: /var/log/tomcat<br>배포파일명 : sample.war</p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>로컬에서 개발된 spring war를 centOs에 tomcat에 배포하여 동작 시켜보겠다.<br>배포할 war는 로컬 pc에서 sts툴에서 maven 기반 spring mvc 프로젝트를 사용하도록 하겠다.</p><h3 id="STS에서-spring-프로젝트의-war-추출하기"><a href="#STS에서-spring-프로젝트의-war-추출하기" class="headerlink" title="STS에서 spring 프로젝트의 war 추출하기"></a>STS에서 spring 프로젝트의 war 추출하기</h3><p>STS에서 프로젝트 우클릭 -&gt; Run AS -&gt; Maven install 클릭하면 target 폴더가 생기며, war 파일이 생성된다.</p><p><img src="/images/20180521-centos-deploy-spring-war_1.png" alt="maven install로 war 파일 만들기"></p><p><img src="/images/20180521-centos-deploy-spring-war_2.png" alt="생성된 war파일"></p><p>해당 war파일을 배포할 CentOS 에 ftp로 전송한다.</p><p><img src="/images/20180521-centos-deploy-spring-war_3.png" alt="war파일을 배포서버로 전송"></p><h3 id="CentOs-Tomcat의-webapps에-war파일-이동-및-설정"><a href="#CentOs-Tomcat의-webapps에-war파일-이동-및-설정" class="headerlink" title="CentOs Tomcat의 webapps에 war파일 이동 및 설정"></a>CentOs Tomcat의 webapps에 war파일 이동 및 설정</h3><p>나는 yum 를 이용하여 Tomcat7을 설치했다.</p><p>/etc/tomcat/webapps 경로에 ftp로 전송한 war파일을 옮긴다.</p><p>그리고 해당 파일을 sample.war로 이름을 변경한다.</p><p><img src="/images/20180521-centos-deploy-spring-war_4.png" alt="배포할 파일을이동 및 파일명 변경"></p><p>tomcat이 실행되면서 위 war파일을 이용하여 배포하여 실행하게 된다.<br>이제 tomcat에게 위 sample.war를 셋팅해줘야 한다.</p><p>/etc/tomcat/server.xml 파일을 vi 편집기로 열자.</p><p>파일의 맨 마지막 부분을 보면 Host 태그가 보인다.<br>그 내부에 Context 태그를 추가해야 한다.</p><p>추가할 문구, docBase에 실행할 war 파일 경로를 위치한다.<br>war확장자는 생략한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/usr/share/tomcat/webapps/sample"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>server.xml의 Host태그</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/usr/share/tomcat/webapps/sample"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 tomcat에 war를 배포준비를 끝냈다.</p><h3 id="tomcat-실행하기"><a href="#tomcat-실행하기" class="headerlink" title="tomcat 실행하기"></a>tomcat 실행하기</h3><p>아래 명령으로 tomcat을 재 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart tomcat</span><br></pre></td></tr></table></figure><p>톰캣이 재 실행되며 방금 설정한 내용을 가지고 /var/lib/tomcat/webapps에 war파일을 배포한다.<br>이 동작이 시간이 좀 걸린다.<br>이 과정을 보려면 tomcat의 log를 tail로 확인 하면 된다.</p><p>/var/log/tomcat 경로를 보면 tomcat이 생성하고 있는 log파일을 볼 수 있다.<br>오늘날짜 log파일을 tail명령어으로 실시간 관찰해보면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# tail -n +20 -f catalina.2018-05-22.log</span><br></pre></td></tr></table></figure><p><img src="/images/20180521-centos-deploy-spring-war_5.png" alt="tomcat로그 화면"></p><p><img src="/images/20180521-centos-deploy-spring-war_6.png" alt="tomcat war 실행결과"></p><p>만약 정상동작하지 않는다면 로그파일로 문제를 확인해야 한다.</p><p>끝.</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs7 </tag>
            
            <tag> Tomcat7 </tag>
            
            <tag> war </tag>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7 - Tomcat7 설치</title>
      <link href="/2018/05/21/centOs-20180521-centos-install-tomcat/"/>
      <url>/2018/05/21/centOs-20180521-centos-install-tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="선행작업"><a href="#선행작업" class="headerlink" title="선행작업"></a>선행작업</h3><p><a href="/2018/04/30/centOs-20180430-centos-install-jdk/">CentOs에 JDK 설치</a></p><h3 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h3><p>CentOs7에 스프링 프로그램을 동작시키기 위해 Tomcat을 설치해 보고자 한다.</p><h3 id="CentOs7에-Tomcat7-설치"><a href="#CentOs7에-Tomcat7-설치" class="headerlink" title="CentOs7에 Tomcat7 설치"></a>CentOs7에 Tomcat7 설치</h3><p>아래 명령을 이용해서 tomcat이 설치되었는지 확인하자.<br>명령어 이후 아무것도 안나온다면, 설치가 안되어 있는 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum list installed | grep tomcat</span><br></pre></td></tr></table></figure><p>그 뒤 설치가 가능한 tomcat을 확인해 보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum list tomcat</span><br></pre></td></tr></table></figure><p>실행결과</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum list installed | grep tomcat</span><br><span class="line">[root@localhost ~]# yum list tomcat</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: ftp.kaist.ac.kr</span><br><span class="line"> * extras: ftp.kaist.ac.kr</span><br><span class="line"> * updates: ftp.kaist.ac.kr</span><br><span class="line">Available Packages</span><br><span class="line">tomcat.noarch                         7.0.76-6.el7                          base</span><br><span class="line">[root@localhost ~]# [root@localhost ~]# yum list installed | grep tomcat</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: ftp.kaist.ac.kr</span><br><span class="line"> * extras: ftp.kaist.ac.kr</span><br><span class="line"> * updates: ftp.kaist.ac.kr</span><br><span class="line">Available Packages</span><br><span class="line">tomcat.noarch                         7.0.76-6.el7                          base</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>음 yum 으로는 tomcat7 만 지원해주는 듯 하다.<br>직접 tomcat8을 다운받아서 설치할수 있을것 같지만, 귀찮으니 그냥 tomcat7로 설치를 하겠다.</p><p>다음 명령으로 tomcat을 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tomcat*</span><br></pre></td></tr></table></figure><h3 id="Tomcat7-실행하기"><a href="#Tomcat7-실행하기" class="headerlink" title="Tomcat7 실행하기"></a>Tomcat7 실행하기</h3><p>일단 tomcat을 위해 방화벽을 열어주자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port&#x3D;8080&#x2F;tcp </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>톰캣 서비스를 항상 동작하게 설정하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable tomcat</span><br></pre></td></tr></table></figure><p>tomcat을 실행하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start tomcat</span><br></pre></td></tr></table></figure><p><img src="/images/20180521-centos-install-tomcat_1.png" alt="브라우저에서 동작을 Tomcat 동작을 확인하자."></p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs7 </tag>
            
            <tag> Tomcat7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STS(Spring Tool Suite) - SVN 원격리파지토리 사용하기</title>
      <link href="/2018/05/21/STS-20180521-STS-setting-svn-repo/"/>
      <url>/2018/05/21/STS-20180521-STS-setting-svn-repo/</url>
      
        <content type="html"><![CDATA[<h4 id="들어가기"><a href="#들어가기" class="headerlink" title="들어가기"></a>들어가기</h4><p>CentOs에 hunumoka_spring_temlate 라는 svn 리파지토를 생성한 뒤 실습한 예제이다.<br>STS(Spring Tool Suite)에서는 기본적으로 git을 지원하며 svn을 사용하기 위해서는 추가적인 플러그인 설치가 필요하다.<br>이번 글에서는 STS에에서 svn사용을 위한 준비와 svn 원격리파지토리 연결을 실습하겠따.</p><h4 id="STS에-svn-플러그인-설치"><a href="#STS에-svn-플러그인-설치" class="headerlink" title="STS에 svn 플러그인 설치"></a>STS에 svn 플러그인 설치</h4><p><img src="/images/20180521-STS-setting-svn-repo_1.png" alt="STS에서 help - Eclipse Maketplace 를 클릭한다."></p><p><img src="/images/20180521-STS-setting-svn-repo_2.png" alt="svn을 검색하여 Subversive - SVN Team Provider를 설치한다."></p><p>설치가 완료되면 STS를 재시작 하자.</p><p><img src="/images/20180521-STS-setting-svn-repo_3.png" alt="STS에서 Window - show view 에서 svn을 검색하자"><br>SVN 관련 View들이 보이는 것을 확인 할 수 있다.<br>SVN Repositories를 선택하자.<br>SVN Repositories이 창에서 svn 원격리파지토를 설정하자.</p><p><img src="/images/20180521-STS-setting-svn-repo_4.png" alt="SVN Repositores에서 new - Repositori Location 선택 "></p><p><img src="/images/20180521-STS-setting-svn-repo_5.png" alt="New Repository Locaion 창에 svn 접속정보를 입력한다."></p><h4 id="이슈발생"><a href="#이슈발생" class="headerlink" title="이슈발생"></a>이슈발생</h4><p><img src="/images/20180521-STS-setting-svn-repo_6.png" alt="STS에 SVN Connector를 설치하라고 나온다."></p><p><img src="/images/20180521-STS-setting-svn-repo_10.png" alt="SVN Connector가 없어서 그런지, SVN 원격리파지토라는 등록이 되나, 그 내용이 정상적으로 보이지 않고 있다."></p><p><img src="/images/20180521-STS-setting-svn-repo_7.png" alt="오류 메세지 정보대로 STS에 Window - Preferences - Team - SVN - SVN Connector에 찾아 들어가자."></p><p><img src="/images/20180521-STS-setting-svn-repo_8.png" alt="Install Connection창에서 SVN Kit을 설치한다."><br>설치가 진행되며 또 STS가 리부팅 된다.</p><p><img src="/images/20180521-STS-setting-svn-repo_9.png" alt="다시 STS에 Window - Preferences - Team - SVN - SVN Connector에 찾아 들어가자."><br>자동으로 방금 설치된 SVN Connector가 셋팅 된 것을 알 수 있다.<br>확인만 하고 넘어가자(만약 선택이 안되어 있다면, 직접 설정하자.)</p><p><img src="/images/20180521-STS-setting-svn-repo_11.png" alt="아까 등록한 원격리파지토리에 빨간색 x 표시가 사라진 것을 확인 할 수 있다."></p><h4 id="로컬-프로젝트를-SVN-원격-리파지토리를-Share-하기"><a href="#로컬-프로젝트를-SVN-원격-리파지토리를-Share-하기" class="headerlink" title="로컬 프로젝트를 SVN 원격 리파지토리를 Share 하기"></a>로컬 프로젝트를 SVN 원격 리파지토리를 Share 하기</h4><p>현재 SVN 원격 리파지토리는 생성된 뒤, 한번도 사용하지 않은 깨끗한 상태이다.<br>이제 이 원격 리파지토리에 프로젝트를 Share해 보자.</p><p><img src="/images/20180521-STS-setting-svn-repo_12.png" alt="Package Explorer에서 프로젝트 우클릭 - Team - Share Prject를 클릭"></p><p><img src="/images/20180521-STS-setting-svn-repo_13.png" alt="SVN을 선택하고 Next 클릭"></p><p><img src="/images/20180521-STS-setting-svn-repo_14.png" alt="이미 등록된 SVN 리파지토리가 보인다. 선택하고 Next 클릭"></p><p><img src="/images/20180521-STS-setting-svn-repo_15.png" alt="URL을 보면 svn URL 뒤에 프로젝트명이 두번 반복되는 것을 확인 할 수 있다."><br>svn 리파지토리명과 프로젝트명이 동일해서 반복된 것이다.<br>난 이 리파지토리에 hanumoka_spring_template만을 사용할 예정이다.<br>url 뒤의 hanumoka_spring_template를 제거하여 Finsh를 클릭하자.</p><p>그뒤에 최초 커밋을 하라고 나오는데 적절한 커밋 멘트를 입력하고 진행하면 된다.</p><p>끝!!!</p>]]></content>
      
      
      <categories>
          
          <category> STS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> Spring Tool Suite </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>마크다운 에디터용 비주얼스튜디오(VisualStudioCode) 플러그인(plugin) 설치</title>
      <link href="/2018/05/19/VisualStudioCode-20180519-visual-stuido-code-markdown-plugin/"/>
      <url>/2018/05/19/VisualStudioCode-20180519-visual-stuido-code-markdown-plugin/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#">시작하기</a></li><li><a href="#">언어와 상관없이 공통으로 쓸만한 플러그인</a></li><li><a href="#">프론트엔드 개발시 쓸만한 플러그인</a></li><li><a href="#">마크다운관련 플러그인</a></li></ul><!-- /TOC --><h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p>나는 이 헥소블로그를 쓸때 비주얼스튜디오 코드를 사용한다.<br>이번에는 이 헥소블러그를 사용할때, 편할수도 있을 플러그인들을 정리해 보겠다.<br>플러그인에 대한 자세한 사용법은 정보페이지 링크를 참조하길 바란다.</p><hr><h3 id="언어와-상관없이-공통으로-쓸만한-플러그인"><a href="#언어와-상관없이-공통으로-쓸만한-플러그인" class="headerlink" title="언어와 상관없이 공통으로 쓸만한 플러그인"></a>언어와 상관없이 공통으로 쓸만한 플러그인</h3><ul><li><strong>Rainbow Brackets</strong><br>코드작성시 중첩된 브라켓(브레이스)를 색으로 구별 해줘서 눈이 편하다.<br><img src="/images/20180519-visual-stuido-code-markdown-plugin_1.png" alt="Rainbow Brackets 적용된 js 코드"></li></ul><ul><li><strong>vscode-icons</strong><br>프로젝트 폴더 내부의 파일과 폴더아이콘을 구별하기 쉬운 아이콘으로 보여준다.<br><img src="/images/20180519-visual-stuido-code-markdown-plugin_2.png" alt="vscode-icons 적용된 폴더트리"></li></ul><ul><li><strong>Active File In StatusBar</strong><br>파일을 선택했을때 창의 하단에 해당 파일의 절대경로를 보여준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar" target="_blank" rel="external nofollow noopener noreferrer">Active File In StatusBar 정보 페이지</a></li></ul><ul><li><strong>indent-rainbow</strong><br>탭이나 스페이스로 발생된 여백을 색으로 구별해준다.<br><img src="/images/20180519-visual-stuido-code-markdown-plugin_4.png" alt="indent-rainbow 적용된 뒤 여백의 색변화"></li></ul><ul><li><strong>Git History</strong><br>git history를 쉽게보여주고, 파일비교를 해준다.<br>솔직히 이건 안써봐서 잘 모르겠지만 편해보여 설치했다.<br>자세한 사용법은 아래를 참조하길 바란다.<br><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="external nofollow noopener noreferrer">Git History 플러그인 정보페이지</a></li></ul><ul><li><strong>Auto Close Tag</strong><br>HTML, XMl 등의 태그를 코딩할때 자동으로 닫아준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="external nofollow noopener noreferrer">Auto Close Tag 정보 페이지</a></li></ul><ul><li><strong>Auto Rename Tag</strong><br>HTML, XML 태그를 수정할 경우, 자동으로 쌍으로 수정된다.<br><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="external nofollow noopener noreferrer">Auto Rename Tag 정보 페이지</a></li></ul><hr><h3 id="프론트엔드-개발시-쓸만한-플러그인"><a href="#프론트엔드-개발시-쓸만한-플러그인" class="headerlink" title="프론트엔드 개발시 쓸만한 플러그인"></a>프론트엔드 개발시 쓸만한 플러그인</h3><ul><li><strong>IntelliSense for CSS class names in HTML</strong><br>HTML코딩시 class에 css를 타이핑시 자동으로 찾아준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion" target="_blank" rel="external nofollow noopener noreferrer">IntelliSense for CSS class names in HTML 정보 페이지</a></li></ul><ul><li><strong>Debugger for Chrome</strong><br>HTML페이지를 크롬으로 디버깅 해준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" target="_blank" rel="external nofollow noopener noreferrer">Debugger for Chrome 정보 페이지</a></li></ul><ul><li><strong>Beautify</strong><br>HTML, javascript, css, JSON 등등의 코드들을 예쁘게 보여준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify" target="_blank" rel="external nofollow noopener noreferrer">Beautify 정보페이지</a></li></ul><ul><li><strong>ESLint</strong><br>javascript 문법체크, 코드스타일 체크등의 기능을 제공한다.<br><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external nofollow noopener noreferrer">ESLint 정보 페이지</a></li></ul><ul><li><strong>jshint</strong><br>JSLint에서 파생되었으며 JSLint 보다 덜 업격한 javascript 정적 분석툴<br><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.jshint" target="_blank" rel="external nofollow noopener noreferrer">JSLint 정보 페이지</a></li></ul><ul><li><strong>View In Browser</strong><br>HTML파일을 바로 브라우저로 볼수있게 해준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=qinjia.view-in-browser" target="_blank" rel="external nofollow noopener noreferrer">View In Browser 정보 페이지</a></li></ul><ul><li><strong>npm</strong><br>음 잘은 모르겠다. 나중에 node 개발할때 편해보여 일단 설치했다.<br><a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script" target="_blank" rel="external nofollow noopener noreferrer">npm 정보 페이지</a></li></ul><ul><li><strong>npm Intellisense</strong><br>음 잘은 모르겠다. 나중에 node 개발할때 편해보여 일단 설치했다.<br><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense" target="_blank" rel="external nofollow noopener noreferrer">npm Intellisense 정보 페이지</a></li></ul><hr><h3 id="마크다운관련-플러그인"><a href="#마크다운관련-플러그인" class="headerlink" title="마크다운관련 플러그인"></a>마크다운관련 플러그인</h3><ul><li><strong>Markdown All in One</strong><br>다양한 단축키로 마크다운 작성시 편하다.<br><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="external nofollow noopener noreferrer">Markdown All in One 정보 페이지</a></li></ul><ul><li><strong>Markdown Shortcuts</strong><br>마크다운에서 테이블 만들때 편해보여 설치했다. 최초 테이블 작성시 편해보인다.<br><a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts" target="_blank" rel="external nofollow noopener noreferrer">Markdown Shortcuts 정보 페이지</a></li></ul><ul><li><strong>Markdown TOC</strong><br>작성된 마크다운의 H 태그들을 자동으로 바로가기 목차로 만들어준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=AlanWalk.markdown-toc" target="_blank" rel="external nofollow noopener noreferrer">Markdown TOC 정보 페이지</a></li></ul><ul><li><strong>markdownlint</strong><br>마크다운을 lint 해준다.<br><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="external nofollow noopener noreferrer">markdownlint 정보 페이지</a></li></ul><ul><li><strong>Table Formatter</strong><br>마크다운에서 table 사용시 들쭉날쭉한 테이블을 예쁘게 정렬해준다. 이미 작성한 테이블을 수정할때 편해보인다.<br><a href="https://marketplace.visualstudio.com/items?itemName=shuworks.vscode-table-formatter" target="_blank" rel="external nofollow noopener noreferrer">Table Formatter 정보 페이지</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> VisualStudioCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudioCode </tag>
            
            <tag> 비주얼스튜디오코드 </tag>
            
            <tag> 마크다운 </tag>
            
            <tag> markdown </tag>
            
            <tag> 플러그인 </tag>
            
            <tag> -plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows에 git 설치하기</title>
      <link href="/2018/05/16/git-20180516-git-install-on-windows/"/>
      <url>/2018/05/16/git-20180516-git-install-on-windows/</url>
      
        <content type="html"><![CDATA[<h3 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h3><p>windows10 pro(64bit)</p><h3 id="git-다운로드-및-설치하기"><a href="#git-다운로드-및-설치하기" class="headerlink" title="git 다운로드 및 설치하기"></a>git 다운로드 및 설치하기</h3><p>구글에서 <em>git 설치</em> 검색을 해서 git 다운로드 홈페이지에 접속해서 windows를 클릭하여 git 설치파일을 다운로드 하여 실행하자</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/downloads</a></p><p><img src="/images/20180516-git-install-on-windows_1.png" alt="&quot;git 다운로드 사이트&quot;"></p><p><img src="/images/20180516-git-install-on-windows_2.png" alt="&quot;git 설치1&quot;"></p><p><img src="/images/20180516-git-install-on-windows_3.png" alt="&quot;git 설치2&quot;"></p><p><img src="/images/20180516-git-install-on-windows_4.png" alt="&quot;git 설치3&quot;"></p><p><img src="/images/20180516-git-install-on-windows_5.png" alt="&quot;git 설치4&quot;"><br>개인적으로 바탕화면에 git bash 아이콘이 있는것을 좋아하므로, Additional icons를 선택한다.</p><p><img src="/images/20180516-git-install-on-windows_6.png" alt="&quot;git 설치5&quot;"></p><p><img src="/images/20180516-git-install-on-windows_7.png" alt="&quot;git 설치6&quot;"><br>예전에는 없었던것 같는데 notepadd++ 선택항목이 있다. 나는 윈도우에서 notepad++을 주로사용하므로 일단 선택하자.</p><p><img src="/images/20180516-git-install-on-windows_8.png" alt="&quot;git 설치7&quot;"><br>git 커맨드는 git bash로만 사용할 예정이므로 Use Git from Git Bash only를 선택했다.<br>만약 윈도우 cmd에서도 git 커멘트를 사용하려면 Use Git from the Wondows Command Prompt를 선택하면 된다.<br>참고로 Use Git from the Wondows Command Prompt를 선택하면 git을 실행할수 있는 최소한의 내용이 윈도우 환경변수에 추가된다.</p><p><img src="/images/20180516-git-install-on-windows_9.png" alt="&quot;git 설치8&quot;"></p><p><img src="/images/20180516-git-install-on-windows_10.png" alt="&quot;git 설치9&quot;"></p><p><img src="/images/20180516-git-install-on-windows_11.png" alt="&quot;git 설치10&quot;"></p><p><img src="/images/20180516-git-install-on-windows_12.png" alt="&quot;git 설치중&quot;"></p><p>윈도우에서 git 설치과정 끝!</p><h3 id="2-git-기본설정-필수"><a href="#2-git-기본설정-필수" class="headerlink" title="2.git 기본설정(필수)"></a>2.git 기본설정(필수)</h3><p>깃을 설치하고나서 가장먼저 기본으로 설정해야 하는 것이 사용자 정보 설정이다.<br>git은 커밋할때마다 이 정보를 사용 하기 때문에 반드시 설정해야하며, 한번 커밋한 후에는 정보를 변경할 수없다.</p><p>git bash 창을 열어서 아래 명령을 입력하자.<br>전역영역에 영구적으로 설정되므로 최초 한번만 설정 하면 된다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"사용자 명"</span></span><br><span class="line">$ git config --global user.email 사용자명@example.com</span><br></pre></td></tr></table></figure><p>아래 명령을 입력하여 방금 설정한 내용을 확인 할 수 있다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI - 좋은 빌드프로세스 요건</title>
      <link href="/2018/05/02/programing-etc-20180502-ci-what-is-a-good-build-process/"/>
      <url>/2018/05/02/programing-etc-20180502-ci-what-is-a-good-build-process/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180502-ci-what-is-a-good-build-process_1.png" alt="CI"></p><h3 id="1-빌드는-이식성이-있어야-한다"><a href="#1-빌드는-이식성이-있어야-한다" class="headerlink" title="1.빌드는 이식성이 있어야 한다."></a>1.빌드는 이식성이 있어야 한다.</h3><p>새로운 개발자도 IDE에 의존하지 않고 프로젝트의 소스 코드를 체크아웃할 수 있고, 빌드를 수행할 수 있어야 한다. 최근에 개발하는 OS와 빌드하는 OS가 다른 경우가 흔하다.</p><h3 id="2-개발자의-개입-없이도-한번에-빌드가-수행되어야-한다"><a href="#2-개발자의-개입-없이도-한번에-빌드가-수행되어야-한다" class="headerlink" title="2.개발자의 개입 없이도 한번에 빌드가 수행되어야 한다."></a>2.개발자의 개입 없이도 한번에 빌드가 수행되어야 한다.</h3><p>이것은 지속적인 통합(Continuous Integration)의 원칙 중 하나이다.<br>빌드 중에 개발자의 개입이나 수정이 필요한 빌드 프로세스는 프로세스가 쉽게 어긋나거나 깨지기 쉽다는 취약점을 가진다.</p><h3 id="3-빌드-프로세스는-몇몇-툴들과-프로세스로-구성되나-반드시-하나의-일관된-빌드-프로세스로-통합되어야-한다"><a href="#3-빌드-프로세스는-몇몇-툴들과-프로세스로-구성되나-반드시-하나의-일관된-빌드-프로세스로-통합되어야-한다" class="headerlink" title="3.빌드 프로세스는 몇몇 툴들과 프로세스로 구성되나, 반드시 하나의 일관된 빌드 프로세스로 통합되어야 한다."></a>3.빌드 프로세스는 몇몇 툴들과 프로세스로 구성되나, 반드시 하나의 일관된 빌드 프로세스로 통합되어야 한다.</h3><p>소프트웨어 애플리케이션 빌드는 코드 컴파일 과정,<br>단위/통합/기능 테스트 과정,<br>자동 코드 감사(code audits) 수행 과정,<br>애플리케이션을 실행 가능한 패키지로 생성하는 과정,<br>테스트환경 안으로 애플리케이션을 배치하는 과정,<br>그리고 기술 문서를 생성하는 과정으로 구성된다. </p><p>위와 같이 복잡한 빌드 과정들을 여러가지 툴을 이용하여 빌드를 할 때, 명확하게 설계되지 않은 빌드프로세스를 사용한다면 스파게티 소스코드처럼 후에 유지보수를 할수 없는 CI 시스템이 되어버린다.</p>]]></content>
      
      
      <categories>
          
          <category> programing_etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> continuous integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs의 방화벽 포트 허용</title>
      <link href="/2018/05/01/centOs-20180501-centOs-allow-firewall-port/"/>
      <url>/2018/05/01/centOs-20180501-centOs-allow-firewall-port/</url>
      
        <content type="html"><![CDATA[<p>CentOs에서 서비스를 실행 경우 서비스의 특정포트를 방화벽에서 해제해야 한다.<br>만약 3690 포트를 방화벽에 허용한다면 아래처럼 두줄의 명령얼 각각 실행하면 된다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=3690/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewall-cmd </tag>
            
            <tag> CentOs </tag>
            
            <tag> port </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7에 subversion 설치하고 저장소만들기</title>
      <link href="/2018/04/30/centOs-20180430-centos-install-subversion/"/>
      <url>/2018/04/30/centOs-20180430-centos-install-subversion/</url>
      
        <content type="html"><![CDATA[<h3 id="개발환경-및-시작하기"><a href="#개발환경-및-시작하기" class="headerlink" title="개발환경 및 시작하기"></a>개발환경 및 시작하기</h3><p>CentOs7(Nas 가상머신), putty</p><p><strong>CentOs7의 Selinux를 disabled 한 상태에서 진행함</strong></p><p>글에서 SubVersion 와 svn 이라는 단어를 혼용해서 사용함.</p><h3 id="Centos7-SubVersion-설치"><a href="#Centos7-SubVersion-설치" class="headerlink" title="Centos7 SubVersion 설치"></a>Centos7 SubVersion 설치</h3><p>아래 명령어를 입력해서 설치 할수 있는 subversion 을 확인해보자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list subversion</span><br></pre></td></tr></table></figure><h4 id="실행결과"><a href="#실행결과" class="headerlink" title="실행결과"></a>실행결과</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum list subversion</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.kakao.com</span><br><span class="line"> * extras: mirror.kakao.com</span><br><span class="line"> * updates: mirror.kakao.com</span><br><span class="line">Available Packages</span><br><span class="line">subversion.i686                             1.7.14-11.el7_4                           updates</span><br><span class="line">subversion.x86_64                           1.7.14-11.el7_4                           updates</span><br></pre></td></tr></table></figure><p>아래 명령어로 subversion 을 설치하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure><h4 id="실행결과-1"><a href="#실행결과-1" class="headerlink" title="실행결과"></a>실행결과</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Total                                                        1.3 MB/s | 1.9 MB  00:00:01</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : subversion-libs-1.7.14-11.el7_4.x86_64                                    1/2</span><br><span class="line">  Installing : subversion-1.7.14-11.el7_4.x86_64                                         2/2</span><br><span class="line">  Verifying  : subversion-libs-1.7.14-11.el7_4.x86_64                                    1/2</span><br><span class="line">  Verifying  : subversion-1.7.14-11.el7_4.x86_64                                         2/2</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  subversion.x86_64 0:1.7.14-11.el7_4</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  subversion-libs.x86_64 0:1.7.14-11.el7_4</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="SubVersion의-저장소들을-저장할-폴더를-생성하고-설정을-하자"><a href="#SubVersion의-저장소들을-저장할-폴더를-생성하고-설정을-하자" class="headerlink" title="SubVersion의 저장소들을 저장할 폴더를 생성하고 설정을 하자"></a>SubVersion의 저장소들을 저장할 폴더를 생성하고 설정을 하자</h3><p>서브버전에서 원격저장소를 저장할 최상위 폴더를 생성하자.<br>나는 CentOs의 root 경로에 svn_repos <strong>(/svn_repos)</strong> 라는 폴더를 만들었다. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv        sys  usr</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  svn_repos  tmp  var</span><br></pre></td></tr></table></figure><p>방금 생성한 폴더를 SubVersion에 설정해야 한다.<br>/etc/sysconfig/svnserve 파일을 vi로 열고 아래처럼 수정하자.</p><p>svnserve 파일에 방금 생성한 svn 저장소를 관리할 폴더를 지정한다. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/svnserve</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OPTIONS is used to pass command-line arguments to svnserve.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify the repository location in -r parameter:</span></span><br><span class="line">OPTIONS=<span class="string">"-r /svn_repos"</span></span><br></pre></td></tr></table></figure><h3 id="SubVersion-서비스-포트-방화벽-해제-설정"><a href="#SubVersion-서비스-포트-방화벽-해제-설정" class="headerlink" title="SubVersion 서비스 포트 방화벽 해제 설정"></a>SubVersion 서비스 포트 방화벽 해제 설정</h3><p>아래 명령어를 통해 SubVersion의 서비스 포트를 리눅스 방화벽에서 제외하자.<br>svn의 기본 포트는 3960이다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=3690/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="SubVersion-을-실행하자"><a href="#SubVersion-을-실행하자" class="headerlink" title="SubVersion 을 실행하자"></a>SubVersion 을 실행하자</h3><p><strong>SubVersion 실행 관련 명령어</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start svnserve.service <span class="comment">#실행</span></span><br><span class="line">systemctl stop svnserve.service <span class="comment">#중지</span></span><br><span class="line">systemctl restart svnserve.service <span class="comment">#재실행</span></span><br></pre></td></tr></table></figure><p><strong>svn 서비스 실행 및 확인</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start svnserve.service</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps -ef | grep svn</span></span><br><span class="line">root      8827     1  0 19:28 ?        00:00:00 /usr/bin/svnserve --daemon --pid-file=/run/svnserve/svnserve.pid -r /svn_repos</span><br><span class="line">root      9373  7879  0 19:28 pts/2    00:00:00 grep --color=auto svn</span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -anp | grep svnserve</span></span><br><span class="line">tcp        0      0 0.0.0.0:3690            0.0.0.0:*               LISTEN      8827/svnserve</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>ps -ef | grep svn</strong> : 서브 버전의 프로세스가 동작하는 것을 확인 할 수 있다.</p><p><strong>netstat -anp | grep svnserve</strong> : 서브버전 서비스의 포트를 확인할 수 있다. 기본적으로 3690 포트를 사용한다.</p><hr><h3 id="SubVersion에-테스트-저장소-생성"><a href="#SubVersion에-테스트-저장소-생성" class="headerlink" title="SubVersion에 테스트 저장소 생성"></a>SubVersion에 테스트 저장소 생성</h3><p>지금까지 SVN설치과 실행을 해보았다.<br>이제 실제 프로젝트의 단위가 될 svn 저장소를 만들어 보자</p><p><strong>1.테스트 저장소 생성</strong></p><p>아래 명령으로 TestStore1이라는 저장소를 생성하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost svn_repos]<span class="comment"># svnadmin create --fs-type fsfs TestStore1</span></span><br><span class="line">[root@localhost svn_repos]<span class="comment"># ls</span></span><br><span class="line">TestStore1</span><br><span class="line">[root@localhost svn_repos]<span class="comment"># cd TestStore1/</span></span><br><span class="line">[root@localhost TestStore1]<span class="comment"># ls</span></span><br><span class="line">README.txt  conf  db  format  hooks  locks</span><br></pre></td></tr></table></figure><p>자동으로 svn_repos 폴더에 TestStore1 저장소가 생긴것을 확인 할 수 있다.</p><p><strong>2.생성한 저장소 폴더 권한 수정</strong></p><p>방금 생성한 저장소의 폴더 권한을 수정한다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost svn_repos]<span class="comment"># chmod -R g+ws TestStore1</span></span><br><span class="line">[root@localhost svn_repos]<span class="comment"># ls -al</span></span><br><span class="line">합계 4</span><br><span class="line">drwxr-xr-x.  3 root root   23  4월 30 15:42 .</span><br><span class="line">dr-xr-xr-x. 18 root root 4096  5월  1 01:22 ..</span><br><span class="line">drwxrwsrwx.  6 root root   80  4월 30 15:42 TestStore1</span><br></pre></td></tr></table></figure><p>권한을 변경하지 않을 경우 root 이외에는 svn 명령어가 동작하지 않을수 있습니다.</p><h3 id="최초-생성한-subversion-저장소-설정"><a href="#최초-생성한-subversion-저장소-설정" class="headerlink" title="최초 생성한 subversion 저장소 설정"></a>최초 생성한 subversion 저장소 설정</h3><p>방금 생성한 TestStore1 저장소의 svnserve.conf 파일을 수정해야 한다.<br>이 파일은 SVN 서버를 실행할 때 해당 저장소에 접근할 수 있는 권한을 관리하는 설정 파일이다.<br>svnserve.conf의 위치는 저장소명/conf/svnserve.conf 이다.</p><p>기존 파일을 열어보면 anon-access, auth-access, password-db, authz-db 항목을 찾아 아래처럼 수정하자.<br>만약 해당 설정이 주석이 되어있다면 주석을 제거한다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### This file controls the configuration of the svnserve daemon, if you</span></span><br><span class="line"><span class="comment">### use it to allow access to this repository.  (If you only allow</span></span><br><span class="line"><span class="comment">### access through http: and/or file: URLs, then this file is</span></span><br><span class="line"><span class="comment">### irrelevant.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Visit http://subversion.apache.org/ for more information.</span></span><br><span class="line"></span><br><span class="line">[general]</span><br><span class="line"><span class="comment">### The anon-access and auth-access options control access to the</span></span><br><span class="line"><span class="comment">### repository for unauthenticated (a.k.a. anonymous) users and</span></span><br><span class="line"><span class="comment">### authenticated users, respectively.</span></span><br><span class="line"><span class="comment">### Valid values are "write", "read", and "none".</span></span><br><span class="line"><span class="comment">### Setting the value to "none" prohibits both reading and writing;</span></span><br><span class="line"><span class="comment">### "read" allows read-only access, and "write" allows complete</span></span><br><span class="line"><span class="comment">### read/write access to the repository.</span></span><br><span class="line"><span class="comment">### The sample settings below are the defaults and specify that anonymous</span></span><br><span class="line"><span class="comment">### users have read-only access to the repository, while authenticated</span></span><br><span class="line"><span class="comment">### users have read and write access to the repository.</span></span><br><span class="line">anon-access = <span class="built_in">read</span></span><br><span class="line">auth-access = write</span><br><span class="line"><span class="comment">### The password-db option controls the location of the password</span></span><br><span class="line"><span class="comment">### database file.  Unless you specify a path starting with a /,</span></span><br><span class="line"><span class="comment">### the file's location is relative to the directory containing</span></span><br><span class="line"><span class="comment">### this configuration file.</span></span><br><span class="line"><span class="comment">### If SASL is enabled (see below), this file will NOT be used.</span></span><br><span class="line"><span class="comment">### Uncomment the line below to use the default password file.</span></span><br><span class="line">password-db = passwd</span><br><span class="line"><span class="comment">### The authz-db option controls the location of the authorization</span></span><br><span class="line"><span class="comment">### rules for path-based access control.  Unless you specify a path</span></span><br><span class="line"><span class="comment">### starting with a /, the file's location is relative to the the</span></span><br><span class="line"><span class="comment">### directory containing this file.  If you don't specify an</span></span><br><span class="line"><span class="comment">### authz-db, no path-based access control is done.</span></span><br><span class="line"><span class="comment">### Uncomment the line below to use the default authorization file.</span></span><br><span class="line">authz-db = authz</span><br><span class="line"><span class="comment">### This option specifies the authentication realm of the repository.</span></span><br><span class="line"><span class="comment">### If two repositories have the same authentication realm, they should</span></span><br><span class="line"><span class="comment">### have the same password database, and vice versa.  The default realm</span></span><br><span class="line"><span class="comment">### is repository's uuid.</span></span><br><span class="line"><span class="comment"># realm = My First Repository</span></span><br><span class="line"><span class="comment">### The force-username-case option causes svnserve to case-normalize</span></span><br><span class="line"><span class="comment">### usernames before comparing them against the authorization rules in the</span></span><br><span class="line"><span class="comment">### authz-db file configured above.  Valid values are "upper" (to upper-</span></span><br><span class="line"><span class="comment">### case the usernames), "lower" (to lowercase the usernames), and</span></span><br><span class="line"><span class="comment">### "none" (to compare usernames as-is without case conversion, which</span></span><br><span class="line"><span class="comment">### is the default behavior).</span></span><br><span class="line"><span class="comment"># force-username-case = none</span></span><br><span class="line"></span><br><span class="line">[sasl]</span><br><span class="line"><span class="comment">### This option specifies whether you want to use the Cyrus SASL</span></span><br><span class="line"><span class="comment">### library for authentication. Default is false.</span></span><br><span class="line"><span class="comment">### This section will be ignored if svnserve is not built with Cyrus</span></span><br><span class="line"><span class="comment">### SASL support; to check, run 'svnserve --version' and look for a line</span></span><br><span class="line"><span class="comment">### reading 'Cyrus SASL authentication is available.'</span></span><br><span class="line"><span class="comment"># use-sasl = true</span></span><br><span class="line"><span class="comment">### These options specify the desired strength of the security layer</span></span><br><span class="line"><span class="comment">### that you want SASL to provide. 0 means no encryption, 1 means</span></span><br><span class="line"><span class="comment">### integrity-checking only, values larger than 1 are correlated</span></span><br><span class="line"><span class="comment">### to the effective key length for encryption (e.g. 128 means 128-bit</span></span><br><span class="line"><span class="comment">### encryption). The values below are the defaults.</span></span><br><span class="line"><span class="comment"># min-encryption = 0</span></span><br><span class="line"><span class="comment"># max-encryption = 256</span></span><br></pre></td></tr></table></figure><p><strong>anon-acess</strong>: 로그인 하지 않은 사용자에게 접근 권한을 설정하는 부분이다. read, write, none 세가지 값을 설정 할 수 있다.<br><strong>auth-acess</strong>: 로그인한 사용자에 대한 접근 권한을 설정하는 부분이다. read, write, none 세가지 값을 설정 할 수 있다.<br><strong>passwd-db</strong>: 저장소에 접근할 사용자 계정과 비밀번호를 관리할 파일의 이름을 지정하는 설정이다. 기본 파일명은 passwd를 사용하며, 다른 이름을 사용할 수 있다.<br><strong>authz-db</strong>: 파일과 디렉토리에 대한 접근 권한을 관리하는 파일의 이름을 지정하는 설정이다. 기본파일명은 authz를 사용하며, 다른 이름을 사용할 수 있다. </p><p>위 네가지 항목중 anon-access, auth-access, passwd-db 항목은 필수 설정이며, authz-db는 생략 가능하다.</p><p>아래처럼 자동으로 저장소를 생성할때 authz, passwd파일도 같이 생성되어 있는 것을 확인 할 수 있다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># pwd</span></span><br><span class="line">/svn_repos/TestStore1/conf</span><br><span class="line">[root@localhost conf]<span class="comment"># ls -al</span></span><br><span class="line">합계 12</span><br><span class="line">drwxr-xr-x. 2 root root   51  4월 30 15:48 .</span><br><span class="line">drwxr-xr-x. 6 root root   80  4월 30 15:42 ..</span><br><span class="line">-rw-r--r--. 1 root root 1080  4월 30 15:42 authz</span><br><span class="line">-rw-r--r--. 1 root root  309  4월 30 15:42 passwd</span><br><span class="line">-rw-r--r--. 1 root root 3168  4월 30 15:48 svnserve.conf</span><br></pre></td></tr></table></figure><h3 id="passwd에-저장소에-접근할-계정정보를-추가하자"><a href="#passwd에-저장소에-접근할-계정정보를-추가하자" class="headerlink" title="passwd에 저장소에 접근할 계정정보를 추가하자"></a>passwd에 저장소에 접근할 계정정보를 추가하자</h3><p>위의 passwd 파일을 열어 아래처럼 수정하자</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### This file is an example password file for svnserve.</span></span><br><span class="line"><span class="comment">### Its format is similar to that of svnserve.conf. As shown in the</span></span><br><span class="line"><span class="comment">### example below it contains one section labelled [users].</span></span><br><span class="line"><span class="comment">### The name and password for each user follow, one account per line.</span></span><br><span class="line"></span><br><span class="line">[users]</span><br><span class="line">admin = admin</span><br></pre></td></tr></table></figure><p>admin이라는 계정에 admin 이라는 비밀번호를 설정했다<br>아이디 = 비밀번호 형태로 사용자명과 비밀번호를 추가하면 된다.</p><h3 id="authz파일에-저장소에-접근할-계정정보를-추가하자"><a href="#authz파일에-저장소에-접근할-계정정보를-추가하자" class="headerlink" title="authz파일에 저장소에 접근할 계정정보를 추가하자"></a>authz파일에 저장소에 접근할 계정정보를 추가하자</h3><p>authz 다음 스크립트를 하단에 추가하자</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[/]</span><br><span class="line">* = r  <span class="comment">#TestStore1저장소의 루트경로에 모든 사용자가 read 할수 있는 권한을 부여</span></span><br><span class="line">root = rw <span class="comment">#TestStore1저장소의 루트경로에 root 계정은 read, write 권한 부여</span></span><br><span class="line">admin = rw <span class="comment">#TestStore1저장소의 루트경로에 admin 계정은 read, write 권한 부여</span></span><br></pre></td></tr></table></figure><p>지금까지 svn의 저장소 생성과 설정을 하였다.</p><h3 id="생성한-저장소-확인하기"><a href="#생성한-저장소-확인하기" class="headerlink" title="생성한 저장소 확인하기"></a>생성한 저장소 확인하기</h3><p>아래 명령어를 이용하여 svn의 저장소 정보를 확인 할 수 있다.<br><strong>주의:SeLinux가 활성화 되어있는 경우 svn저장소 접근이 안된다. 나는 SeLinux 설정을 disabled 하였다.(테스트 환경이이라 스스로 변명한다.)</strong></p><h4 id="CentOs7-selunix-disabled-하기"><a href="#CentOs7-selunix-disabled-하기" class="headerlink" title="CentOs7 selunix disabled 하기"></a>CentOs7 selunix disabled 하기</h4><p>/etc/selinux/config 파일을 열어 수정하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># vi /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><p>SELINUX 항목을 disalbed 설정하면 된다.</p><h3 id="svn-저장소-확인-명령어"><a href="#svn-저장소-확인-명령어" class="headerlink" title="svn 저장소 확인 명령어"></a>svn 저장소 확인 명령어</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn list svn://저장소ip/저장소명</span><br><span class="line">svn info svn://저장소ip/저장소명</span><br></pre></td></tr></table></figure><p>실행결과</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># svn list svn://127.0.0.1/TestStore1</span></span><br><span class="line">asdfadf</span><br><span class="line">[root@localhost conf]<span class="comment"># svn info svn://127.0.0.1/TestStore1</span></span><br><span class="line">경로: TestStore1</span><br><span class="line">URL: svn://127.0.0.1/TestStore1</span><br><span class="line">저장소 루트: svn://127.0.0.1/TestStore1</span><br><span class="line">저장소 UUID: 34f9c9c8-3847-47ce-8317-dc2485562f5e</span><br><span class="line">리비전: 1</span><br><span class="line">노드 종류: 디렉토리</span><br><span class="line">마지막 수정 작업자: admin</span><br><span class="line">마지막 수정 리비전: 1</span><br><span class="line">마지막 수정 일자: 2018-04-30 17:28:43 +0900 (2018-04-30, 월)</span><br></pre></td></tr></table></figure><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>지금까지 centos에 subversion(svn) 설치하고 원격저장소를 생성하고 그 결과를 확인했다.</p><p>이클립스와 같은 개발툴에서 방금 생성한 저장소인 svn://127.0.0.1/TestStore1 에 url로 접속해 보면 접속이 가능한 것을 확인 할 수 있다.</p><p>물론 이번 예제를 따라했다면 root/root, admin/admin 계정을 사용해야 할 것이다.</p><p>Subversion과 apache를 연동하여 저장소의 접속 url을 svn이 아니라 http로 접근하는 방법이 있는 것 같은데, 그것은 나중에 한번 해봐야 겠다.</p><h4 id="추가-서버동작시-svn-서비스-자동-실행하기"><a href="#추가-서버동작시-svn-서비스-자동-실행하기" class="headerlink" title="추가 서버동작시 svn 서비스 자동 실행하기"></a>추가 서버동작시 svn 서비스 자동 실행하기</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost svn]<span class="comment"># systemctl enable svnserve.service</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> CentOs7 </tag>
            
            <tag> subversion </tag>
            
            <tag> install </tag>
            
            <tag> firewall-cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7에 jdk 설치 및 환경변수(JAVA_HOME)설정</title>
      <link href="/2018/04/30/centOs-20180430-centos-install-jdk/"/>
      <url>/2018/04/30/centOs-20180430-centos-install-jdk/</url>
      
        <content type="html"><![CDATA[<h3 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h3><p>CentOs7(Nas 가상머신), putty, yum</p><h3 id="CentOs7-jdk-설치하기"><a href="#CentOs7-jdk-설치하기" class="headerlink" title="CentOs7 jdk 설치하기"></a>CentOs7 jdk 설치하기</h3><p>centOs의 쉘에 아래 명령으로 현재 설치가능한 jdk 버전확인</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list java*jdk-devel</span><br></pre></td></tr></table></figure><p><strong>실행결과</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum list java*jdk-devel</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * base: mirror.kakao.com</span><br><span class="line"> * extras: mirror.kakao.com</span><br><span class="line"> * updates: mirror.kakao.com</span><br><span class="line">Available Packages</span><br><span class="line">java-1.6.0-openjdk-devel.x86_64              1:1.6.0.41-1.13.13.1.el7_3               base</span><br><span class="line">java-1.7.0-openjdk-devel.x86_64              1:1.7.0.171-2.6.13.0.el7_4               updates</span><br><span class="line">java-1.8.0-openjdk-devel.i686                1:1.8.0.161-0.b14.el7_4                  updates</span><br><span class="line">java-1.8.0-openjdk-devel.x86_64              1:1.8.0.161-0.b14.el7_4                  updates</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>조회된 결과중에 java-1.8.0-openjdk-devel.x86_64 버전을 설치해보자<br>쉘에 아래 명령어를 입력하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><p>뭔가 진행이되며 중간중간 뭔가를 물어보는데 y를 눌러주면서 진행하면 된다.<br>생각보다 시간이 좀 걸린다.</p><p><strong>실행결과</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">'생략...'</span></span><br><span class="line">  Verifying  : 1:java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64                 22/25</span><br><span class="line">  Verifying  : nss-softokn-freebl-3.16.2.3-13.el7_1.x86_64                             23/25</span><br><span class="line">  Verifying  : nspr-4.10.8-2.el7_1.x86_64                                              24/25</span><br><span class="line">  Verifying  : nss-util-3.19.1-4.el7_1.x86_64                                          25/25</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  java-1.8.0-openjdk-devel.x86_64 1:1.8.0.161-0.b14.el7_4</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  copy-jdk-configs.noarch 0:2.2-5.el7_4             nss-pem.x86_64 0:1.0.3-4.el7</span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  chkconfig.x86_64 0:1.7.4-1.el7</span><br><span class="line">  java-1.8.0-openjdk.x86_64 1:1.8.0.161-0.b14.el7_4</span><br><span class="line">  java-1.8.0-openjdk-headless.x86_64 1:1.8.0.161-0.b14.el7_4</span><br><span class="line">  nspr.x86_64 0:4.13.1-1.0.el7_3</span><br><span class="line">  nss.x86_64 0:3.28.4-15.el7_4</span><br><span class="line">  nss-softokn.x86_64 0:3.28.3-8.el7_4</span><br><span class="line">  nss-softokn-freebl.x86_64 0:3.28.3-8.el7_4</span><br><span class="line">  nss-sysinit.x86_64 0:3.28.4-15.el7_4</span><br><span class="line">  nss-tools.x86_64 0:3.28.4-15.el7_4</span><br><span class="line">  nss-util.x86_64 0:3.28.4-3.el7</span><br><span class="line">  ntsysv.x86_64 0:1.7.4-1.el7</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="CentOs7-jdk-설치-결과-확인"><a href="#CentOs7-jdk-설치-결과-확인" class="headerlink" title="CentOs7 jdk 설치 결과 확인"></a>CentOs7 jdk 설치 결과 확인</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># javac -version</span></span><br><span class="line">javac 1.8.0_161</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qa java*jdk-devel</span></span><br><span class="line">java-1.8.0-openjdk-devel-1.8.0.161-0.b14.el7_4.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>위 처럼 jdk 설치 완료를 확인 할 수 있다.</p><hr><h3 id="CentOs7-jdk-환경변수-설정"><a href="#CentOs7-jdk-환경변수-설정" class="headerlink" title="CentOs7 jdk 환경변수 설정"></a>CentOs7 jdk 환경변수 설정</h3><p>일단 현재 JAVA_HOME이 설정 되어 있는지 확인하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $JAVA_HOME</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>JAVA_HOME이 설정이 안되어 있는 것을 확인했다.</p><h3 id="javac-위치-확인"><a href="#javac-위치-확인" class="headerlink" title="javac 위치 확인"></a>javac 위치 확인</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which javac</span></span><br><span class="line">/usr/bin/javac</span><br><span class="line">[root@localhost ~]<span class="comment"># readlink -f /usr/bin/javac</span></span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/bin/javac</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>which javac라는 명령어는 javac라는 명령어의 위치를 알려달라는 말이다.<br>/usr/bin/javac 는 심볼릭 링크 이므로 원본 파일의 위치를 찾기 위해 readlink -f /usr/bin/javac 명령어를 사용하였다.<br>readlink -f는 심볼릭 링크에서 원본파일을 추출하는 명령어 이다.<br>즉 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/bin/javac 가 쉘에서 동작하고 있는 javac명령어의 원본파일이다.<br><strong>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64</strong> 가 JAVA_HOME이 될 경로가 된다.</p><h3 id="JAVA-HOME-설정"><a href="#JAVA-HOME-설정" class="headerlink" title="$JAVA_HOME 설정"></a>$JAVA_HOME 설정</h3><p>실제 javac명령어의 경로를 찾았으니 그 경로를 이용하여 JAVA_HOME 환경변수로 등록하도록 하자.<br>환경변수를 설정할수 있는 profile 이라는 파일을 vi 편집기로 열자</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>해당 파일의 하단에 아래 내용을 추가한뒤 저장하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64</span><br></pre></td></tr></table></figure><p>파일을 저장한뒤 아래 명령어를 이용하여 수정한 파일을 적용하자.<br>ssh를 재접속 해도 되지만 아래 방법이 더 편하다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>아래처럼 JAVA_HOME 재대로 적용되었는지 확인해 보자.\</p><p><strong>실행결과</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $JAVA_HOME</span></span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment"># $JAVA_HOME/bin/javac -version</span></span><br><span class="line">javac 1.8.0_161</span><br></pre></td></tr></table></figure><p>끝!</p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> CentOs7 </tag>
            
            <tag> JAVA_HOME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Controller Junit test 하기</title>
      <link href="/2018/04/29/spring-20180429-spring-mvc-junit-test/"/>
      <url>/2018/04/29/spring-20180429-spring-mvc-junit-test/</url>
      
        <content type="html"><![CDATA[<h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p>스프링 MVC 프로젝트에서 spring-test 라이브러리를 사용하면 WAS없이 컨트롤러의 동작을 테스트 할 수 있다.<br>즉, was 구동 없이 존재하는 controller에 request를 만들어 날리는 테스트 로직을 만들어 수행 시킬 수 있다.</p><p>개발시 화면동작을 테스트 하기 위해 브라우저에서 수많은 파라미터를 수작업으로 반복 입력하는 경우가 많은데,<br>spring-test 라이브러리르 사용하여 Junit테스트로 Controller를 검사한다면 적어도 벡엔드 컨트롤러에 대한 노가다 테스트를 피할수 있다.</p><h3 id="Spring-Controller-test-코드-만들기"><a href="#Spring-Controller-test-코드-만들기" class="headerlink" title="Spring Controller test 코드 만들기"></a>Spring Controller test 코드 만들기</h3><p>/src/test/java 경로에 SampleControllerTest.java 파일을 아래처럼 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hanumoka.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebAppConfiguration</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span></span><br><span class="line"><span class="class"><span class="title">locations</span> </span>=&#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/**/*.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SampleControllerTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">private</span> WebApplicationContext wac;</span><br><span class="line">  <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.wac).build();</span><br><span class="line">    logger.info(<span class="string">"setup............"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoA</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/doA"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 파일을 Junit으로 동작 시켰을때, was의 기동 없이 스프링프로젝트의 /doA 컨트롤러에 get 방식 리퀘스트 테스트를 한다.</p><p>하지만 아래처럼 오류가 발생할 수도 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ERROR: org.springframework.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@5d5eef3d] to prepare test instance [org.hanumoka.web.SampleControllerTest@7fac631b]</span><br><span class="line">java.lang.NoClassDefFoundError: javax&#x2F;servlet&#x2F;SessionCookieConfig</span><br><span class="line">at org.springframework.test.context.web.AbstractGenericWebContextLoader.configureWebResources(AbstractGenericWebContextLoader.java:201)</span><br><span class="line">at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:128)</span><br><span class="line">at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:61)</span><br><span class="line">at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108)</span><br><span class="line">at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251)</span><br><span class="line">at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)</span><br><span class="line">at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)</span><br><span class="line">at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)</span><br><span class="line">at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:189)</span><br><span class="line">at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:131)</span><br><span class="line">at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)</span><br></pre></td></tr></table></figure><p>위 오류가 나는 이유는 servlet-api의 버전이 안맞기 때문이다.<br>pom.xml에서 servlet-api라이브러리를 아래 javax.servlet-api 최신 버전으로 교체 한뒤 테스트를 하면 정상 동작을 확인 할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Servlet : 구버전 라이브러리를 주석 처리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;version&gt;2.5&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;scope&gt;provided&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 최신 라이브러리 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-mvc-junit-test_1.png" alt="spring controller junit request 테스트 결과"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Framework </tag>
            
            <tag> Controller </tag>
            
            <tag> Junit </tag>
            
            <tag> Spring-test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Controller에서 JSON 데이터 리턴하기</title>
      <link href="/2018/04/29/spring-20180429-spring-controller-return-json/"/>
      <url>/2018/04/29/spring-20180429-spring-controller-return-json/</url>
      
        <content type="html"><![CDATA[<h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p>Spring Controller에서 JSON 데이터를 생성해서 response하기</p><h3 id="Spring-프로젝트의-pom-xml에-jackson-databind-라이브러리-추가"><a href="#Spring-프로젝트의-pom-xml에-jackson-databind-라이브러리-추가" class="headerlink" title="Spring 프로젝트의 pom.xml에 jackson-databind 라이브러리 추가"></a>Spring 프로젝트의 pom.xml에 jackson-databind 라이브러리 추가</h3><p>아래 내용을 pom.xml 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Controller에서-JSON-데이터를-만들어-response-하기"><a href="#Spring-Controller에서-JSON-데이터를-만들어-response-하기" class="headerlink" title="Spring Controller에서 JSON 데이터를 만들어 response 하기"></a>Spring Controller에서 JSON 데이터를 만들어 response 하기</h3><p>@ResponseBody 어노테이션을 통해 JSON으로 reponse에 던질 객체를 그냥 리턴하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doC"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">JsonTestVO <span class="title">doC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">JsonTestVO vo = <span class="keyword">new</span> JsonTestVO();</span><br><span class="line">vo.name=<span class="string">"제이슨 데이터 이다."</span>;</span><br><span class="line">vo.age=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-controller-return-json_1.png" alt="Spring Controller에서 JSON 데이터 리턴 결과 화면"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Framework </tag>
            
            <tag> Controller </tag>
            
            <tag> JSON </tag>
            
            <tag> ResponseBody </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring RedirectAttributes(Spring Controller에서 redirect 하기)</title>
      <link href="/2018/04/29/spring-20180429-spring-RedirectAttributes/"/>
      <url>/2018/04/29/spring-20180429-spring-RedirectAttributes/</url>
      
        <content type="html"><![CDATA[<h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p>스프링 웹 프로젝트를 개발할 때 가끔 컨트롤러에서 다른 컨트롤러로 redirect 처리해야 할 경우가 있다. </p><h3 id="Spring-Controller에서-redirect-처리하기"><a href="#Spring-Controller에서-redirect-처리하기" class="headerlink" title="Spring Controller에서 redirect 처리하기"></a>Spring Controller에서 redirect 처리하기</h3><p>간단하게 컨트롤러에서 return 값을 <strong>redirect:/경로</strong> 로 처리하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doA called..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/doB"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doB"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doB called..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Controller에서-redirect-처리시-파라미터-넘기기-RedirectAttributes"><a href="#Spring-Controller에서-redirect-처리시-파라미터-넘기기-RedirectAttributes" class="headerlink" title="Spring Controller에서 redirect 처리시 파라미터 넘기기(RedirectAttributes)"></a>Spring Controller에서 redirect 처리시 파라미터 넘기기(RedirectAttributes)</h3><p>Spring Controller doA에에서 doB 컨트롤러로 리다이렉트 할때 파라미터를 넘겨야 할 경우 RedirectAttributes 를 사용하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doA</span><span class="params">(RedirectAttributes rttr)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doA called..."</span>);</span><br><span class="line"></span><br><span class="line">rttr.addFlashAttribute(<span class="string">"msg"</span>, <span class="string">"리다이렉트시 전달할 메세지"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/doB"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doB"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doB</span><span class="params">(@ModelAttribute String msg)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"doB called... msg:"</span>+ msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-RedirectAttributes_1.png" alt="doA 컨트롤러에 브라우저 접속시 결과"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> controller </tag>
            
            <tag> RedirectAttributes </tag>
            
            <tag> redirect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringFramework MyBatis MySQL 연동하기</title>
      <link href="/2018/04/29/spring-20180429-spring-mybatis-mysql-setting/"/>
      <url>/2018/04/29/spring-20180429-spring-mybatis-mysql-setting/</url>
      
        <content type="html"><![CDATA[<h3 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h3><p>windows10 pro, STS, jdk1.8, mysql8(docker), mysql workbench 8</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/04/07/spring-install-sts/">1.STS로 Spring 프레임워크 개발환경셋팅</a><br><a href="/2018/04/08/spring-start-spring-legacy-project/">2.Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</a><br><a href="/2018/04/18/spring-set-korean/">3.spring mvc 프로젝트 한글설정(utf8)</a></p><p><a href="/2018/04/28/windows10pro-install-docker/">4.Windows10pro docker 설치하기</a><br><a href="/2018/04/29/docker-install-mysql/">5.Docker에서 mysql설치하고 접속해보기</a></p><p><a href="/2018/04/29/spring-mysql-junit-connection-test/">6.Spring 프로젝트 mysql접속 junit 테스트 하기</a><br><a href="/2018/04/29/spring-mybatis-mysql-setting/">7.SpringFramework MyBatis MySQL 연동하기</a></p><hr><h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p>STS의 스프링 MVC프로젝트와 docker에 설치한 mysql을 이용하여, 스프링 + MyBatis + MySLQ 설정을 해보자</p><p><img src="/images/20180429-spring-mybatis-mysql-setting_1.png" alt="MyBatis 구성도"></p><h3 id="스프링-프로젝트에-라이브러리-추가"><a href="#스프링-프로젝트에-라이브러리-추가" class="headerlink" title="스프링 프로젝트에 라이브러리 추가"></a>스프링 프로젝트에 라이브러리 추가</h3><p>pom.xml 아래 라이브러리들을 추가하자.</p><p><strong>1.MyBatis</strong><br>mybatis 라이브러리</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.MyBatis-Spring</strong><br>Spring과 MyBatis를 연결하는 라이브러리</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.spring-jdbc</strong><br>Spring의 jdbc 라이브러리</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4.spring-test</strong><br>Spring과 MyBatis의 정상적인 접속을 확인하기 위한 Spring junit test를 하기 위해 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Spring-프로젝트의-root-context-xml-파일-수정"><a href="#Spring-프로젝트의-root-context-xml-파일-수정" class="headerlink" title="Spring 프로젝트의 root-context.xml 파일 수정"></a>Spring 프로젝트의 root-context.xml 파일 수정</h3><p><strong>root-context.xml파일 네임스페이스 추가</strong><br>aop, context, jdbc, mybatis-spring 네임스페이스 추가하자.<br>앞서 pom.xml에 라이브러리를 추가 했기 때문에 mybatis-spring와 같은 네임스페이스가 root-context.xml의 Namepaces 항목에 자동으로 보이게 되며, 간단히 클릭후 파일을 저장하면 된다.<br>(이걸 여태 몰라 난 일일이 웹에서 네임스페이스를 찾아 타이핑을 했더랬다.)</p><p><img src="/images/20180429-spring-mybatis-mysql-setting_2.png" alt="root-context.xml에 네임스페이스 추가화면"><br>위에서 처럼 해당 네임스페이스를 선택한뒤 root-context.xml파일을 저장하면 자동으로 아래처럼 소스가 저장된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mybatis-spring</span>=<span class="string">"http://mybatis.org/schema/mybatis-spring"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Root Context: defines shared resources visible to all other web components --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Spring-프로젝트의-root-context-xml에-datasource-설정"><a href="#Spring-프로젝트의-root-context-xml에-datasource-설정" class="headerlink" title="Spring 프로젝트의 root-context.xml에 datasource 설정"></a>Spring 프로젝트의 root-context.xml에 datasource 설정</h3><p>root-context.xml파일에 spring jdbc를 이용하여 datasource를 설정하자.<br>접속하려는 db URL, db user 이름 비밀번호 정보가 필요하다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/hanumoka_spring_template?useSSL=false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"hanumoka"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="DataSource-테스트"><a href="#DataSource-테스트" class="headerlink" title="DataSource 테스트"></a>DataSource 테스트</h3><p>지금까지 진행한 설정을 spring-test를 통해 단위테스트를 진행하자.<br>spring-test 모듈의 장점은 spring 테스트를 할때 was상에서 하지 않기 때문에 가볍고, was에 고립된 테스트를 할 수 있따.</p><p><strong>1.DataSourceTest.java 파일 작성</strong><br>스프링 프로젝트의 src/test/java 에 DataSourceTest.java 파일을 생성하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hanumoka.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= &#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/**/root-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> DataSource ds;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">try</span>(Connection con = ds.getConnection())&#123;</span><br><span class="line">System.out.println(con);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="comment">//try_</span></span><br><span class="line">&#125;<span class="comment">//test_</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>간단히 소스를 설명하자면,</p><h4 id="RunWith-SpringJUnit4ClassRunner-class"><a href="#RunWith-SpringJUnit4ClassRunner-class" class="headerlink" title="@RunWith(SpringJUnit4ClassRunner.class)"></a>@RunWith(SpringJUnit4ClassRunner.class)</h4><p>는 Spring 테스트용 컨테이너를 사용하겠다는 의미이다.</p><h4 id="ContextConfiguration-locations-“file-src-main-webapp-WEB-INF-spring-root-context-xml”"><a href="#ContextConfiguration-locations-“file-src-main-webapp-WEB-INF-spring-root-context-xml”" class="headerlink" title="@ContextConfiguration(locations = {“file:src/main/webapp/WEB-INF/spring/**/root-context.xml”})"></a>@ContextConfiguration(locations = {“file:src/main/webapp/WEB-INF/spring/**/root-context.xml”})</h4><p>는 테스트용 Spring 컨테이너에서 사용할 설정파일들을 지정한다.</p><p>위 파일을 junit으로 실행하여 Spring 프레임워크에서 DataSource가 정상적으로 주입되고 커넥션을 가져오는지 확인하자.</p><p><img src="/images/20180429-spring-mybatis-mysql-setting_3.png" alt="Spring DataSource junit 테스트"></p><hr><h3 id="Spring-프레임워크에-MyBatis-설정-셋팅"><a href="#Spring-프레임워크에-MyBatis-설정-셋팅" class="headerlink" title="Spring 프레임워크에 MyBatis 설정 셋팅"></a>Spring 프레임워크에 MyBatis 설정 셋팅</h3><h4 id="1-SqlSessionFactory-객체-설정"><a href="#1-SqlSessionFactory-객체-설정" class="headerlink" title="1.SqlSessionFactory 객체 설정"></a>1.SqlSessionFactory 객체 설정</h4><p>root-context.xml 파일에 SqlSessionFactoryBean bean을 추가하자.<br>SqlSessionFactoryBean는 MyBatis에서 SqlSessionFactory를 생성하는 빈이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-mybatis-config-xml-파일-추가"><a href="#2-mybatis-config-xml-파일-추가" class="headerlink" title="2.mybatis-config.xml 파일 추가"></a>2.mybatis-config.xml 파일 추가</h4><p>mybatis-config.xml을 src/main/resources에 추가하자.<br>이 파일은 SQL Mapping정보등 스프링의 설정과 별도의 MyBatis의 설정 기능을 저장하는 용도의 파일이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-mybatis-mysql-setting_4.png" alt="mybatis-config.xml 파일"></p><h4 id="3-mybatis-config-xml-파일을-root-context-xml-에-추가"><a href="#3-mybatis-config-xml-파일을-root-context-xml-에-추가" class="headerlink" title="3.mybatis-config.xml 파일을 root-context.xml 에 추가"></a>3.mybatis-config.xml 파일을 root-context.xml 에 추가</h4><p>방금 생성한 mybatis-config.xml파일이 스프링 프레임워크가 동작할때 주입되게 설정이 필요하다.<br>root-context.xml의 sqlSessionFactory의 프로퍼티로 mybatis-config.xml을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-mybatis-mysql-setting_5.png" alt="root-context.xml를 수정하자"></p><h4 id="4-mybatis-연결-테스트"><a href="#4-mybatis-연결-테스트" class="headerlink" title="4.mybatis 연결 테스트"></a>4.mybatis 연결 테스트</h4><p>mybatis의 SqlSessionFactory를 통해서 MySql에 접속하여 SqlSession객체가 생성되는지 테스트 해보자.<br>src/test/java 에 MyBatisTest.java 를 생성하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hanumoka.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= &#123;<span class="string">"file:src/main/webapp/WEB-INF/spring/**/root-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(sqlFactory);</span><br><span class="line">&#125;<span class="comment">//testFactory_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSession</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">try</span>(SqlSession session = sqlFactory.openSession())&#123;</span><br><span class="line">System.out.println(session);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//testSession_</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성한 파일을 junit테스트를 통해 테스트 하자.<br><img src="/images/20180429-spring-mybatis-mysql-setting_6.png" alt="spring mybatis mysql 설정 테스트 결과"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Framework </tag>
            
            <tag> MyBatis </tag>
            
            <tag> MySQl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 프로젝트 mysql접속 junit 테스트 하기</title>
      <link href="/2018/04/29/spring-20180429-spring-mysql-junit-connection-test/"/>
      <url>/2018/04/29/spring-20180429-spring-mysql-junit-connection-test/</url>
      
        <content type="html"><![CDATA[<h3 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h3><p>windows10 pro, STS, jdk1.8, mysql8(docker), mysql workbench 8</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/04/07/spring-install-sts/">1.STS로 Spring 프레임워크 개발환경셋팅</a><br><a href="/2018/04/08/spring-start-spring-legacy-project/">2.Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</a><br><a href="/2018/04/18/spring-set-korean/">3.spring mvc 프로젝트 한글설정(utf8)</a></p><p><a href="/2018/04/28/windows10pro-install-docker/">4.Windows10pro docker 설치하기</a><br><a href="/2018/04/29/docker-install-mysql/">5.Docker에서 mysql설치하고 접속해보기</a></p><p><a href="/2018/04/29/spring-mysql-junit-connection-test/">6.Spring 프로젝트 mysql접속 junit 테스트 하기</a><br><a href="/2018/04/29/spring-mybatis-mysql-setting/">7.SpringFramework MyBatis MySQL 연동하기</a></p><hr><h3 id="MySql-스키마-생성-및-db-계정-생성"><a href="#MySql-스키마-생성-및-db-계정-생성" class="headerlink" title="MySql 스키마 생성 및 db 계정 생성"></a>MySql 스키마 생성 및 db 계정 생성</h3><p><img src="/images/20180429-spring-mysql-junit-connection-test_1.png" alt="MySql Workbench에서 SCHEMAS영역에 마우스 우클릭 -&gt; Create Schema... 클릭"></p><p><img src="/images/20180429-spring-mysql-junit-connection-test_2.png" alt="생성할 스키마 명을 입력한뒤 Apply 버튼 클릭"></p><p>스키마 생성 스크립트 수정창이 아래처럼 뜨면 아래처럼 CHARACTER SET을 utf8로 설정하자</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCHEMA '스키마명' DEFAULT CHARACTER <span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-mysql-junit-connection-test_3.png" alt="스키마 생성 스크립트 수정후 Apply 버튼 클릭"></p><p>생성된 스키마를 확인 하고, 방금 생성한 스키마를 사용할 db 계정을 만들어 보자</p><p><img src="/images/20180429-spring-mysql-junit-connection-test_4.png" alt="MANAGEMENT에서 Users and Privilege를 클릭하자"></p><p><img src="/images/20180429-spring-mysql-junit-connection-test_5.png" alt="Add Accout 클릭 -&gt; 생성할 db 계정명과 비밀번호 입력후 Apply 클릭"></p><p><img src="/images/20180429-spring-mysql-junit-connection-test_6.png" alt="생성한 계정을 클릭 -&gt; Schema Privileges 클릭 -&gt; Selected schema 선택 후 사용할 스키마를 셀랙트박스에서 클릭 -&gt; OK 버튼 클릭"></p><hr><h3 id="Spring-프로젝트에-MySql-JDBC-커넥터-설정"><a href="#Spring-프로젝트에-MySql-JDBC-커넥터-설정" class="headerlink" title="Spring 프로젝트에 MySql JDBC 커넥터 설정"></a>Spring 프로젝트에 MySql JDBC 커넥터 설정</h3><p>spring 프로젝트의 pom.xml에 mysql-connector-java를 추가한다. 접속할 mysql db가 8버전(현재 최신)이라 mysql-connector-java도 현재 최신버전인 8버전으로 설정하였다.</p><p>junit도 혹시나해서 버전을 최신버전으로 설정</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql jdbc 커넥터 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-프로젝트에서-junit을-이용하여-Mysql-DB-접속-테스트"><a href="#Spring-프로젝트에서-junit을-이용하여-Mysql-DB-접속-테스트" class="headerlink" title="Spring 프로젝트에서 junit을 이용하여 Mysql DB 접속 테스트"></a>Spring 프로젝트에서 junit을 이용하여 Mysql DB 접속 테스트</h3><p>스프링 프로젝트의 src/test/java에 mysql 접속 테스트용 자바파일 생성후 코드 작성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hanumoka.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLConnectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/hanumoka_spring_template?useSSL=false"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"hanumoka"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PW = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">Class.forName(DRIVER);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(Connection con = DriverManager.getConnection(URL, USER, PW))&#123;</span><br><span class="line">System.out.println(con);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="comment">//try_</span></span><br><span class="line">&#125;<span class="comment">//testConnection_</span></span><br><span class="line">&#125;<span class="comment">//MySQLConnectionTest_</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180429-spring-mysql-junit-connection-test_7.png" alt="해당 junit 을 실행 후 결과 확인"></p><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>솔직히 난 junit을 잘 쓸줄 모른다.<br>이번에 spring을 다시 공부하면서, 그동안 내가 얼마나 멍청하게 코딩을 해왔는지를 알게 되었다.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mysql </tag>
            
            <tag> junit </tag>
            
            <tag> mysql schema </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker에서 mysql설치하고 접속해보기</title>
      <link href="/2018/04/29/docker-20180429-docker-install-mysql/"/>
      <url>/2018/04/29/docker-20180429-docker-install-mysql/</url>
      
        <content type="html"><![CDATA[<p>###개발환경<br>Windows 10 pro, Docker for Windwos</p><hr><h3 id="Docker에-mysql-설치하기"><a href="#Docker에-mysql-설치하기" class="headerlink" title="Docker에 mysql 설치하기"></a>Docker에 mysql 설치하기</h3><p>일단 docker의 kitematic을 열고 Docker CLI를 클릭하여 윈도우 파워쉘을 열고 Docker 명령어로 진행하겠다.<br>(GUI를 사용할수도 있지만, 나는 터미널이 편해서 터미널을 통해 설치하도록 하겠다.)</p><p><img src="/images/20180429-docker-install-mysql_1.png" alt="Kitematic에서 Docker CLI 클릭"></p><p><img src="/images/20180429-docker-install-mysql_2.png" alt="윈도우 파워쉘"></p><p>아래 docker 명령어를 차래로 입려해보자.</p><p><strong>1.mysql 도커이미지 조회</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 mysql 관련 도커이미지를 도커 허브를 통해 검색한다.<br>최상위에 mysql 이미지를 다운로드 할 예정이다.<br>참고로 OFFICIAL항목에 OK가 되어있는 이미지들이 공식 이미지들이다.</p><p><strong>2.mysql 도커이미지 다운로드</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 해당 도커 이미지를 로컬에 다운로드 한다.<br>태그명을 생략했으므로 mysql 최신버전 이미지가 다운로드 된다.(현재 mysql 8버전)</p><p><strong>3.다운로드된 도커이미지 확인</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>위 명령어로 다운받은 이미지를 확인한다. TAG 항목에 latest가 최신 버전임을 보여준다.</p><p><img src="/images/20180429-docker-install-mysql_3.png" alt="클릭하면 잘보임"></p><p><strong>4.도커 이미지를 통해 mysql 컨테이너 생성</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql_test mysql</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 mysql 이미지를 통해 mysql 컨테이너를 생성하고 동작 시킨다.</p><p>옵션을 조금 설명해 보자면 아래와 같다.</p><p><em>-p 3306:3306</em> : 호스트의 3306포트와 컨테이너의 3306포트를 연결한다. 즉 호스트에 3306포트 접근이 발행하면 해당 컨테이너에 접속이 된다.</p><p><em>-e MYSQL_ROOT_PASSWORD=password</em> : 컨테이너를 생성하면서 환경변수를 지정한다. root계정의 비밀번호를 설정한다.</p><p><em>-name mysql_test</em> : 컨테이너의 이름은 mysql_test로 지정한다.</p><p>아래 명령을 입력하여 생성된 mysql 컨테이너가 동작하고 있는지를 확인 할 수 있다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>STATUS 항목에 exit가 아니라 UP 시간이 나온다면 컨테이너가 동작하고 있는 것을 말한다.</p><p><strong>5.파워쉘에서 mysql 컨티에너 접속</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t mysql_test bash</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하여 mysql 컨테이너에 접속한다.<br>mysql컨테이너의 bash쉘에 접속이 된다. </p><p>아래 명령어를 입력하고 아까 docker run에서 설정한 root 계정의 password를 입력하면 mysql 서버에 접속 할 수 있다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/20180429-docker-install-mysql_4.png" alt="클릭하면 잘보임"></p><hr><h3 id="Windows10에-MySQL-Workbench를-설치해서-도커-mysql-컨테이너에-접속하기"><a href="#Windows10에-MySQL-Workbench를-설치해서-도커-mysql-컨테이너에-접속하기" class="headerlink" title="Windows10에 MySQL Workbench를 설치해서 도커 mysql 컨테이너에 접속하기"></a>Windows10에 MySQL Workbench를 설치해서 도커 mysql 컨테이너에 접속하기</h3><p><strong>1.MySQL WorkBench 다운로드 및 설치</strong></p><p><strong>주의:Mysql 8버전을 사용한다면 Develoment Releases의 MySql Workbench 8버전을 사용해야 한다. Mysql8 버전에서 계정 비밀번호 암호화 문제로 다른 워크벤치 버전에서 접속 오류가 발생한다.</strong></p><p>오류내용: Failed to Connect to MySQL at localhost:3306 with user root<br>Authentication plugin ‘caching_sha2_password’ cannot be loaded: …</p><p><img src="/images/20180429-docker-install-mysql_5.png" alt="mysql workbench 접속 오류"></p><p>우선 <a href="https://dev.mysql.com/downloads/" target="_blank" rel="external nofollow noopener noreferrer">https://dev.mysql.com/downloads/</a> 접속해서 MySQL Workbent 클릭하고 Develoment Releases 탭 클랙 한 뒤 Mysql Workbench 인스톨러를 다운로드 하자.</p><p><img src="/images/20180429-docker-install-mysql_6.png" alt><br>위 화면에서 스크롤을 아래로 내리면 아래와 같은 화면 이 나온다.<br><img src="/images/20180429-docker-install-mysql_7.png" alt></p><p>다운로드한 exe파일을 설치하자.<br>설치가 완료가 되면, 자동으로 Mysql Workbench가 실행된다.</p><p><strong>2.Mysql WorkBench에서 Docker의 mysql  컨테이너에 접속하기</strong><br><img src="/images/20180429-docker-install-mysql_8.png" alt><br>플러스 버튼을 클릭하자.</p><p><img src="/images/20180429-docker-install-mysql_9.png" alt><br>아까 생성한 Docker mysql의 접속하기 위한 정보를 입력한다.</p><p><img src="/images/20180429-docker-install-mysql_10.png" alt><br>접속테스트를 결과를 확인하자.</p><h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>윈도우의 도커에 mysql을 이미지를 이용하여 mysql 도커 컨테이너를 생성하고, 호스트 윈도우에서 Mysql Workbench를 이용하여 mysql db 접속까지 테스트 해 보았다.</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql workbench </tag>
            
            <tag> Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10pro docker 설치하기</title>
      <link href="/2018/04/28/docker-20180428-windows10pro-install-docker/"/>
      <url>/2018/04/28/docker-20180428-windows10pro-install-docker/</url>
      
        <content type="html"><![CDATA[<p>로컬환경에서 웹 프로그램 개발시 다양한 도구들을 설치하게 된다.<br>그중 대표적으로 짜증나는 녀석은 DB 일것이다. </p><p>Oracle, Mysql, MariaDB 등을 훌륭한 것들이지만 문제는 설치시 손이 미끄러져 재대로 설치가 안되는경우가 간혹 있다.<br>또는 이미 설치된 DB를 삭제해야 하는경우가 종종 있는데</p><p>이때 이미 내 로컬 OS의 레지스터리는 더럽혀지기 때문에, 일일이 손을 봐야 할 곳이 많이 생기게 된다.<br>공부할것도 많고 개발할것도 많은데 이딴거 때문에 정력을 낭비하는건 여간 손해가 아니다.</p><p>위와 같은 문제를 방지하기 위해 로컬에 Docker 컨테이너 가상화 환경을 만들고 그 위에 DB를 설치해볼 생각이다.<br>Docker는 그 내용이 방대하기 때문에(사실 지금도 공부중)이만 넘어가고 바로 Windows10 pro 에 Docker를 설치해보자</p><h3 id="Windows10-PRO에-Docker-설치-방법"><a href="#Windows10-PRO에-Docker-설치-방법" class="headerlink" title="Windows10 PRO에 Docker 설치 방법"></a>Windows10 PRO에 Docker 설치 방법</h3><p><strong>이글은 Windows10 pro에 docker를 설치하는 방법이다.</strong><br><strong>Windows10 pro는 Docker Tool Box를 설치하지 않는다.</strong><br>구글링 해보니 Windows10 pro와 일반 Windows10과 Docker설치 방법이 다른듯 하다.<br>아마도 Windows10 Pro 에서는 hyper-v기능이 있기 때문인듯 하다.<br>일반 Windows10은 Docker tool box를 설치해야 하는데, 여기에는 hyper-v를 대신할 vitualbox가 포함되어 있다.<br>Windows10 pro가 설치된 노트북에 Docker tool box 를 설치했었는데, 문제가 좀 있는지 정상동작을 하지 않았다.<br><strong>Windows10 pro가 아닌 사람은 이 글을 더이상 읽지 말고, Docker tool box 설치방법을 구글에서 검색하기를 바란다.</strong></p><h4 id="1-Windows10-Pro에-Docker-설치-준비"><a href="#1-Windows10-Pro에-Docker-설치-준비" class="headerlink" title="1.Windows10 Pro에 Docker 설치 준비"></a>1.Windows10 Pro에 Docker 설치 준비</h4><p>윈도우에서 작업관리자를 열어 가상화 항목이 사용인지 확인하자.<br>사용이 아닌경우 본인의 CPU가 가상화 기능을 지원하는지 여부를 확인 해야 하며, 가상화를 지원한다면 컴퓨터 부팅시 Bios에 접근하여 해당 가상화 기능을 활성화 시켜야 한다.<br>만약 본인의 컴퓨터의 cpu가 가상화 기능이 없다면 Docker를 사용 할수 없을것이다.<br>아마도?…</p><p>일단 윈도우 작업관리자 - 성능 에서 가상화 여부가 사용으로 나오는지 확인하자<br><img src="/images/20180428-windows10pro-install-docker_1.png" alt="윈도우 작업관리자에서 가상화 여부 확인"></p><p>그리고 윈도우 - 설정 에서 Windows 기능 창에서 Hyper-V항목을 활성화 하자.</p><p><img src="/images/20180428-windows10pro-install-docker_2.png" alt="윈도우키 - 설정 - windows 기능 검색"></p><p><img src="/images/20180428-windows10pro-install-docker_3.png" alt="Hyper-V 활성화"></p><p>Hyper-V를 활성화 하면 윈도우 리부팅을 하도록 하자.</p><h4 id="2-Windows10-Pro용-Docker-설치파일-다운로드"><a href="#2-Windows10-Pro용-Docker-설치파일-다운로드" class="headerlink" title="2.Windows10 Pro용 Docker 설치파일 다운로드"></a>2.Windows10 Pro용 Docker 설치파일 다운로드</h4><p><a href="https://docs.docker.com/" target="_blank" rel="external nofollow noopener noreferrer">https://docs.docker.com/</a> 이동 -&gt; Get Docker -&gt; Docker CE -&gt; Windows -&gt; Download from Docker Store -&gt; Get Docker 버튼 클릭</p><p><img src="/images/20180428-windows10pro-install-docker_4.png" alt="Windows10 pro용 Docker 설치파일 다운로드"></p><p>아래 링크를 클릭하면 바로 다운로드가 된다.<br><a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe</a></p><p><img src="/images/20180428-windows10pro-install-docker_5.png" alt="Docker for Windows Installer.exe 파일"><br>다운로드한,위 파일을 설치하도록 하자.<br>설치를 진행하면 윈도우 로그아웃을 요청하며 윈도우 로그아웃후 다시 로그인 하면<br>다음과 같이 도커가 시작되고 있는것을 확인 할 수 있다.</p><p><img src="/images/20180428-windows10pro-install-docker_6.png" alt="Docker 설치 완료뒤 도커 시작화면1"><br><img src="/images/20180428-windows10pro-install-docker_7.png" alt="Docker 설치 완료뒤 도커 시작화면2"></p><p>Docker가 시작되는대 조금 시간이 걸리며, Docker가 시작되면 아래처럼 로그인 창이 열린다.<br><a href="https://hub.docker.com/" target="_blank" rel="external nofollow noopener noreferrer">https://hub.docker.com/</a> 에서 간단히 이메일을 통해 계정을 만든 뒤, 그 계정을 통하여 로그인 하면 Docker를 사용 할 수 있다.<br>참고로 도커 허브는 도커에서 사용할 이미지들을 공유하는 공용 리파지토리이다.</p><p><img src="/images/20180428-windows10pro-install-docker_8.png" alt="Docker 로그인창"></p><p>로그인 후 윈도우 숨겨진 아이콘에서 docker를 확인해보면 로그인 된것을 확인 할 수 있다.</p><p><img src="/images/20180428-windows10pro-install-docker_9.png" alt="Docker 로그인 확인"></p><h4 id="4-Kitematic-설치"><a href="#4-Kitematic-설치" class="headerlink" title="4.Kitematic 설치"></a>4.Kitematic 설치</h4><p>도커가 설치되면 Kitematic를 설치해야 한다. Kitematic은 도커를 관리 할수 있는 GUI툴이다. </p><p>Kitematic를 클릭해보자<br><img src="/images/20180428-windows10pro-install-docker_10.png" alt="Kitematic 클릭"></p><p>Docker최초 설치시에는 Kitematic가 설치되어 있지 않으므로 다운로드를 하라고 창이 뜬다. 다운로드를 하자.<br><img src="/images/20180428-windows10pro-install-docker_11.png" alt="Kitematic 다운로드 창"></p><p>아래처럼 zip파일이 다운로드가 된다.<br><img src="/images/20180428-windows10pro-install-docker_12.png" alt="Kitematic.zip"><br>zip파일을 앞축을 푼뒤 폴더명을 Kitematic로 변경하고<br>C드라이브 / Program Files / Doker 폴더로 이동 시키자.</p><p><img src="/images/20180428-windows10pro-install-docker_13.png" alt="Kitematic 폴더를 Docker설치 폴더로 이동"></p><h4 id="5-Windows10-Pro에-docker-동작-확인"><a href="#5-Windows10-Pro에-docker-동작-확인" class="headerlink" title="5.Windows10 Pro에 docker 동작 확인"></a>5.Windows10 Pro에 docker 동작 확인</h4><p>이제 Windows10 pro에서 도커를 사용할수 있는 준비를 끝냈다. 다시 Kitematic를 클릭해보자.</p><p><img src="/images/20180428-windows10pro-install-docker_14.png" alt="Kitematic 실행 전 도커허브 계정 로그인"><br>위 처럼 도커허브 계정을 로그인 하라고 나온다. 로그인 하자.</p><p><img src="/images/20180428-windows10pro-install-docker_15.png" alt="Kitematic 실행화면"><br>로그인을 하면, 위처럼 Kitematic도구가 열리며 도커에 설치할 수 있는 이미지들이 나오는 것을 확인 할 수 있다.</p><p>아래처럼  Kitematic 좌측 하단의 Docker CLI를 클릭하면 윈도우 파워쉘이 열리며 Docker 명령어를 입력 할 수 있다.<br><img src="/images/20180428-windows10pro-install-docker_16.png" alt="Docker 터미널(파워쉘)"></p><h4 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h4><p>이로써 Windows10 pro에서 도커를 설치해 보았다.<br>주의할 점은 Windows10 pro에는 Docker tool box가 아니라 그냥 Docker for windows installer.exe 설치파일을 이용해야 한다.</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows10 pro </tag>
            
            <tag> Docker </tag>
            
            <tag> Kitematic </tag>
            
            <tag> Docker for windows installer.exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring mvc 프로젝트 한글설정(utf8)</title>
      <link href="/2018/04/18/spring-20180418-spring-set-korean/"/>
      <url>/2018/04/18/spring-20180418-spring-set-korean/</url>
      
        <content type="html"><![CDATA[<p><strong>개발환경: windows10, sts, jdk1.8, tomcat9</strong></p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/04/07/spring-install-sts/">1.STS로 Spring 프레임워크 개발환경셋팅</a><br><a href="/2018/04/08/spring-start-spring-legacy-project/">2.Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</a><br><a href="/2018/04/18/spring-set-korean/">3.spring mvc 프로젝트 한글설정(utf8)</a></p><p><a href="/2018/04/28/windows10pro-install-docker/">4.Windows10pro docker 설치하기</a><br><a href="/2018/04/29/docker-install-mysql/">5.Docker에서 mysql설치하고 접속해보기</a></p><p><a href="/2018/04/29/spring-mysql-junit-connection-test/">6.Spring 프로젝트 mysql접속 junit 테스트 하기</a><br><a href="/2018/04/29/spring-mybatis-mysql-setting/">7.SpringFramework MyBatis MySQL 연동하기</a></p><hr><p><img src="/images/20180418-spring-set-korean_1.png" alt="스프링프로젝트 jsp에서 한글 깨짐현상"></p><p>스프링 프로젝트를 새로 만들면 jsp에서 한글이 보통 위 이미지 처럼 깨진다.</p><p>UTF8 셋팅을 통해 jsp에서 한글 깨짐을 해결 할 수 있다.</p><h3 id="1-jsp에-utf-8설정"><a href="#1-jsp에-utf-8설정" class="headerlink" title="1.jsp에 utf-8설정"></a>1.jsp에 utf-8설정</h3><p>한글이 깨지는 jsp의 최상단에 아래코드를 삽입하자</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/20180418-spring-set-korean_2.png" alt="jsp에서 utf-8셋팅"></p><p><img src="/images/20180418-spring-set-korean_5.png" alt="jsp 한글동작 확인"></p><p><strong>1번 설정만 하면 일단 jsp에서 한글깨짐은 해결이 된다.</strong><br><strong>하지만 post, get 리퀘스트 등등 스프링 프로젝트는 다양한 부분에 utf-8설정이 필요하다.</strong><br><strong>나중에 하기 귀찮으니 미리 한꺼번에 설정해보도록 하자.</strong></p><h3 id="2-스프링-웹-프로젝트의-web-xml에-UTF-8-셋팅"><a href="#2-스프링-웹-프로젝트의-web-xml에-UTF-8-셋팅" class="headerlink" title="2.스프링 웹 프로젝트의 web.xml에 UTF-8 셋팅"></a>2.스프링 웹 프로젝트의 web.xml에 UTF-8 셋팅</h3><p>아래 내용을 스프링 웹 프로젝트의 web.xml에 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180418-spring-set-korean_3.png" alt="스프링프로젝트의 web.xml에 utf-8셋팅"></p><h3 id="3-tomcat의-server-xml에-utf-8-셋팅"><a href="#3-tomcat의-server-xml에-utf-8-셋팅" class="headerlink" title="3.tomcat의 server.xml에 utf-8 셋팅"></a>3.tomcat의 server.xml에 utf-8 셋팅</h3><p>아래 내용을 아파치 톰캣의 server.xml에 적용하자. Connector port 태그를 찾아서 URIEncoding 프로퍼티를 추가해야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180418-spring-set-korean_4.png" alt="tomcat server.xml에 utf-8셋팅"></p><h3 id="4-html-파일에-utf-8-셋팅"><a href="#4-html-파일에-utf-8-셋팅" class="headerlink" title="4.html 파일에 utf-8 셋팅"></a>4.html 파일에 utf-8 셋팅</h3><p>html에도 utf-8 설정이 필요하다.<br>head 태그 영역을 아래처럼 설정하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>지금까지 스프링 프로젝트의 UTF셋팅을 해보았다. 기타 라이브러리가 추가됨에 따라 추가로 설정이 필요할 수는 있지만, 보통 위 정도만 해도 어느정도 한글 깨짐등의 문제를 해결 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> jsp 한글깨짐 </tag>
            
            <tag> 스프링프로젝트 한글설정 </tag>
            
            <tag> utf-8 </tag>
            
            <tag> utf8 </tag>
            
            <tag> jsp </tag>
            
            <tag> sever.xml </tag>
            
            <tag> web.xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java의 equals()와 hashCode() 사용법</title>
      <link href="/2018/04/12/java-20180412-java-equals-hashCode/"/>
      <url>/2018/04/12/java-20180412-java-equals-hashCode/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180412-java-equals-hashCode_1.png" alt="Java"><br>java 개발중 특히 VO 클래스를 만들때 getter(), setter(), toString(), equals(), hashCode() 함수등을 자주 재정의 해서 사용한다.</p><p>getter(), setter(), toString()은 그 자체로 의미가 명확하지만 <strong>equals(), hashCode()</strong>는 왜 재정의 하여 사용하는지, 왜 두 메소드는 항상 함께 사용하는지 모호하여 다시 공부하여 정리를 해보도록 하겠다.</p><p>미리 간단히 말한다면<br><strong>equals()와 hashcode()를 재정의 하여 객체가 논리적으로 일치하는지 확인하는 용도로 사용된다</strong></p><h3 id="Object-equals-란"><a href="#Object-equals-란" class="headerlink" title="Object.equals() 란?"></a>Object.equals() 란?</h3><p>기본형태는 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Object 클래스의 equals() 메소드는 비교 연산자인 ==과 동일한 결과를 리턴한다.<br>즉 객체의 값의 일치여부를 비교하여 true, false를 리턴한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object obj1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object obj2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> result1 = obj1.equals(obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> result2 = (obj1 == obj2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"equals결과 :"</span>+result1); <span class="comment">// 결과 false</span></span><br><span class="line">System.out.println(<span class="string">"==연산결과 :"</span>+result2); <span class="comment">// 결과 false</span></span><br></pre></td></tr></table></figure><p>변수 obj1, obj2는 각각의 인스턴스의 메모리 주소값을 가지게 되며 equals()메소드와 ==연산자와 마찬가지로 그 값들이 일치 여부를 비교하게 되며, 일치한다면 true 불일치한다면 false를 반환하게 된다.</p><p>이번에는 String의 equlas메소드를 확인해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//새로운 문자열 객체 생성, new 연산자로 강제로 새로운 메모리 주소를 할당하게 했다.</span></span><br><span class="line">String name3 = <span class="keyword">new</span> String(<span class="string">"가나다라"</span>); </span><br><span class="line">String name4 = <span class="keyword">new</span> String(<span class="string">"가나다라"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> result5 = name1.equals(name3);</span><br><span class="line"><span class="keyword">boolean</span> result6 = (name1 == name4);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"equals결과 :"</span>+result5);  <span class="comment">// 결과 true</span></span><br><span class="line">System.out.println(<span class="string">"==연산결과 :"</span>+result6);  <span class="comment">// 결과 false</span></span><br></pre></td></tr></table></figure><p>String 예제는 Object 예제와 다르게 equals메소드는 true, ==연산자는 false를 리턴한다.<br>String의 equals 메소드는 Object의 equals메소드를 그대로 쓰는 것이 아니라, 재정의 되어 <strong>논리적인 문자열 비교를 하기 때문이다.</strong></p><p>따라서 사용자가 String 클래스처럼 equlas를 논리적 일치여부를 검사하는 부분을 재정의 하여 사용하지 않는 이상, 객체의 메모리 값만 비교하게 된다.</p><h3 id="Object-equals-재정의-하기-feat-instancOF-메소드"><a href="#Object-equals-재정의-하기-feat-instancOF-메소드" class="headerlink" title="Object.equals() 재정의 하기 feat.instancOF 메소드"></a>Object.equals() 재정의 하기 feat.instancOF 메소드</h3><p>바로 예제로 가보자. 문자열 id 하나만 프로퍼티로 갖는 간단한 VO 클래스이다.<br>앞서 말했듯이 MemberVO의 논리적 일치여부를 equals메소드에 재정의 하였다.<br>id가 일치하면 MemverVO는 동일한 객체로 여기기로 하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberVO</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> MemberVO)&#123;</span><br><span class="line">MemberVO memberVO = (MemberVO) obj;</span><br><span class="line"><span class="keyword">if</span>(id.equals(memberVO.id))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="comment">//_if</span></span><br><span class="line">&#125;<span class="comment">//_if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="comment">//_equals</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//어딘가의 main메소드 에서</span></span><br><span class="line">MemberVO vo1 = <span class="keyword">new</span> MemberVO();</span><br><span class="line">MemberVO vo2 = <span class="keyword">new</span> MemberVO();</span><br><span class="line">vo1.id =<span class="string">"가나다"</span>;</span><br><span class="line">vo2.id =<span class="string">"가나다"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(vo1.equals(vo2)); <span class="comment">// 결과 true</span></span><br></pre></td></tr></table></figure><p>간단한 소스이다. 주의할 점은 <strong>instancOf</strong>메소드를 통해 equals메소드의 인자객체와 메소드를 호출주체 객체와 동일 타입인지를 확인해야 한다. 만약 id 프로퍼티를 갖는 다른 타입의 객체와 비교시 불일치 여부를 판단 할수 있어야 하기 때문이다.</p><p>자 대충 equlas메소드를 재정의 하여 객체의 논리적 일치여부를 확인하는 예제를 만들어 봤다. 하지만 equals메소드 하나만 가지고는 부족하다.<br>HashSet, HashMap, Hashtable의 컬랙션프레임워크의 객체 동등 비교시 hashCode()메소드를 실행하기 때문이다.</p><h3 id="Object-hashCode-란"><a href="#Object-hashCode-란" class="headerlink" title="Object.hashCode() 란?"></a>Object.hashCode() 란?</h3><p>Object.hashCode() 메소드는 객체의 주소값을 이용하여 객체 고유의 해시코드를 리턴하는 함수이다.<br>이 hashCode()를 equals()와 함께 오버라이딩 해야 하는 이유는 HashSet, HashMap, Hashtable과 같은 프레임워크에서 객체의 비교시 hashCode() 결과값을 통해 해시코드 값이 다르면 다른 객체로 판단하기 때문이다.</p><p><strong>HashSet, HashMap, Hashtable 프레임워크가 두 객체의 동등 비교 프로세스</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> : hashCode() == <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">if</span> : equals() == <span class="literal">true</span>&#123;</span><br><span class="line">해쉬 프레임워크는 이제서야 두 객체를 동등하다고 판단한다.</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">다른객체로 판단</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">다른객체로 판단</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉 객체의 동등 비교를 위해서는 Object의 equals() 메소드만 재정의하지 말고 hashCode() 메소드도 재정의해서 논리적 동등 객체일 경우 동일한 해시 코드가 리턴 되도록 해야 한다.</p><p><strong>따라서 아래처럼 hashCode를 오버라이딩 해서 MemverVO의 id가 동일한 문자열인 경우 같은 해시 코드를 리턴하게 해야 한다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberVO</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> MemberVO)&#123;</span><br><span class="line">MemberVO memberVO = (MemberVO) obj;</span><br><span class="line"><span class="keyword">if</span>(id.equals(memberVO.id))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="comment">//_if</span></span><br><span class="line">&#125;<span class="comment">//_if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="comment">//_equals</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id.hasnCode(); <span class="comment">//id가 동일한 문자열인 경우 같은 해시 코드를 리턴</span></span><br><span class="line">&#125;<span class="comment">//_hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> equals </tag>
            
            <tag> hashCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</title>
      <link href="/2018/04/08/spring-20180408-spring-start-spring-legacy-project/"/>
      <url>/2018/04/08/spring-20180408-spring-start-spring-legacy-project/</url>
      
        <content type="html"><![CDATA[<h3 id="실습환경"><a href="#실습환경" class="headerlink" title="실습환경"></a>실습환경</h3><p>Windows10(64bit), java 1.8, STS</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/04/07/spring-install-sts/">1.STS로 Spring 프레임워크 개발환경셋팅</a><br><a href="/2018/04/08/spring-start-spring-legacy-project/">2.Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</a><br><a href="/2018/04/18/spring-set-korean/">3.spring mvc 프로젝트 한글설정(utf8)</a></p><p><a href="/2018/04/28/windows10pro-install-docker/">4.Windows10pro docker 설치하기</a><br><a href="/2018/04/29/docker-install-mysql/">5.Docker에서 mysql설치하고 접속해보기</a></p><p><a href="/2018/04/29/spring-mysql-junit-connection-test/">6.Spring 프로젝트 mysql접속 junit 테스트 하기</a><br><a href="/2018/04/29/spring-mybatis-mysql-setting/">7.SpringFramework MyBatis MySQL 연동하기</a></p><hr><h3 id="Spring-Lagacy-Prject로-웹프로젝트를-만드는-이유"><a href="#Spring-Lagacy-Prject로-웹프로젝트를-만드는-이유" class="headerlink" title="Spring Lagacy Prject로 웹프로젝트를 만드는 이유"></a>Spring Lagacy Prject로 웹프로젝트를 만드는 이유</h3><p>스프링 부트를 이용하여 간단하게 스프링 웹 프로젝트를 생성 할 수 있다.<br>하지만 지금은 공부단계이므로 세세한 설정을 본인이 직접 할 수 있는 Spring Lagacy Prject로 프로젝트를 생성하는 것을 추천한다.<br>개인적인 경험으로도 실무에서 Spring Lagacy Prject를 주로 사용했다.</p><p>이번에는 STS로 Spring Lagacy Prject - Spring MVC projcet 프로젝트를 생성하고, tomcat 을 연동시켜 기본 페이지를 동작 시켜보겠다.</p><p><strong>Spring Stater Project(Spring Boot)의 장점</strong><br>1.별도의 설정이 필요없다.<br>2.WAS없이 실행이 가능하다.<br>3.로딩 시간이 짧아서 테스트 하기 편하다.</p><p><strong>Spring Stater Project(Spring Boot)의 단점</strong><br>1.기존의 설정과 다른 방식으로 사용한다.<br>2.JSP 설정 등은 별도로 해야 한다.</p><p><strong>Spring Legacy Project의 장점</strong><br>1.현재까지 실무에서 많이 사용되고 있다.<br>2.다양한 자료가 존재한다.<br>3.기존 프로젝트를 이해하는데 도움이 된다.<br>4.모든 버전의 스프링에서 사용할 수 있다.</p><p><strong>Spring Legacy Project의 단점</strong><br>1.초반 테스트 환경 구성 등이 어렵다.<br>2.WAS와 연동하는 경우 결과 확인에 많은 리소스를 소모한다.</p><h3 id="Spring-Lagacy-Prject로-웹프로젝트를-만들기"><a href="#Spring-Lagacy-Prject로-웹프로젝트를-만들기" class="headerlink" title="Spring Lagacy Prject로 웹프로젝트를 만들기"></a>Spring Lagacy Prject로 웹프로젝트를 만들기</h3><p>STS에서 File -&gt; New -&gt; Spring Legacy Project 클릭</p><p><img src="/images/20180408-spring-start-spring-legacy-project_1.png" alt="Spring Legacy Prject 생성1"></p><p>Project name을 입력하고 Spring MVC Project 를 선택하고 next 버튼을 클릭한다.</p><p><img src="/images/20180408-spring-start-spring-legacy-project_2.png" alt="Spring Legacy Prject 생성2"></p><p><img src="/images/20180408-spring-start-spring-legacy-project_3.png" alt="Spring Legacy Prject 생성완료"></p><h3 id="Tomcat-다운로드하고-STS에-연동하기"><a href="#Tomcat-다운로드하고-STS에-연동하기" class="headerlink" title="Tomcat 다운로드하고 STS에 연동하기"></a>Tomcat 다운로드하고 STS에 연동하기</h3><p><a href="https://tomcat.apache.org/" target="_blank" rel="external nofollow noopener noreferrer">https://tomcat.apache.org/</a> 이동 -&gt; Donwload -&gt; Tomcat9 클릭 자신에 맞는 톰캣 다운로드</p><p><img src="/images/20180408-spring-start-spring-legacy-project_4.png" alt="Tomcat 다운로드"></p><p>해당 압축파일을 C드라이브로 이동하고, 압축을 푼다.</p><p><img src="/images/20180408-spring-start-spring-legacy-project_5.png" alt="Tomcat 압축풀기"></p><p>STS를 다시 열고, window -&gt; preference -&gt; server -&gt; runtime enviroments 로 이동</p><p>add버튼 클릭 Apache -&gt; Apache Tomcat v9.0을 선택 -&gt; Next 클릭</p><p><img src="/images/20180408-spring-start-spring-legacy-project_6.png" alt="Tomcat Server를 STS에 연동1"></p><p>Browse… 클릭 -&gt; 압축을 푼 tomcat 폴더 선택후 확인 -&gt; Finish -&gt; Apply and Close 클릭</p><p><img src="/images/20180408-spring-start-spring-legacy-project_7.png" alt="Tomcat Server를 STS에 연동2"></p><p>STS에서 Servers 탭 클릭 -&gt; No servers are available. Click this link to create a new server.. 선택</p><p>Apache -&gt; Tomcat v9.0 Server 선택 -&gt; Finish 클릭</p><p><img src="/images/20180408-spring-start-spring-legacy-project_8.png" alt="Tomcat Server를 STS에 연동3"></p><h3 id="Spring-프로젝트-실행하기"><a href="#Spring-프로젝트-실행하기" class="headerlink" title="Spring 프로젝트 실행하기"></a>Spring 프로젝트 실행하기</h3><p>방금 STS에 연동한 톰캣 서버에 스프링 프로젝트를 연동하여 스프링 프로젝트를 실행해보자</p><p>STS servers 탭에서 방금 등록한 톰캣을 마우스 우클릭 -&gt; Add and Remove 클릭<br>자신이 만든 spring MVC Project를 add 버튼으로 우측으로 옮긴뒤 Finish 클릭</p><p><img src="/images/20180408-spring-start-spring-legacy-project_9.png" alt="tomcat에 스프링프로젝트 add1"><br><img src="/images/20180408-spring-start-spring-legacy-project_10.png" alt="tomcat에 스프링프로젝트 add2"></p><p>그 다음은 STS의 Package Explorer에 Servers에 Tomcat에서 Server.xml파일을 열어서 방금 등록된 프로젝트의 Base URL을 확인하자.<br><img src="/images/20180408-spring-start-spring-legacy-project_11.png" alt="프로젝트 base url 확인"></p><p>path에 /web 이라고 적혀 있는것을 확인 할수 있다. 따라서 http:localhost:8080/web 이 현재 프로젝트의 base url이 되겠다.</p><p>STS에 Servers탭에서 Tomcat을 우클릭하고 start를 클릭한뒤 브라우저에 http:localhost:8080/web 를 입력하여 프로젝트 실행을 확인하자.</p><p><img src="/images/20180408-spring-start-spring-legacy-project_12.png" alt="스프링 프로젝트 실행 결과"></p><h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><p>책: 코드로 배우는 스프링 웹 프로젝트(구멍가게 코딩단 지음|남가람북스|2015년 08월 16일 출간)</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> STS </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring framework </tag>
            
            <tag> framework </tag>
            
            <tag> SPRING TOOL SUITE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STS로 Spring 프레임워크 개발환경셋팅</title>
      <link href="/2018/04/07/spring-20180407-spring-install-sts/"/>
      <url>/2018/04/07/spring-20180407-spring-install-sts/</url>
      
        <content type="html"><![CDATA[<p>Spring 프로젝트를 개발하기 위해 STS(Spring tool suite)를 설치해보자.</p><h4 id="개발환경"><a href="#개발환경" class="headerlink" title="개발환경"></a>개발환경</h4><p>Windows10(64bit), java 1.8</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/04/07/spring-install-sts/">1.STS로 Spring 프레임워크 개발환경셋팅</a><br><a href="/2018/04/08/spring-start-spring-legacy-project/">2.Spring MVC 프로젝트를 생성하여 톰캣에서 실행하기</a><br><a href="/2018/04/18/spring-set-korean/">3.spring mvc 프로젝트 한글설정(utf8)</a></p><p><a href="/2018/04/28/windows10pro-install-docker/">4.Windows10pro docker 설치하기</a><br><a href="/2018/04/29/docker-install-mysql/">5.Docker에서 mysql설치하고 접속해보기</a></p><p><a href="/2018/04/29/spring-mysql-junit-connection-test/">6.Spring 프로젝트 mysql접속 junit 테스트 하기</a><br><a href="/2018/04/29/spring-mybatis-mysql-setting/">7.SpringFramework MyBatis MySQL 연동하기</a></p><hr><h4 id="STS-다운로드"><a href="#STS-다운로드" class="headerlink" title="STS 다운로드"></a>STS 다운로드</h4><p><a href="https://spring.io/tools" target="_blank" rel="external nofollow noopener noreferrer">https://spring.io/tools</a> 로 이동 Seel all versions 클릭 후 자신에 맞는 운영체제의 sts 를 다운받는다.</p><p><img src="/images/20180407-spring-install-sts_1.png" alt="STS 홈페이지 이동"></p><p><img src="/images/20180407-spring-install-sts_2.png" alt="STS zip 버전 다운로드"></p><p>Installer가 아니라 ZIP버전을 다운받았기에 OS에 설치되어 레지스터리를 더럽히지 않는 장점이 있어서 zip 방식을 선호한다.</p><h4 id="STS-실행"><a href="#STS-실행" class="headerlink" title="STS 실행"></a>STS 실행</h4><p>해당 압축파일을 C 드라이브로 이동시키고 압축을 푼다.(개인적으로 편의상 C드라이브에 IDE를 설치하는 편이다.)</p><p>그리고 압축푼 폴더에  sts-xxx로 시작하는 폴더에 STS.exe 파일을 실행하면 STS가 실행된다.</p><p><img src="/images/20180407-spring-install-sts_3.png" alt="STS 압축풀기"><br><img src="/images/20180407-spring-install-sts_4.png" alt="STS 실행"></p><h4 id="스프링-프로젝트-JDK-설정"><a href="#스프링-프로젝트-JDK-설정" class="headerlink" title="스프링 프로젝트 JDK 설정"></a>스프링 프로젝트 JDK 설정</h4><p>나는 new project에서 spring lagacy project 에서 spring MVC project로 실습을 진행했다.<br>왜인지는 모르겠으나 STS에서 스프링 MVC 프로젝트을 생성하면 JDK 버전을 1.6버전으로 생성한다.<br>따라서 프로젝트의 jdk 버전을 jdk 1.8로 변경해야한다.</p><p>프로젝트를 선택하고 마우스 우클릭 -&gt; Properties -&gt; Project Facets 에서 변경이 가능하다.<br><img src="/images/20180407-spring-install-sts_5.png" alt="STS 스프링 MVC프로젝트 jdk 설정1"><br>자바 빌드패스에서도 확인차 jdk 버전을 확인해 보자.<br><img src="/images/20180407-spring-install-sts_6.png" alt="STS 스프링 MVC프로젝트 jdk 설정2"><br>자바 컴파일러에서도 확인차 jdk 버전을 확인해 보자.<br><img src="/images/20180407-spring-install-sts_7.png" alt="STS 스프링 MVC프로젝트 jdk 설정3"></p><h4 id="스프링-프로젝트-pom-xml-설정"><a href="#스프링-프로젝트-pom-xml-설정" class="headerlink" title="스프링 프로젝트 pom.xml 설정"></a>스프링 프로젝트 pom.xml 설정</h4><p>이제 pom.xml로 이동하자. pom.xml에는 jdk 버전과 spring 버전이 있는데, 기본설정은 너무 낮기때문에 자신에 환경에 맞게 수정해 주자.</p><p><img src="/images/20180407-spring-install-sts_8.png" alt="STS 스프링 MVC프로젝트 pom.xml 설정"><br>pom.xml의 java-version을 1.8로 올려주고, spring 버전도 4.x.x 버전대로 올려주었다.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STS </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring framework </tag>
            
            <tag> framework </tag>
            
            <tag> SPRING TOOL SUITE </tag>
            
            <tag> 스프링프로젝트 JDK 설정 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo deploy시 fatal: could not read Username for &#39;https://github.com&#39;: No error 발생</title>
      <link href="/2018/03/29/hexo-20180329-error-hexo-deploy/"/>
      <url>/2018/03/29/hexo-20180329-error-hexo-deploy/</url>
      
        <content type="html"><![CDATA[<p>오랜만에 hexo deploy를 하는데</p><p><a href="/2018/03/01/hexo-deploy-error/">기존포스트</a> 에서 해결했다고 생각한 에러가 또 발생했다.</p><p><img src="/images/20180329-error-hexo-deploy_1.png" alt="hexo deploy 오류"></p><h4 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h4><p>구글링을 해보니 기존의 hexo의 github 배포방식을 http방식이 아닌 ssh방식으로 변경하라고 한다.</p><h4 id="1-로컬-pc-윈도우에서-내-github-계정에-ssh로-접근할-pc의-ssh키-생성"><a href="#1-로컬-pc-윈도우에서-내-github-계정에-ssh로-접근할-pc의-ssh키-생성" class="headerlink" title="1.로컬 pc 윈도우에서 내 github 계정에 ssh로 접근할 pc의 ssh키 생성"></a>1.로컬 pc 윈도우에서 내 github 계정에 ssh로 접근할 pc의 ssh키 생성</h4><p>일단 자신의 헥소 프로젝트에서 git bash를 열고 아래 명령을 입력하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2096 -C <span class="string">"github계정메일"</span> // 엔터</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 아래 메세지가 나오고 그냥 엔터를 눌러 진행하자</p><p><a href="/images/20180329-error-hexo-deploy_2.png"></a></p><p>그 다음에는 Ehter passphrase (empy for no passphrase): 라고 나오는데,</p><p>ssh를 만들기 위한 기억할만한 비밀번호를 입력해주면 된다. 그리고 확인용으로 한번더 입력한다.</p><p>그리고 아래 명령어를 입력하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(ssh-agent -s)</span><br></pre></td></tr></table></figure><p>그리고 아래 명령어도 입력하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하고 엔터 -&gt; 뭔가 나오면 그냥 엔터 -&gt; 끝</p><p>이렇게 하면 ssh 개인키를 생성을 완료 한 것이다. 이제 생성된 키를 복사하여 자신의 github계정에 등록을 해야 한다.<br>아래 명령어를 입력하여 생성된 ssh키를 클립보드에 복사하자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h4 id="생성된-ssh키를-github-계정에-등록하자"><a href="#생성된-ssh키를-github-계정에-등록하자" class="headerlink" title="생성된 ssh키를 github 계정에 등록하자."></a>생성된 ssh키를 github 계정에 등록하자.</h4><p>github 로그인 -&gt; Settings -&gt; 좌측 Personal settings 메뉴의 SSH and GPG keys 클릭</p><p>-&gt;new SSH key 버튼 클릭 -&gt; Title에는 자신이 구별할수 있는 제목을 입력하고 Key에는 위에서 클립보드에 복사한 ssh키를 붙여넣기 한다.</p><p>-&gt; Add SSH Key 버튼 클릭</p><h4 id="hexp-deploy-설정을-http에서-ssh로-변경"><a href="#hexp-deploy-설정을-http에서-ssh로-변경" class="headerlink" title="hexp deploy 설정을 http에서 ssh로 변경"></a>hexp deploy 설정을 http에서 ssh로 변경</h4><p>헥소의 _config.yml 파일에서 deploy의 repo를 기존의 http방식에서 ssh방식으로 수정해야한다.</p><p>일단 해당 핵소 프로젝트의 배포용 github 리파지토리로 이동한다.</p><p>Clone or download에서 Use ssh를 클릭한 뒤, 그 내용을 복사 한다.</p><p>로컬 핵소 프로젝트의 _config.yml 파일로 이동하여</p><p>deploy 영역의 repo항목에 붙여 넣고, 파일을 저장한다.</p><p><img src="/images/20180329-error-hexo-deploy_3.png" alt></p><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><p>위 작업을 순차적으로 끝냈다면, 헥소블로그의 github deploy 문제가 해결될것이다. </p><p>디플로이를 시도하면, 작은 모달창이 뜨며 ssh생성시 입력했던 키를 물어볼것이다. </p><p><strong>Enter passphrase (empy for no passphrase):</strong> 이때 입력했던 비밀번호를 입력해주면 된다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external nofollow noopener noreferrer">github ssh 생성방법</a><br><a href="https://github.com/hexojs/hexo-deployer-git/issues/71" target="_blank" rel="external nofollow noopener noreferrer">해당이슈에 대한 깃허브 참고자료</a><br><a href="https://blooom.co.kr/%EC%9C%88%EB%8F%84%EC%9A%B0%EC%97%90%EC%84%9C-github-ssh-key-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/" target="_blank" rel="external nofollow noopener noreferrer">github ssh 사용방법(윈도우)</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/03/01/hexo-deploy-error/">기존포스트</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
            <tag> ssh </tag>
            
            <tag> Hexo </tag>
            
            <tag> 배포 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs - swap file 복구하기</title>
      <link href="/2018/03/29/centOs-20180329-centos-vi-swap-file/"/>
      <url>/2018/03/29/centOs-20180329-centos-vi-swap-file/</url>
      
        <content type="html"><![CDATA[<h4 id="swap-파일이란"><a href="#swap-파일이란" class="headerlink" title="swap 파일이란?"></a>swap 파일이란?</h4><p><img src="/images/20180329-centos-vi-swap-file_1.png" alt="swap파일"></p><p>위와 같이<br>리눅스 운영체제에서 숨김파일형태로 swap 확장자를 갖는 파일을 말한다.<br>swap 파일은 임시파일로서 vi로 특정 문서를 수정할때 자동 생성되며, 파일을 수정 중 정상적인 종료를 하지 않을시 자동으로 제거되지 않고 남아버린다.</p><p>만약 해당 수정내용이 필요 없다면, 생성된 swap 파일을 제거 해버리면 되지만 만약 복구를 하고 싶다면<br>아래와 같이 vi를 호출하면 된다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi -r 파일명</span><br></pre></td></tr></table></figure><p><img src="/images/20180329-centos-vi-swap-file_2.png" alt="swap파일"><br>다음화면이 나오면 엔터를 눌러 수정중이던 상태로 파일을 되돌릴 수 있다.<br><img src="/images/20180329-centos-vi-swap-file_3.png" alt="swap파일"></p><p>파일을 정상적으로 수정한 뒤에 swap 파일은 자동으로 제거되지 않으므로, 아래와 같이 입력하여 swap 파일을 제거하면 된다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm .파일명.swap</span><br></pre></td></tr></table></figure><p><img src="/images/20180329-centos-vi-swap-file_4.png" alt="swap파일"></p>]]></content>
      
      
      <categories>
          
          <category> centOs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs </tag>
            
            <tag> 센트오에스 </tag>
            
            <tag> 리눅스 </tag>
            
            <tag> Linux </tag>
            
            <tag> vi </tag>
            
            <tag> swap file </tag>
            
            <tag> 임시파일 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - gitignore파일과 gitignore.io</title>
      <link href="/2018/03/01/git-20180301-git-gitignore/"/>
      <url>/2018/03/01/git-20180301-git-gitignore/</url>
      
        <content type="html"><![CDATA[<p>git에서는 .gitignore 라는 파일을 사용하여 형상 관리할 필요가 없는 로그,임시 파일등을 git의 파일추적에서 제외시킬수 있다.<br>즉 git으로 관리하고 싶지 않은 파일형식 모음을 저장하는 파일이다.</p><p><img src="/images/20180301-git-gitignore_1.png" alt="&quot;.gitignore 파일&quot;"></p><p>위 이미지는 현재 이 hexo 블로그의 루트폴더 이미지이며, 빨간 상자로 .gitignore 파일이 보이는 것을 확인 할 수있다.<br>git init과 같은 명령어로 .gitignore 파일은 생성되지 않으며 직접 텍스트 파일을 만들어 git저장소 루트폴더에 생성해야한다.<br>.gitignore 파일앞에 <strong>.(점)</strong>을 빼먹지 않도록 주의하자.</p><p>위 빨간상자의 .gitignore 내용은 다음과 같다.</p><p><img src="/images/20180301-git-gitignore_2.png" alt="&quot;.gitignore 파일내용&quot;"></p><p>간단하게 Windows, Node, Hexo 환경에 발생하는 기타 설정파일, 로그파일, 임시파일등을 제외한 내용이다.<br>하지만 위 같은 내용들 일일이 찾아 설정하긴 무리가 있다.</p><p>그래서 아래의 gitignore.io 사이트로 이동하여 필요한 내용얼 입력하면, 자동으로 .gitignore파일을 생성해준다.</p><p><a href="https://www.gitignore.io/" target="_blank" rel="external nofollow noopener noreferrer">https://www.gitignore.io/</a></p><p><img src="/images/20180301-git-gitignore_3.png" alt="&quot;gitignore.io&quot;"></p><p><img src="/images/20180301-git-gitignore_4.png" alt="&quot;.gitignore 파일내용&quot;"></p><p><strong>검색창에 Hexo입력 엔터, Node 입력 엔터, Windows 입력 엔터 후 create 버튼클 클릭하면 된다.</strong></p><p><img src="/images/20180301-git-gitignore_5.png" alt="&quot;gitignore.io에서 생성한 .gitignore 파일내용&quot;"></p><p><strong>생성된 내용을 파일로 저장하여 사용하면 된다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> .gitignore </tag>
            
            <tag> gitignore </tag>
            
            <tag> gitignore.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build vs compile</title>
      <link href="/2018/03/01/programing-etc-20180301-build-vs-complie/"/>
      <url>/2018/03/01/programing-etc-20180301-build-vs-complie/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180301-build-vs-complie_1.jpg" alt="hexo 디플로이시 에러내용"></p><p><strong>컴파일(compile)</strong>이란 개발자들이 특정한 프로그래밍언어(예를들어 C, C++, Object-C등)을 사용해서 컴퓨터가 이해할 수 있는 기계어 코드(이진코드)로 변환하는 작업을 일컫는다. 좀더 정확하게 말하면, 컴퓨터와 그 컴퓨터에 설치되어 있는 운영체제가 이해할 수 있는 기계어 코드로 변환하는 일이다. 따라서 동일한 컴퓨터라 할지라도 윈도우가 설치되어 있는 컴퓨터와 리눅스가 설치되어 있는 컴퓨터는 같은 애플리케이션이라도 컴파일된 결과물은 다르다.</p><p>또한, 컴파일해서 생성된 기계어코드만으로 바로 컴퓨터에서 실행될 수는 없다. 그 이유는 대부분의 애플리케이션들은 사용자가 프로그래밍한 소스 코드도 있지만, 상당히 많은 부분들이 라이브러리 형태로 제공되기 때문이다. 예를들어, C프로그래밍을 할 때 키보드를 누르는 기능에 대해 프로그래밍할 필요가 없는 이유는 키보드를 누를 때 발생하는 이벤트나 작업에 대해 이미 표준 라이브러리(Standard library)로 만들어져 있기 때문이다. 바로 이러한 라이브러리를 내가 만든 애플리케이션과 연결해 주는 작업이 바로 <strong>링크(link)</strong>이다.</p><p>요즘은 컴파일과 링크를 합쳐 <strong>빌드(build)</strong>라는 표현을 자주 사용한다. 빌드를 해야 비로소 컴퓨터에서 실행할 수 있는 형태의 기계어 코드가 생성된다. 그러나 한번 프로그래밍을 빌드했다고 해서 자신이 원하는 프로그래밍이 만들어지지는 않는다. 프로그래밍의 신이 아닌 이상 오류가 발생한다. 이러한 오류들을 바로 잡는 작업이 <strong>디버깅(Debugging)</strong>이다. 프로그래머들이 가장 힘들어하는 작업은 소스코드를 코딩하는 단계나 빌드하는 단계가 아니라, 바로 디버깅하는 단계이다.</p><p>디버깅이란 그 이름에서 알 수 있듯이, 자신이 만든 프로그램 내부에 숨겨져 있는 논리적인 오류를 찾아내는 작업이다. 윈도우를 주로 사용하는 사람들도 간혹 컴퓨터를 사용하다가 ‘예기치 않은 오류로 인해 프로그램을 종료합니다.’라는 에러 메시지를 보았을 것이다. 바로 이러한 예지치 못한 에러를 잡아내어 수정하는 작업을 통칭하여 디버깅한다 라고 한다.</p><p>참고: Do it! bada 모바일 프로그래밍 by 여인춘</p><p>출처: <a href="http://hyogeun.tistory.com/96" target="_blank" rel="external nofollow noopener noreferrer">http://hyogeun.tistory.com/96</a> [SW전공자의 Expert를 위하여]</p>]]></content>
      
      
      <categories>
          
          <category> programing_etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build </tag>
            
            <tag> compile </tag>
            
            <tag> link </tag>
            
            <tag> debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo deploy error - fatal: HttpRequestException encountered.</title>
      <link href="/2018/03/01/hexo-20180301-hexo-deploy-error/"/>
      <url>/2018/03/01/hexo-20180301-hexo-deploy-error/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180301-hexo-deploy-error_1.png" alt="hexo 디플로이시 에러내용"></p><p>오랜만에 hexo 블로그에 글을 써볼까 하여 헥소 post를 만들어 디플로이를 해보았는데, 왠걸 해괴한 에러가 발생한다.</p><p>구글링을 해보니 Windows환경에서 git의 문제였다. </p><p>2018-02-26 일 기준으로 무언가 바뀌었다고 한다. </p><h4 id="간단한-해결방법"><a href="#간단한-해결방법" class="headerlink" title="간단한 해결방법"></a>간단한 해결방법</h4><p>위 문제는 실행파일 하나만 설치하면 말끔히 해결된다.</p><p><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0</a></p><p>위 링크로 이동하자</p><p><img src="/images/20180301-hexo-deploy-error_2.png" alt="오류 해결파일"></p><p>위 빨간 상자에 있는 exe파일을 다운 받아서 설치하면 위 에러는 해결된다.</p><h4 id="그냥-해결방법"><a href="#그냥-해결방법" class="headerlink" title="그냥 해결방법"></a>그냥 해결방법</h4><p>직접 해보진 않았지만, Windows에 설치된 git을 지우고 최신 버전으로 설치해도 해결이 된다고 한다.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> hexo </tag>
            
            <tag> 윈도우 </tag>
            
            <tag> fatal: HttpRequestException encountered. </tag>
            
            <tag> error: failed to execute prompt script (exit code 1) </tag>
            
            <tag> fatal: could not read Username for &#39;https://github.com&#39;: No errpr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드스튜디오 Emulator: ##KBD: Full queue, lose event 오류</title>
      <link href="/2018/01/06/androidStudio-20180106-androidstudio-emulator-kbd-full-queue-lose-event/"/>
      <url>/2018/01/06/androidStudio-20180106-androidstudio-emulator-kbd-full-queue-lose-event/</url>
      
        <content type="html"><![CDATA[<p>어느날 안드로이드스튜디오에서 에뮬레이터를 동작 시켰더니 아래와 같은 오류가 뜨며 에뮬레이터가 멍을 때렸다.</p><p><img src="/images/20180106-androidstudio-emulator-kbd-full-queue-lose-event_1.png" alt="Emulator: ##KBD: Full queue, lose event 오류메시지"></p><p>구글링을 해보니 뭔가 에뮬레이터 메모리 관련 버그로 예상되어, 기존에 사용하던 가상 에뮬레이터를 지우고 다시 생성하니 정상 동작 한다.</p><p><a href="https://stackoverflow.com/questions/7961856/full-queue-lose-event-in-android-emulator" target="_blank" rel="external nofollow noopener noreferrer">stackoverflow 참고자료</a></p>]]></content>
      
      
      <categories>
          
          <category> androidStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> android </tag>
            
            <tag> androidstudio </tag>
            
            <tag> emulator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드 PreferenceFragment로 환경설정 만들기</title>
      <link href="/2018/01/06/android-20180106-android-PreferenceFragment/"/>
      <url>/2018/01/06/android-20180106-android-PreferenceFragment/</url>
      
        <content type="html"><![CDATA[<p>안드로이드 앱에서 환경설정은 필수요소이다.<br>이런 환경설정 부분을 만드는 방법은 여러 가지가 있겠지만, 대표적으로 안드로이드에서 제공하는 PreferenceFragment 클래스를 사용하는 방법을 정리해 보고자 한다.</p><p>앱의 환경설정을 위해서는 액티비티에서 설정화면을 구성하고, 그 화면에서 발생하는 다양한 사용자 이벤트를 처리하여 설정한 데이터를 영속적으로 저장해야 한다.<br>PreferenceFragment 클래스 사용하면 위와 같은 부분을 쉽게 처리 할 수 있다.</p><h4 id="큰-맥락"><a href="#큰-맥락" class="headerlink" title="큰 맥락"></a>큰 맥락</h4><p>1.환경설정 화면 레이아웃 XML을 만든다.<br>2.PreferenceFragment를 이용하여 환경설정 화면에서 발생하는 이벤트 처리 로직이 들어간다.<br>3.환경설정 용 액티비티를 하나 만들고 레이아웃을 fragment로 바꾼다. </p><hr><h4 id="PreferenceFragment로-앱의-환경설정-구현-1단계-화면단-만들기"><a href="#PreferenceFragment로-앱의-환경설정-구현-1단계-화면단-만들기" class="headerlink" title="PreferenceFragment로 앱의 환경설정 구현 1단계: 화면단 만들기"></a>PreferenceFragment로 앱의 환경설정 구현 1단계: 화면단 만들기</h4><ul><li>res 폴더 하위에 values 폴더에 arrays.xml 파일을 만들고 환경설정에서 사용할 문자열 배열 데이터를 저장한다.</li></ul><p><img src="/images/20180106-android-PreferenceFragment_2.png" alt="settings_preference.xml"></p><h5 id="arrays-xml"><a href="#arrays-xml" class="headerlink" title="arrays.xml"></a>arrays.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">"array_voice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>카톡<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>카톡왔숑<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>카톡카톡<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>카카오톡<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>res 폴더 하위에 xml 폴더를 만든다. -&gt; 해당 폴더에 settings_preference.xml 파일을 만든다.<br>settings_preference.xml 파일은 안드로이드 앱의 환결설정 화면의 레이아웃을 표현한다.</li></ul><p>루트태그로 PreferenceScreen를 갖는다.</p><table><thead><tr><th align="left">태그종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">PreferenceScreen</td><td align="left">설정화면 단위, 중첩 가능하며 중첩된 내용은 별도의 화면에 나옴</td></tr><tr><td align="left">PreferenceCategory</td><td align="left">설정 여러 개를 시각적으로 묵어서 표현</td></tr><tr><td align="left">CheckboxPreference</td><td align="left">체크박스가 나오는 설정</td></tr><tr><td align="left">EditTextPreference</td><td align="left">글 입력을 위한 설정</td></tr><tr><td align="left">ListPreference</td><td align="left">항목 다이얼로그를 위한 설정</td></tr><tr><td align="left">MultiSelectListPreference</td><td align="left">항목 다이얼로그인데 체크박스가 자동 추가되어 여러 선택 가능</td></tr><tr><td align="left">RingtonPreference</td><td align="left">알림음 선택을 위한 설정</td></tr><tr><td align="left">SwitchPreference</td><td align="left">스위치를 이용한 설정</td></tr></tbody></table><p><img src="/images/20180106-android-PreferenceFragment_1.png" alt="settings_preference.xml"></p><h5 id="settings-preference-xml"><a href="#settings-preference-xml" class="headerlink" title="settings_preference.xml"></a>settings_preference.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PreferenceScreen</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">PreferenceCategory</span> <span class="attr">android:title</span>=<span class="string">"메시지 알림"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SwitchPreference</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"메시지 알림"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">PreferenceScreen</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">"keyword_screen"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"키워드 알림"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:summary</span>=<span class="string">"사용안함"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">SwitchPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:defaultValue</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"keyword"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"등록된 키워드가 포함된 메시지는 채팅방 알림이 꺼져 있어도 푸시 알림을 받게 되어 키워드는 강조되어 보여 집니다."</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"키워드 알림"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entries</span>=<span class="string">"@array/array_voice"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entryValues</span>=<span class="string">"@array/array_voice"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"keyword_sound_list"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"카톡"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"키워드 전용 알림음"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:dependency</span>=<span class="string">"keyword"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PreferenceScreen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">SwitchPreference</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">"sound"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"소리"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListPreference</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:entries</span>=<span class="string">"@array/array_voice"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:entryValues</span>=<span class="string">"@array/array_voice"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">"sound_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:summary</span>=<span class="string">"카톡"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"알림음음"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PreferenceCategory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">PreferenceScreen</span>&gt;</span></span><br></pre></td></tr></table></figure><p>settings_preference.xml 파일의 안드로이드 스튜디오에서 Design으로 보면 다음과 같이 환경설정 화면을 볼 수 있다.</p><p><img src="/images/20180106-android-PreferenceFragment_3.png" alt="settings_preference.xml 디자인"></p><p><strong>Preference개열의 태그는 안드로이드의 환경설정 스타일의 UI를 제공하며, 위 화면의 환경설정 내용의 상태가 변경되면 자동으로 SharedPreferences 객체로 true 혹은 false 값을 영속적으로 저장</strong>하기 때문에 개발자의 수고를 덜어준다.<br>환경설정 상태 값이 저장될 때 키값은 XML 속성 중 key에 지정한 값을 이용한다.</p><p>ListPreference를 보면 entries와 entryValues 속성값이 존재한다. 이 속성값은 배열 리소스로 등록해야 하기 때문에, 앞서 arrays.xml 파일을 만든 것이다.</p><hr><h4 id="PreferenceFragment로-앱의-환경설정-구현-2단계-환경설정-화면-제어-클래스-만들기"><a href="#PreferenceFragment로-앱의-환경설정-구현-2단계-환경설정-화면-제어-클래스-만들기" class="headerlink" title="PreferenceFragment로 앱의 환경설정 구현 2단계: 환경설정 화면 제어 클래스 만들기"></a>PreferenceFragment로 앱의 환경설정 구현 2단계: 환경설정 화면 제어 클래스 만들기</h4><ul><li>원하는 패키지에 SettingPreferenceFragment.java 를 만들고 PreferenceFragment를 extends 한다.<br>SettingPreferenceFragment.java는 앞서 만든 settings_preference.xml와 연결되어 만들어둔 환경설정 화면과 그 이벤트 처리등을 담당하게 된다.<br>크게 onCreate부분에서는 이미 저장된 환경설정 내용을 가져와, 그 내용들을 환경설정의 summary부분에 셋팅해준다.<br>그리고 prefs.registerOnSharedPreferenceChangeListener(prefListener); 로 연결된 리스너 SharedPreferences.OnSharedPreferenceChangeListener()를 통해서 사용자가 환경설정 하는 순간의 이벤트 처리를 한다.</li></ul><p>예제에 있는 프로젝트 패키지는 원하는대로 수정하길 바란다.</p><h5 id="SettingPreferenceFragment-java"><a href="#SettingPreferenceFragment-java" class="headerlink" title="SettingPreferenceFragment.java"></a>SettingPreferenceFragment.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.android.pomoguru;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.preference.ListPreference;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceFragment;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceScreen;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by amagr on 2018-01-01.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingPreferenceFragment</span> <span class="keyword">extends</span> <span class="title">PreferenceFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SharedPreferences prefs;</span><br><span class="line"></span><br><span class="line">    ListPreference soundPreference;</span><br><span class="line">    ListPreference keywordSoundPreference;</span><br><span class="line">    PreferenceScreen keywordScreen;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        addPreferencesFromResource(R.xml.settings_preference);</span><br><span class="line">        soundPreference = (ListPreference)findPreference(<span class="string">"sound_list"</span>);</span><br><span class="line">        keywordSoundPreference = (ListPreference)findPreference(<span class="string">"keyword_sound_list"</span>);</span><br><span class="line">        keywordScreen = (PreferenceScreen)findPreference(<span class="string">"keyword_screen"</span>);</span><br><span class="line"></span><br><span class="line">        prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!prefs.getString(<span class="string">"sound_list"</span>, <span class="string">""</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">            soundPreference.setSummary(prefs.getString(<span class="string">"sound_list"</span>, <span class="string">"카톡"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!prefs.getString(<span class="string">"keyword_sound_list"</span>, <span class="string">""</span>).equals(<span class="string">""</span>))&#123;</span><br><span class="line">            keywordSoundPreference.setSummary(prefs.getString(<span class="string">"keyword_sound_list"</span>, <span class="string">"카톡"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prefs.getBoolean(<span class="string">"keyword"</span>, <span class="keyword">false</span>))&#123;</span><br><span class="line">            keywordScreen.setSummary(<span class="string">"사용"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prefs.registerOnSharedPreferenceChangeListener(prefListener);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">// onCreate</span></span><br><span class="line"></span><br><span class="line">    SharedPreferences.OnSharedPreferenceChangeListener prefListener = <span class="keyword">new</span> SharedPreferences.OnSharedPreferenceChangeListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharedPreferenceChanged</span><span class="params">(SharedPreferences sharedPreferences, String key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.equals(<span class="string">"sound_list"</span>))&#123;</span><br><span class="line">                soundPreference.setSummary(prefs.getString(<span class="string">"sound_list"</span>, <span class="string">"카톡"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(key.equals(<span class="string">"keyword_sound_list"</span>))&#123;</span><br><span class="line">                keywordSoundPreference.setSummary(prefs.getString(<span class="string">"keyword_sound_list"</span>, <span class="string">"카톡"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(key.equals(<span class="string">"keyword"</span>))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(prefs.getBoolean(<span class="string">"keyword"</span>, <span class="keyword">false</span>))&#123;</span><br><span class="line">                    keywordScreen.setSummary(<span class="string">"사용"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    keywordScreen.setSummary(<span class="string">"사용안함"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2뎁스 PreferenceScreen 내부에서 발생한 환경설정 내용을 2뎁스 PreferenceScreen에 적용하기 위한 소스</span></span><br><span class="line">                ((BaseAdapter)getPreferenceScreen().getRootAdapter()).notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="PreferenceFragment로-앱의-환경설정-구현-3단계-빈-액티비티를-통해-환경설정-화면-열기"><a href="#PreferenceFragment로-앱의-환경설정-구현-3단계-빈-액티비티를-통해-환경설정-화면-열기" class="headerlink" title="PreferenceFragment로 앱의 환경설정 구현 3단계: 빈 액티비티를 통해 환경설정 화면 열기"></a>PreferenceFragment로 앱의 환경설정 구현 3단계: 빈 액티비티를 통해 환경설정 화면 열기</h4><ul><li>이번 3단계에서는 이미 만들어진 환경설정 내용을 화면에 보여주기위해 액티비티에 연결하는 부분이다. 간단하므로 SettingActivity 액티비티와 그 레이아웃 activity_setting.xml의 소스로 설명을 대신한다.<br>역시 예제에 있는 프로젝트 패키지는 원하는대로 수정하길 바란다.</li></ul><h5 id="SettingActivity-java"><a href="#SettingActivity-java" class="headerlink" title="SettingActivity.java"></a>SettingActivity.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanumoka.android.pomoguru.activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> com.hanumoka.android.pomoguru.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_setting);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="activity-setting-xml"><a href="#activity-setting-xml" class="headerlink" title="activity_setting.xml"></a>activity_setting.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fragment</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/settings_fragment"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.hanumoka.android.pomoguru.SettingPreferenceFragment"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>activity_setting.xml는 일반적인 액티비티의 레이아웃이 아니라 fragment라는 태그를 사용한다.<br>중요한 부분은 android:name 속성에 2단계에서 만든 환경설정 제어 클래스를 등록한다.<br>이제 완성이다 SettingActivity 액티비티를 동작 시켜보자.</p><p><img src="/images/20180106-android-PreferenceFragment_4.png" alt="SettingActivity 실행화면"></p><p>자동으로 설정된 값들을 영속적으로 저장하고 있기때문에, 앱을 종료후 다시 접속해도 그 환경설정 데이터가 지워지지 않고 유지된다. </p><p>지금까지의 환경설정 부분의 구조를 보면</p><p>arrays.xml —&gt; settings_preference.xml —&gt; SettingPreferenceFragment.java —&gt; activity_setting.xml —&gt; SettingActivity.java</p><p>위와 같이 연결된 구조이다. arrays.xml같은 경우 ListPreference, MultiSelectListPreference를 사용하지 않는다면 필요가 없을 수도 있다.</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 안드로이드 </tag>
            
            <tag> PreferenceFragment </tag>
            
            <tag> 환경설정 </tag>
            
            <tag> PreferenceScreen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java에서 익명클래스에 대한 착각(a illusion of anonymous inner class)</title>
      <link href="/2018/01/02/java-20180102-java-A-illusion-of-anonymous-inner-class/"/>
      <url>/2018/01/02/java-20180102-java-A-illusion-of-anonymous-inner-class/</url>
      
        <content type="html"><![CDATA[<p>안드로이드 책을 보다가 익명클래스에 대한 설명이 잘 되어있어 그것들을 정리해 보고자 한다.</p><p>예제 소스를 통해서 익명클래스에 대한 착각을 설명하겠다.</p><h5 id="1번-예제"><a href="#1번-예제" class="headerlink" title="1번 예제"></a>1번 예제</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAA aaa = <span class="keyword">new</span> AAA();</span><br></pre></td></tr></table></figure><p>1번 예제는 아주 단순한 예제이다. AAA이라는 클래스에 객체를 생성하는 소스이다. </p><h5 id="2번-예제"><a href="#2번-예제" class="headerlink" title="2번 예제"></a>2번 예제</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BBB bbb = <span class="keyword">new</span> BBB()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gazaaaaa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"가즈아ㅏㅏㅏㅏㅏ ~ 2018"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2번 예제를 보면, 익명클래스를 구현하는 소스이다.<br>여기서 쉽게 할 수 있는 착각은 <strong>bbb는 BBB라는 클래스의 객체라고</strong> 생각 할 수 있다.<br>하지만 여기선 <strong>bbb는 BBB라는 클래스의 객체가 아니라 BBB라는 클래스를 확장한 익명 클래스의 객체이다.</strong></p><p>만약 BBB가 클래스라면 bbb는 BBB를 상속받은 이름 없는 하위 클래스를 선언하고 그 객체를 부여 받은 것이고, BBB가 인터페이스라면 bbb는 BBB라는 인터페이스를 구현한 이름 없는 클래스의 객체를 부여받게 된다.</p><p>조금 더 자세한 소스로 확인해 보자. 아래는 예제로 만들어본 Test01.java 라는 파일의 간단한 소스이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gazaaaaa</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BBB bbb1 = <span class="keyword">new</span> BBB() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gazaaaaa</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"가즈아ㅏㅏㅏㅏㅏ ~ 2018"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bbb1.gazaaaaa();</span><br><span class="line"></span><br><span class="line">BBB bbb2 = <span class="keyword">new</span> BBB();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"bbb1 클래스명:"</span> + bbb1.getClass().getName());</span><br><span class="line">System.out.println(<span class="string">"bbb2 클래스명:"</span> + bbb2.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20180102-java-A-illusion-of-anonymous-inner-class.png" alt="위 소스 실행결과"></p><p>결과를 보면 알겠지만, BBB클래스의 익명클래스의 객체인 bbb1의 클래스 네임은 BBB로 나오지 않고, Test01$1 이라고 나온다.<br><strong>Test01$1</strong> 이라는 표현은 익명클래스의 표현 방식이라고 한다. </p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2017/09/15/java-Anonymouse-class/">자바 익명클래스(java anonymouse class)</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 익명클래스 </tag>
            
            <tag> anonymous inner class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드 토스트 사용법(Toast)</title>
      <link href="/2017/12/31/android-20171231-android-toast/"/>
      <url>/2017/12/31/android-20171231-android-toast/</url>
      
        <content type="html"><![CDATA[<hr><p>안드로이드에서 가장 쉽게 화면에 알림을 띄우는 방법은 토스트(Toast)를 사용하는 것이다.<br>쉽고 간편하기 때문에 나는 개발시 간단한 값 확인등 테스트를 위해서도 종종 토스트를 사용하기도 한다. </p><h4 id="토스트-Toast-의-특징"><a href="#토스트-Toast-의-특징" class="headerlink" title="토스트(Toast)의 특징"></a>토스트(Toast)의 특징</h4><ul><li>토스트는 <strong>모덜리스(Modeless)</strong> 방식 다이얼로그이다.</li></ul><ul><li>토스트는 알림메세지를 띠운 뒤, 지간이 지나면 자동으로 사라진다. 따라서 사용자 확인이 꼭 필요한 메시지는 토스트가 아니라 AlertDialog로 띄워야 한다.</li></ul><h5 id="모달-Modal-다이얼로그와-모덜리스-Modeless-다이얼로그란"><a href="#모달-Modal-다이얼로그와-모덜리스-Modeless-다이얼로그란" class="headerlink" title="모달(Modal) 다이얼로그와 모덜리스(Modeless) 다이얼로그란?"></a>모달(Modal) 다이얼로그와 모덜리스(Modeless) 다이얼로그란?</h5><ul><li>모달 다이얼로그(Modal Dialog) : 다이얼로그를 닫기 전까지 원래 창(해당 다이얼로그를 호출한 창)을 사용자가 사용 할 수 없다. 안드로이드의 알림창(AlertDialog)가 모달 다이알로그 이다.</li></ul><ul><li>모덜리스 다이얼로그(Modeless Dialog) : 다이얼로그가 화면에 떠 있더라도 사용자가 원래의 창을 계속 사용 할 수 있다. 안드로이드의 토스트(Toast)는 모덜리스 다이얼로그이다.</li></ul><hr><h4 id="토스트-사용-예제"><a href="#토스트-사용-예제" class="headerlink" title="토스트 사용 예제"></a>토스트 사용 예제</h4><p>간단히 아래처럼 한줄로 안드로이드 화면에 알림을 뛰울 있다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"약속의 땅으로 가즈아ㅏㅏㅏㅏㅏㅏㅏ~"</span>, Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure><h5 id="토스트-동작화면"><a href="#토스트-동작화면" class="headerlink" title="토스트 동작화면"></a>토스트 동작화면</h5><p><img src="/images/20171231-android-toast.png" alt="토스트 가즈아~~~~"></p><p>토스트는 사용자의 컨펌을 받는 알림 메세지가 아니라 그냥 보든 말든 흘러가는 알림이다.<br>따라서 중요한 알림을 토스트에 사용하는 것은 적합하지 않아 보인다.</p><p>makeText 메소드의 형식은 다음과 같다.</p><ul><li><p>makeText(Context context, int resId, int duration)</p></li><li><p>makeText(Context context, CharSequence text, int duration)</p></li></ul><p>세번째 인자가 토스트 메세지의 유지시간으로 이 시간이 지나면 메세지는 사라진다.<br><strong>이 값은 임의의 숫자값을 지정 할수 없으며 다음과 같은 Toast의 내장된 상수값을 지정해야 한다.</strong></p><ul><li>LENGTH_SHORT : 3 초</li><li>LENGTH_LONG : 5 초</li></ul><p>지금까지 안드로이드 토스트의 사용법을 정리해 보았다.<br>문뜩 든 생각인데 쉽고 간편한 사용법 때문에 토스트라는 이름이 붙은 것은 아닐까 한다.</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 안드로이드 </tag>
            
            <tag> 토스트 </tag>
            
            <tag> Toast </tag>
            
            <tag> 모덜리스 </tag>
            
            <tag> 모달 </tag>
            
            <tag> Modal </tag>
            
            <tag> Modeless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드 하이어라키(하이라키) 이벤트 모델(Hierachy Event Model)</title>
      <link href="/2017/12/30/android-20171230-android-hierachy-event-model/"/>
      <url>/2017/12/30/android-20171230-android-hierachy-event-model/</url>
      
        <content type="html"><![CDATA[<h4 id="하이어라키-이벤트-모델로-할수-있는-것"><a href="#하이어라키-이벤트-모델로-할수-있는-것" class="headerlink" title="하이어라키 이벤트 모델로 할수 있는 것"></a>하이어라키 이벤트 모델로 할수 있는 것</h4><ul><li><p>안드로이드 액티비티의 터치이벤트 발생시 그 좌표값을 구할 수 있다.</p></li><li><p>안드로이드 단말기의 하드웨어 버튼(뒤로가기 버튼등)의 이벤트 처리를 할 수 있다.</p></li></ul><hr><h4 id="하이어라키-이벤트-모델-정의"><a href="#하이어라키-이벤트-모델-정의" class="headerlink" title="하이어라키 이벤트 모델 정의"></a>하이어라키 이벤트 모델 정의</h4><ul><li>안드로이드 액티비티 화면에서 발생하는 사용자의 <strong>키 이벤트</strong>와 화면 터치 이벤트를 처리하기 위한 모델.</li></ul><p>[ 잠깐! 위에서 말하는 <strong>키 이벤트</strong>에 대해 좀 설명이 필요할 것 같다. ]</p><p><img src="/images/20171230-android-hierachy-event-model_1.png" alt="소프트(soft) 키보드"></p><p>하이어라키 이벤트 모델에서 처리하는 키 이벤트는 위의 안드로이드 앱 내부에 존재하는 소프트 키보드를 말하는 것이 아니라</p><p><img src="/images/20171230-android-hierachy-event-model_2.png" alt="안드로이드 단말기 하드웨어(hardware) 키"></p><p>위와 같은 메뉴버튼, 홈 버튼, 돌아가기 버튼 등과 같이, <strong>안드로이드 단말기에 하드웨어 적으로 장착된 키의 이벤트</strong>를 말한다.</p><ul><li>안드로이드 앱에서의 대부분의 터치 이벤트는 뷰에서 발생하기 때문에 델리게이션 이벤트 모델을 사용하는 것이 일반적이지만, 때에 따라 직접 터치 이벤트와 키 이벤트를 처리해야 할 경우 사용 된다.</li></ul><ul><li>하이어라키 이벤트 모델로 액티비티의 터치 이벤트를 처리할 때에는 터치가 발샌한 지점등을 x,y 좌표값으로 제공하기 때문에 필요한 처리를 하는데 델리게이션 이벤트 모델보다 까다로운 면이 있다.</li></ul><hr><h4 id="하이어라키-이벤트-모델의-특징"><a href="#하이어라키-이벤트-모델의-특징" class="headerlink" title="하이어라키 이벤트 모델의 특징"></a>하이어라키 이벤트 모델의 특징</h4><p>하이어라키 이벤트 모델은 델리게이션 모델처럼 이베트 소스 - 리스너 - 이벤트 헨들러 구조가 아니다.<br>액티비티의 전체적인 터치 이벤트 등을 관리 하기 때문에 원하는 액티비티에 이벤트 발생 시 자동 호출되는 함수만 해당 액티비티 내에 재정의 하면 된다.<br>델리게이션 이벤트 모델보다 소스코드가 직관 적이라 구조자체는 이해하기 쉽다.</p><hr><h4 id="하이어라키-이벤트의-터치-이벤트-안드로이드-화면-터치-좌표-구하기"><a href="#하이어라키-이벤트의-터치-이벤트-안드로이드-화면-터치-좌표-구하기" class="headerlink" title="하이어라키 이벤트의 터치 이벤트(안드로이드 화면 터치 좌표 구하기)"></a>하이어라키 이벤트의 터치 이벤트(안드로이드 화면 터치 좌표 구하기)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">      Toast.makeText(getApplicationContext(), <span class="string">"터치된 화면의 x 좌표 :"</span> event.getRawX(), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 소스는 액티비티가 터치 될 시에 터치된 화면의 x좌표를 구하는 소스이다. 액티비티의 터치시 그 좌표값 정보를 알고 싶다면 해당 액티비티의 onTouchEvent를 위 처럼 재정의 하여 사용하면 된다. </p><table><thead><tr><th align="left">터치 이벤트 종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">ACTION_DOWN</td><td align="left">화면에 터치된 순간의 이벤트</td></tr><tr><td align="left">ACTION_UP</td><td align="left">터치를 떼는 순간의 이벤트</td></tr><tr><td align="left">ACTION_MOVE</td><td align="left">터치한 후 이동하는 순간의 이벤트</td></tr></tbody></table><p>onTouchEvent 메소드에서 호출되는 터치 이벤트는 위와 같다. </p><table><thead><tr><th align="left">좌표정보 메소드 종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">getX()</td><td align="left">터치 이벤트가 발생한 x 좌표 but 뷰 내에서의 좌표를 반환</td></tr><tr><td align="left">getY()</td><td align="left">터치 이벤트가 발생한 y 좌표 but 뷰 내에서의 좌표를 반환</td></tr><tr><td align="left">getRawX()</td><td align="left">터치 이벤트가 발생한 화면에서의 x 좌표를 반환</td></tr><tr><td align="left">getRawY()</td><td align="left">터치 이벤트가 발생한 화면에서의 y 좌표를 반환</td></tr></tbody></table><p>MotionEvent 객체를 통해 좌표를 가져오는 메소드는 위와 같다.</p><hr><h4 id="하이어라키-이벤트의-하드웨어-키-이벤트-안드로이드-단말기-뒤로가기-버튼-이벤트-처리"><a href="#하이어라키-이벤트의-하드웨어-키-이벤트-안드로이드-단말기-뒤로가기-버튼-이벤트-처리" class="headerlink" title="하이어라키 이벤트의 하드웨어 키 이벤트(안드로이드 단말기 뒤로가기 버튼 이벤트 처리)"></a>하이어라키 이벤트의 하드웨어 키 이벤트(안드로이드 단말기 뒤로가기 버튼 이벤트 처리)</h4><p>하이어라키 이벤트를 이용하여 안드로이드 하드웨어 키의 이벤트 처리를 할 수 있다.(앞서 말했듯이 소프트 키보드 이벤트 처리가 아니다.)<br>안드로이드 단말기의 하드웨어 키는 주로 홈, 뒤로가기 버튼 또는 메뉴, 검색, 오버뷰 등이 있을 수 있다.<br>안드로이드 단말기에 따라 하드웨어 키가 다를 수 있다는 것을 염두해 두어야 한다.<br>다만 홈, 전원, 오버벼 버튼은 일반 애플리케이션에서 이벤트 처리로 제어 할 수 없다.</p><p><strong>따라서 앱에서 키 이벤트 처리는 뒤로가기 버튼 처리가 대부분이다.</strong><br>예를 들어 메인 액티비티에서 안드로이드 단말기의 하드웨어 뒤로가기 버튼을 눌렀을 때, 앱을 종료 시키는 경우가 있을 수 있겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, keyEvent event)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK)&#123;</span><br><span class="line">      <span class="comment">//이곳에 안드로이드 단말의 하드웨어 뒤로가기 버튼 클릭시 처리하고 싶은 코드를 넣으면 되겠다.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//단말기 종류에 따라 접근 가능한 하드웨어 키를 제어 할 수도 있다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앞서 터치이벤트 처럼 단순히 액티비티의 onKeyDown메소드를 재정의 하면 된다.<br>단말기의 하드웨어 키의 이벤트 종류에 따라 다음의 메소드를 필요에 따라 재정의 하여 사용 하면 된다.</p><ul><li><p>onKeyDown : 안드로이드 단말기의 하드웨어 키가 눌린 이벤트발생 시 동작</p></li><li><p>onKeyUp : 안드로이드 단말기의 하드웨어 키가 떼는 이벤트발생 시 동작</p></li><li><p>onKeyLongPress : 안드로이드 단말기의 하드웨어 키가 오래 누르는 이벤트발생 시 동작</p></li><li><p>onBackPressed : 이 함수는 오직 단말기의 뒤로가기 버튼 제어만 목적으로 만들어 졌으므로 다른 키 이벤트는 처리할 수 없다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//오직 단말기의 뒤로가기 버튼이 눌렸을 때문 동작.</span></span><br><span class="line">    <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아마도 단말기의 뒤로가기 버튼에 대한 이벤트 처리가 빈번해서 onBackPressed 메소드를 따로 만들어 둔 것이 아닌가 생각된다.<br>지금까지 하이어라키 이벤트 모델에 대하여 정리해 보았다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2017/12/28/android-delegation-event-model/">델리게이션 이벤트 모델(Delegation Event Model)</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 안드로이드 이벤트 모델 </tag>
            
            <tag> 델리게이션 이벤트 모델 </tag>
            
            <tag> Delegation Event Model </tag>
            
            <tag> 하이어라키 이벤트 모델 </tag>
            
            <tag> Hierachy Event Model </tag>
            
            <tag> event model </tag>
            
            <tag> 하이라키 이벤트 모델 </tag>
            
            <tag> 안드로이드 화면 터치 좌표 </tag>
            
            <tag> 안드로이드 하드웨어 뒤로가기 버튼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드 델리게이션 이벤트 모델(Delegation Event Model)</title>
      <link href="/2017/12/28/android-20171228-android-delegation-event-model/"/>
      <url>/2017/12/28/android-20171228-android-delegation-event-model/</url>
      
        <content type="html"><![CDATA[<p>안드로이드 스마트폰 화면에서 발생하는 사용자 이벤트는 크게 두 가지 모델로 나눌 수 있다.<br>하나는 델리게이션 이벤트 모델(Delegation Event Model) 그리고 하이어라키 이벤트 모델(Hierachy Event Model)이다.<br>이번에는 델리게이션 이벤트 모델에 대해 알아보도록 하겠다.</p><h4 id="델리게이션-이벤트-모델-Delegation-Event-Model"><a href="#델리게이션-이벤트-모델-Delegation-Event-Model" class="headerlink" title="델리게이션 이벤트 모델(Delegation Event Model)"></a>델리게이션 이벤트 모델(Delegation Event Model)</h4><p>간단히 말해서 안드로이드 액티비티 내부에 존재하는 다양한 뷰(View)에서 발생하는 이벤트를 처리하는 모델이다.<br>델리게이션 이벤트 모델의 기본구조는 이벤트 소스(이벤트가 발생한 뷰 객체)와 이벤트 핸들러(이벤트 처리 내용을 가지는 객체)를 리스너로 연결하여 처리하는 구조이다.</p><p><img src="/images/20171228-android-delegation-event-model.jpg" alt="델리게이션 이벤트 모델 도식화"></p><p>사실 액티비티에서 발생하는 터치 이벤트 등은 액티비티의 이벤트를 관리하는 하이어라키 이벤트 모델로 처리 할 수도 있다.<br>하지만, 특정 버튼의 터치 여부를 확인 하기 위해 좌표정보를 이용하는 방법은 나 같이 게으르고 아둔한 개발자에겐 버거운 일일 것이다.</p><p>다음 간단하게 델리게이션 이벤트 모델의 구조를 소스코드로 확인해보자.<br>아래는 btn이라는 뷰객체의 클릭이벤트를 처리하는 간단한 소스이다.</p><p>btn이라는 이름의 뷰객체에서 클릭 이벤트가 발생하면 setOnClickListener 함수의 인자의 익명객체의 onClick함수가 동작하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.setOnClickListener(<span class="keyword">new</span> View.OnclickListener()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...클릭 이벤트에 필요한 코드 자리</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 소스를 좀 풀어서 설명하자면,<br>btn은 클릭 이벤트가 발생하는 뷰 객체이다.<br>btn.setOnClickListener 메소드는 btn에 클릭이벤트가 발생할 때 발생된 이벤트 객체를 핸들러에게 전달하는 전달자이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> View.OnclickListener()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...클릭 이벤트에 필요한 코드 자리</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>리스너의 인자로 전달되는 View.OnclickListener 인터페이스를 구현한 익명 클래스는 리스너가 뷰객체로 부터 받은 이벤트 객체를 처리할 핸들러이다.</p><p>뷰는 다양한 종류가 있고 그리고 뷰에 따라 발생하는 이벤트의 차이가 있다.<br>따라서 해당 이벤트를 처리하는 핸들러도 특정 이벤트를 처리하기 위해 최소한의 구조가 필요하고, 안드로이드에서는 그 구조들을 뷰 클래스들의 인터페이스로 제공 하고 있다.<br>따라서 핸들러 클래스는 꼭 지정된 인터페이스를 구현해야 한다.</p><h4 id="안드로이드-뷰에서-제공되는-주요-이벤트들"><a href="#안드로이드-뷰에서-제공되는-주요-이벤트들" class="headerlink" title="안드로이드 뷰에서 제공되는 주요 이벤트들"></a>안드로이드 뷰에서 제공되는 주요 이벤트들</h4><table><thead><tr><th align="left">Event 종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">OnClickListener</td><td align="left">뷰 클릭 시 발생 이벤트</td></tr><tr><td align="left">OnLongClickListener</td><td align="left">뷰를 오래 클릭시 발생 이벤트</td></tr><tr><td align="left">OnCheckedChangeListener</td><td align="left">CheckBox의 상태 변경시 발생 이벤트</td></tr><tr><td align="left">OnItemClickListener</td><td align="left">ListView의 항목 선택시 이벤트</td></tr><tr><td align="left">OnDateSetListener</td><td align="left">DatePicker의 날짜 선택시 이벤트</td></tr><tr><td align="left">OnTimeSetListener</td><td align="left">TimePicker의 시간 선택시 발생 이벤트</td></tr></tbody></table><p>앞서 예제에서 사용한 클릭이벤트 뿐만 아니라 다양한 뷰에 따른 이벤트들이 존재 한다. 델리게이션 이벤트 모델을 기초로 상황에 맞게 필요한 이벤트 인터페이스를 구현한 핸들러를 사용하면 된다.</p><p>지금까지 안드로이드 뷰의 이벤트처리모델인 델리게이션 이벤트 모델에 대해 정리해 봤다.<br>자바를 책을 볼때 이 익명 클래스를 어디에서 사용하지 고개를 갸웃했었는데, 안드로이드를 보니 좀 감이 오는 것 같다. 아닌 것도 같고…</p><p>다음에는 하이어라키 이벤트 모델에 대해 정리해 봐야겠다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2017/12/30/android-hierachy-event-model/">하이어라키 이벤트 모델(Hierachy Event Model)</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 안드로이드 이벤트 모델 </tag>
            
            <tag> 델리게이션 이벤트 모델 </tag>
            
            <tag> Delegation Event Model </tag>
            
            <tag> 하이어라키 이벤트 모델 </tag>
            
            <tag> Hierachy Event Model </tag>
            
            <tag> event model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android Toolbar 사용하기(menu추가)</title>
      <link href="/2017/10/28/android-20171028-android-toolbar/"/>
      <url>/2017/10/28/android-20171028-android-toolbar/</url>
      
        <content type="html"><![CDATA[<h4 id="ToolBar란"><a href="#ToolBar란" class="headerlink" title="ToolBar란"></a>ToolBar란</h4><p>안드로이드의 Activity의 상단을 보면 ActionBar라는 것이 있었다.<br>그런데 안드로이드 API21 부터 ActionBar는 deprecated되고 ToolBar라는 것이 추가 되었다.<br><strong>ToolBar란 기존의 ActionBar를 대체하는 View의 일종이다.</strong><br>ToolBar란 View이기 때문에 기존의 ActionBar에서는 할수 없던 것, 또는 하기 어려웠던 것들을 쉽게 코드로 제어 할 수 있다. (위치제어 등…)<br>이제부터는 deprecated된 ActionBar대신 ToolBar를 사용해야 할 것 같다.</p><hr><h4 id="ActionBar-VS-ToolBar"><a href="#ActionBar-VS-ToolBar" class="headerlink" title="ActionBar VS ToolBar"></a>ActionBar VS ToolBar</h4><p>ActionBar : View가 아니다. 따라서 위치나 내부 아이템을 제어하기 힘들다.<br>ToolBar : View다. 따라서 기타 View처럼 제어하기가 슆다.</p><hr><h4 id="ToolBar-적용하기"><a href="#ToolBar-적용하기" class="headerlink" title="ToolBar 적용하기"></a>ToolBar 적용하기</h4><p>안드로이드 스튜디오에서 Empty Activity로 진행한 예제다.<br>예제에서 사용된 아이콘 이미지등은 안드로이드스튜디오에서 재공하는 것들이다.</p><h5 id="1-기존의-ActionBar-제거하기"><a href="#1-기존의-ActionBar-제거하기" class="headerlink" title="1.기존의 ActionBar 제거하기"></a>1.기존의 ActionBar 제거하기</h5><p><img src="/images/20171028-android-toolbar_01.png" alt="ActionBar"></p><p>위 빨간 표시의 액션바를 일단 제거해 보자.<br>안드로이드 프로젝트의 res/values/styles.xml 파일을 연다.<br>Style태그의 parent속성 값을 Theme.AppCompat.Light.NoActionBar 로 바꾼다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 변경된 소스 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[style.xml]</p><p><img src="/images/20171028-android-toolbar_02.png" alt="ActionBar가 제거된 액티비티"></p><p>액티비티를 다시열어보면 위처럼 액션바가 사라진 것을 볼 수 있다.</p><h5 id="2-ToolBar-추가하기"><a href="#2-ToolBar-추가하기" class="headerlink" title="2. ToolBar 추가하기"></a>2. ToolBar 추가하기</h5><p>activity_main.xml 파일을 열고 아래 처럼 ToolBar 뷰를 추가 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.hanumoka.android.test01.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 툴바, 추가된 소스 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/my_toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[activity_main.xml]</p><p>MainAcitivity.java 파일을 아래처럼 수정한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 추가된 소스</span></span><br><span class="line">    Toolbar myToolbar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 추가된 소스, Toolbar를 생성한다.</span></span><br><span class="line">        myToolbar = (Toolbar) findViewById(R.id.my_toolbar);</span><br><span class="line">        setSupportActionBar(myToolbar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[MainAcitivity.java]</p><p>그리고 다시 애뮬레이터를 동작시키면 아래처럼 ToolBar가 추가 된 것을 볼 수 있다.<br>ActionBar와 모습은 똑같지만, 이녀석은 ToolBar이다.</p><p><img src="/images/20171028-android-toolbar_03.png" alt="Toobar가 적용된 액티비티"></p><h5 id="3-ToolBar에-버튼을-추가하기-메뉴추가"><a href="#3-ToolBar에-버튼을-추가하기-메뉴추가" class="headerlink" title="3. ToolBar에 버튼을 추가하기(메뉴추가)"></a>3. ToolBar에 버튼을 추가하기(메뉴추가)</h5><p>/res 경로에 menu라는 Android resource directory를 만든다. <strong>여기서 이 디렉토리명은 반드시 menu로 지정해야 한다.</strong><br>새로 생성한 menu 디렉토리 안에 menu.xml 파일을 생성한다.<br>그리고 아래의 내용물을 채워 넣자.<br>menu.xml로 ToolBar에 들어갈 항목(메뉴)의 레이아웃을 정의한다.<br>item태그에 icon은 안드로이드스튜디오에서 제공하는 asset image나 svg를 사용했다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- "Mark Favorite", should appear as action button if possible --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_settings"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"환경설정"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings_black_24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Settings, should always be in the overflow --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_settings2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"항목1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_settings3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"항목2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[menu.xml]</p><p>MainActivity.java파일로 이동해서 onCreateOptionsMenu, onOptionsItemSelected메소드를 오버라이딩으로 추가한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Toolbar myToolbar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        myToolbar = (Toolbar) findViewById(R.id.my_toolbar);</span><br><span class="line">        setSupportActionBar(myToolbar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//추가된 소스, ToolBar에 menu.xml을 인플레이트함</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return super.onCreateOptionsMenu(menu);</span></span><br><span class="line">        MenuInflater menuInflater = getMenuInflater();</span><br><span class="line">        menuInflater.inflate(R.menu.menu, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//추가된 소스, ToolBar에 추가된 항목의 select 이벤트를 처리하는 함수</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return super.onOptionsItemSelected(item);</span></span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.action_settings:</span><br><span class="line">                <span class="comment">// User chose the "Settings" item, show the app settings UI...</span></span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"환경설정 버튼 클릭됨"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// If we got here, the user's action was not recognized.</span></span><br><span class="line">                <span class="comment">// Invoke the superclass to handle it.</span></span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"나머지 버튼 클릭됨"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[MainAcitivity.java]</p><p>다시 에뮬레이터를 동작 시키면 다음과 같이 Toolbar에 아이콘 형태의 item이 추가된 것을 볼 수 있다.</p><p><img src="/images/20171028-android-toolbar_04.png" alt="메뉴가 추가된 Toolbar"></p><h5 id="4-툴바-왼쪽에-버튼-추가하기"><a href="#4-툴바-왼쪽에-버튼-추가하기" class="headerlink" title="4.툴바 왼쪽에 버튼 추가하기"></a>4.툴바 왼쪽에 버튼 추가하기</h5><p>이번엔 Toolbar의 왼쪽에 버튼을 추가해 보자.<br>MainActivity.java파일로 가서 onCreate 함수에 아래처럼 코드를 추가하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        myToolbar = (Toolbar) findViewById(R.id.my_toolbar);</span><br><span class="line">        setSupportActionBar(myToolbar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//추가된 소스코드, Toolbar의 왼쪽에 버튼을 추가하고 버튼의 아이콘을 바꾼다.</span></span><br><span class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_dehaze_black_24dp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>[MainAcitivity.java]</p><p>다시 애뮬레이터를 시작하면 아래처럼 Toolbar왼쪽에도 버튼이 추가된 것을 볼 수 있다.</p><p><img src="/images/20171028-android-toolbar_05.png" alt="왼쪽에 버튼이 추가된 Toolbar"></p><h5 id="5-툴바의-프로젝트-명-제거하기-변경"><a href="#5-툴바의-프로젝트-명-제거하기-변경" class="headerlink" title="5.툴바의 프로젝트 명 제거하기(변경)"></a>5.툴바의 프로젝트 명 제거하기(변경)</h5><p>setTitle 라는 메소드로 툴바의 타이틀을 변경 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        myToolbar = (Toolbar) findViewById(R.id.my_toolbar);</span><br><span class="line">        setSupportActionBar(myToolbar);</span><br><span class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_dehaze_black_24dp);</span><br><span class="line"></span><br><span class="line">        getSupportActionBar().setTitle(<span class="string">""</span>);  <span class="comment">//해당 액티비티의 툴바에 있는 타이틀을 공백으로 처리</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20171028-android-toolbar_06.png" alt="프로젝트명이 제거된 ToolBar"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> toolbar </tag>
            
            <tag> actionbar </tag>
            
            <tag> menu추가 </tag>
            
            <tag> 프로젝트명 지우기 </tag>
            
            <tag> menu.xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java Thread와 MainThread</title>
      <link href="/2017/10/24/java-20171024-java-thread-mainthread/"/>
      <url>/2017/10/24/java-20171024-java-thread-mainthread/</url>
      
        <content type="html"><![CDATA[<p>운영체제에서는 실행중인 하나의 어플리케이션을 프로세스(process)라고 부른다. 즉 메모리에 올라가 현재 동작중인 프로그램을 프로세스라고 한다. 그렇다면 쓰레드(Thread)는 무엇을 말하는 것일까?</p><p><strong>쓰레드는 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 말한다. 일반적으로 한 프로그램은 하나의 쓰레드를 가지고 있지만, 프로그램 환경에 따라 둘 이상의 쓰레드를 동시에 실행할 수 있다. 이러한 실행 방식을 멀티쓰레드(multithread)라고 한다.</strong></p><p>프로그램이 동작을 하려면 적어도 최소 한개의 쓰레드는 반드시 필요하다.<br>자바 프로그램에서는 그 역할을 Main메소드가 한다. *<em>java에서 Main 메소드는 프로그램의 시작 엔트리 포인트면서 동시에 Main 쓰레드라고 볼 수 있다. *</em><br>메인쓰레드는 필요에 따라 서브 쓰레드들을 만들어서 병렬로 코드를 실행할 수 있다. 즉 멀티 쓰레드를 생성해서 멀티 태스킹을 수행한다.</p><p>싱글 쓰레드 프로그램인 경우 메인 쓰레드가 종료하면 프로세스도 종료된다.<br>하지만 멀티쓰레드 프로그램인 경우 실행중인 쓰레드가 하나라도 있다면 프로세스는 종료 되지 않는다.<br><strong>메인쓰레드가 이미 종료되었더라도 아직 종료되지 않고 동작중인 쓰레드가 있다면 그 프로세스는 종료되지 않는다.</strong></p><p><img src="/images/20171024-java-thread.png" alt="싱글과 멀티쓰레드"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
            <tag> main thread </tag>
            
            <tag> main </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android - RGBA chart</title>
      <link href="/2017/10/12/android-20171012-android-RGBA-chart/"/>
      <url>/2017/10/12/android-20171012-android-RGBA-chart/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20171012-android-RGBA-chart.png" alt="RGBA 차트"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RGBA </tag>
            
            <tag> RGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android - Conxtext란?</title>
      <link href="/2017/10/11/android-20171011-android-context/"/>
      <url>/2017/10/11/android-20171011-android-context/</url>
      
        <content type="html"><![CDATA[<h4 id="프로그래밍에서-컨텍스트란"><a href="#프로그래밍에서-컨텍스트란" class="headerlink" title="프로그래밍에서 컨텍스트란?"></a>프로그래밍에서 컨텍스트란?</h4><p>컨텍스트(context)란 프로그래밍을 하다보면 자주 접하게 되는 단어이다. </p><blockquote><p>영어뜻 context(명사) : 1. (어떤일의)맥락, 전후 사정 2.(글의)맥락, 문맥</p></blockquote><p>일반적인 의미로서 컨텍스트는 어떤 일,글 따위에 대한 전체적인 내용을 포괄적으로 말하는 것이다. 즉 어떤것의 모든 것을 컨텍스트라고 볼 수 있다.</p><p>프로그래밍에 context라는 말도 비슷한 의미이다. 다른 것이 있다면 주어가 항상 프로그램 그 차제로 고정되어 있다는 것이다.<br>프로그래밍에서 컨텍스트를 아주 일반화해서 말하면 프로그램 그 자체라고 볼수있다. 조금 더 세세하게 표현하자면 프로그램 전체를 아우르며 접근 및 제어(컨트롤) 할 수 있는 코어라고 볼수 있다. </p><hr><h4 id="안드로이드의-컨텍스트란"><a href="#안드로이드의-컨텍스트란" class="headerlink" title="안드로이드의 컨텍스트란?"></a>안드로이드의 컨텍스트란?</h4><p>안드로이드에서도 안드로이드 어플리케이션 전체를 아우르며 컨트롤 할수 있는 컨텍스트가 존재하며, 그것을 추상클래스로 구현해 놓았다. 다음은 안드로이드의 context의 사전적 의미이다.</p><blockquote><p>어플리케이션 환경에 관한 글로벌 정보를 접근하기 위한 인터페이스. Abstract 클래스이며 실재 구현은 안드로이드 시스템에 의해 제공된다. Context 를 통해, 어플리케이션에 특화된 리소스나 클래스에 접근할 수 있을 뿐만 아니라, 추가적으로, 어플리케이션 레벨의 작업 - Activity 실행, Intent 브로드캐스팅, Intent 수신 등, 을 수행하기 위한 API 를 호출 할 수도 있다.</p></blockquote><p>예를 들어 대저택(안드로이드 앱)이 있고 그 집의 주인(개발자) 가 있다면, 안드로이드 컨텍스트는 대저택의 집사쯤 된다고 생각 할수 있겠다. 주인(개발자)은 본인 대신 대저택(개발중인 앱)의 관리를 집사에게 맞기고 필요한 것들을 집사(컨텍스트)에게 명령 하기만 하면된다.<br>실제 코딩에서 개발자는 안드로이드 앱의 리소스에 접근하기 위해 특정 리소스의 파일 경로등에 직접 접근할 필요 없이, 아래처럼 컨텍스트에게 리소스 정보를 달라고 요청만 하면 그만이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getResources();</span><br></pre></td></tr></table></figure><hr><h4 id="컨텍스트의-종류"><a href="#컨텍스트의-종류" class="headerlink" title="컨텍스트의 종류"></a>컨텍스트의 종류</h4><p><strong>Application Context</strong> – 이 컨텍스트는 실행중인 안드로이드 어플리케이션 프로세스의 <strong>Singletone instances</strong> 이다.<br>즉, 안드로이드 Application 프로세스가 생성될 때 Application Context 생성되고, 안드로이드 Application 프로세스가 종료될 때  Application Context가 같이 사라진다.<br>Activity이나 Service에서는 getApplication() 메소드를 통해 getApplicationContext()로 이 Application Context를 얻어 올 수 있다. 이 컨텍스트는 안드로이드 어플리케이션 프로세스의 Singletone instances이므로 어디서나 동일한 인스턴스를 받게 된다.</p><p><strong>(Activity / Service) Context</strong> – Activity 와 Service는 본인 그 자체가 context이다. Activity와 Service 모두 ContextWrapper를 상속받기 때문이다.<br>(Activity / Service) Context는 Application Context를 확장한 개념이며, Activity또는 Service자신의 라이프사이클을 따라간다. Activity또는 Service는 자신이 그 자체가 Context이니 당연한 말일 것이다.<br>Activity Context인경우 자신의 뷰 컴포넌트를 관리하기 위해서는 Application Context가 아니라 자신의 Activity Context에 접근해야 한다. Activity java코드에서 <strong>this키워드</strong>가 바로 이것이다.</p><hr><h4 id="BroadcastReceiver와-ContentProvider에서의-Context"><a href="#BroadcastReceiver와-ContentProvider에서의-Context" class="headerlink" title="BroadcastReceiver와 ContentProvider에서의 Context"></a>BroadcastReceiver와 ContentProvider에서의 Context</h4><p><strong>BroadcastReceiver</strong> – 위의 2가지와 다르게 자기자신이 Context자체는 아니다. 하지만 onRecevie()시 Context를 가져올 수 있는데, 이때의 Context는 ReveiverRestrictedContext이며 두가지 기능 registerReceiver()와 bindService()를 사용 할 수 없다. <strong>리시버가 브로드캐스트를 처리 할때마다 새로운 Context가 생성 된다.</strong></p><p><strong>ContentProvider</strong> – 브로드캐스트와 마찬가지로 자기자신이 Context를 상속 받은것은 아니다. 하지만 액세스후 getContext()를 통해 Application Context를 가져 올 수 있다. ContentProvider 동일한 응용프로그램에 대해 호출시, 동일한 응용프로그램의 Singletone instances를 반환하게 된다. 하지만 별도의 프로세스에 있는 경우(서로다른 다른 앱), 프로바이더가 실행되는 응용프로그램의 instances가 반환된다</p><hr><h4 id="컨텍스트-사용시-주의점"><a href="#컨텍스트-사용시-주의점" class="headerlink" title="컨텍스트 사용시 주의점"></a>컨텍스트 사용시 주의점</h4><p>Application Context와 (Activity / Service) Context는 라이프 사이클이 다르다.<br>Application Context는 프로그램 프로세스가 종료되지 않는한 메모리에서 사라지지 않는반면, (Activity / Service) Context는 수업이 생성과 소멸을 반복한다.<br>Context를 참조할 때, (Activity / Service) Context를 참조하는 경우 이미 메모리에서 삭제된 Context를 참조하는 경우가 발생할 수 있다.<br>경우에 따라 다르겠지만, Context를 참조할 때에는 Application Context 참조해야 메모리누수를 피할수 있다.</p><hr><h4 id="컨텍스트-종류에-따라-다른-기능구분-표"><a href="#컨텍스트-종류에-따라-다른-기능구분-표" class="headerlink" title="컨텍스트 종류에 따라 다른 기능구분 표"></a>컨텍스트 종류에 따라 다른 기능구분 표</h4><p><img src="/images/20171011-android-context.png" alt="컨텍스트기능구분표"></p><h3 id="참조한-사이트목록"><a href="#참조한-사이트목록" class="headerlink" title="참조한 사이트목록"></a>참조한 사이트목록</h3><p><a href="http://sunphiz.me/wp/archives/483" target="_blank" rel="external nofollow noopener noreferrer">http://sunphiz.me/wp/archives/483</a><br><a href="http://arabiannight.tistory.com/entry/272" target="_blank" rel="external nofollow noopener noreferrer">http://arabiannight.tistory.com/entry/272</a><br><a href="http://dev.youngkyu.kr/36" target="_blank" rel="external nofollow noopener noreferrer">http://dev.youngkyu.kr/36</a><br><a href="http://wengdiiiy.tistory.com/1" target="_blank" rel="external nofollow noopener noreferrer">http://wengdiiiy.tistory.com/1</a><br><a href="http://www.kmshack.kr/2013/10/android-context-what-context/" target="_blank" rel="external nofollow noopener noreferrer">http://www.kmshack.kr/2013/10/android-context-what-context/</a><br><a href="https://blog.mindorks.com/understanding-context-in-android-application-330913e32514" target="_blank" rel="external nofollow noopener noreferrer">https://blog.mindorks.com/understanding-context-in-android-application-330913e32514</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Context </tag>
            
            <tag> this </tag>
            
            <tag> 컨텍스트 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드스튜디오 한글깨짐 해결방법</title>
      <link href="/2017/10/04/androidStudio-20171004-androidstudio-korean-problem/"/>
      <url>/2017/10/04/androidStudio-20171004-androidstudio-korean-problem/</url>
      
        <content type="html"><![CDATA[<p>안드로이드스튜디오에서 뷰의 디자인화면에서 한글로 입력된 텍스트가 경우 깨지는 경우가 있다. </p><p><img src="/images/20171004-androidstudio-korean-problem_01.png" alt="안드로이드스튜디오 디자인에서 한글깨짐현상"></p><p>해당 문제는 안드로이드스튜디오의 한글 폰트설정을 수정하면 해결 할 수 있다.</p><p>가. 안드로이드스튜디오 설치폴더로 이동한다.<br><strong>C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\fonts 폴더로 이동한 뒤, fonts.xml파일을 에디터로 연다.(에디터를 관리자 모드로 실행하라.)</strong></p><p>나. 텍스트 검색으로 아래의 태그를 찾는다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">family</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>검색결과 NotoSansCJK-Regular.ttc 라는것으로 한글 폰트가 설정되어 있다. </p><p><img src="/images/20171004-androidstudio-korean-problem_02.png" alt="셋팅전 한글폰트"><br><strong>NotoSansCJK-Regular.ttc</strong>를 <strong>NanumGothic.ttf</strong>로 바꿔서 fonts.xml 파일을 저장한다.</p><p>다. 안드로이드스튜디오를 재부팅 시키면 디자인에서 정상적으로 한글이 보인다.</p><p><img src="/images/20171004-androidstudio-korean-problem_03.png" alt="정상적으로 한글 표시"></p>]]></content>
      
      
      <categories>
          
          <category> androidStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> androidstudio </tag>
            
            <tag> 안드로이드스튜디오 </tag>
            
            <tag> 한글깨짐 </tag>
            
            <tag> NanumGothic.ttf </tag>
            
            <tag> fonts.xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>안드로이드스튜디오 자동임폴트 설정(AndroidStudio Auto Import)</title>
      <link href="/2017/10/02/androidStudio-20171002-androidstudio-auto-import/"/>
      <url>/2017/10/02/androidStudio-20171002-androidstudio-auto-import/</url>
      
        <content type="html"><![CDATA[<p>안드로이드스튜디오는 이클립스기반이 아니라 인텔리J기반 IDE 툴이다. 따라서 상당히 햇갈리는 부분이 많이 있다.<br>그중 하나가 자동임폴트이다. </p><p><img src="/images/20171002-androidstudio-auto-import_01.png" alt="셋팅전"><br>안드로이드스튜디오의 초기 셋팅은 자동임폴트 기능이 enabled되어 있다. 위 이미지처럼 import 되어있지 않은 클래스를 코딩할 때 마다 Alt+Enter 를 눌러 달라고 귀찮게 한다. </p><p>안드로이드스튜디오에서 자동임폴트 기능을 활성화 하면 위 같은 귀찮은 것들을 줄일 수 있다.</p><p><img src="/images/20171002-androidstudio-auto-import_02.png" alt="셋팅화면"><br>안드로이드스튜디오의 좌측 상단의 file - Setting 화면에서 Editor - General - Auto Import 화면에서 Optimize imports on the fly, Addunambiguos imports on the fly 두개 항목을 체크하면 된다.</p><p>셋팅이 완료되면 타이핑 하는 그 즉시 자동으로 import가 되며, 번거롭게 Alt+Enter 를 누를 필요가 없어진다.</p>]]></content>
      
      
      <categories>
          
          <category> androidStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> androidstudio </tag>
            
            <tag> auto import </tag>
            
            <tag> setting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>androidstudio - instant run requires &#39;tools android enable adb integration&#39; to be enabled 해결</title>
      <link href="/2017/10/02/androidStudio-20171002-androidstudio-problem-tools-android-enable-adb-intergration/"/>
      <url>/2017/10/02/androidStudio-20171002-androidstudio-problem-tools-android-enable-adb-intergration/</url>
      
        <content type="html"><![CDATA[<p>안드로이드스튜디오에서 개발중인 앱을 가상에뮬레이터에 동작시킬 때 간혹 <strong>Error running app: instant run requires ‘tools android enable adb integration’ to be enabled</strong> 라는 메세지와 함께 동작을 안하는 경우가 있다.<br>오류메세지 말 그대로 enable adb integration 라는 Android tools 가 enabled(비활성화) 되었다는 것이다. 이것을 활성화 해주면 문제가 해결된다.<br>잘 쓰다가 갑작이 왜 비활성화가 되었는지는 아직 의문이다.</p><p><img src="/images/20171002-androidstudio-problem-tools-android-enable-adb-intergration_01.png" alt="오류내용"></p><p>일단 안드로이드스튜디오의 상단 메뉴 Tools -&gt; Android -&gt; Enable ADB Integration 항목을 확인해 보면 비활성화 된 것은 확인 할수있다.</p><p><img src="/images/20171002-androidstudio-problem-tools-android-enable-adb-intergration_02.png" alt="셋팅전"></p><p>해당 항목을 클릭하여 활성화 시키면, 정상적으로 안드로이드앱이 가상에뮬레이터에서 동작 한다.</p><p><img src="/images/20171002-androidstudio-problem-tools-android-enable-adb-intergration_03.png" alt="셋팅후"></p>]]></content>
      
      
      <categories>
          
          <category> androidStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> androidstudio </tag>
            
            <tag> enable adb integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java nested interface(중첩인터페이스)</title>
      <link href="/2017/09/23/java-20170923-java-nested-interface/"/>
      <url>/2017/09/23/java-20170923-java-nested-interface/</url>
      
        <content type="html"><![CDATA[<p>중첩인터페이스(Nested Interface)는 사실 중첩클래스(Nested Class)와 같은 맥락을 갖는다.<br>중첩클래스가 클래스 내부에 선언된 클래스라면 중첩인터페이스는 클래스 내부에 선언된 인터페이스이다.<br>특정 클래스와 아주 긴밀하 연관된 인터페이스일 경우 중첩인터페이스를 사용하며, UI프로그래밍에서 이벤트 처리용으로 주로 사용된다.</p><p>중첩클래스의 경우 인스턴스멤버클래스, 정적멤버클래스, 로컬클래스 3가지의 선언 방법이 있지만, 중첩인터페이스는 클래스의 멤버로만 선언 할 수 있다.</p><h4 id="형태"><a href="#형태" class="headerlink" title="형태"></a>형태</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  OnClickListener listener;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener listener)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">touch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener.onClick();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 내부인터페이스 */</span></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ButtonA클래스는 listener를 소유하고 사용한다.(has-a)<br>만약 ButtonA, ButtonB, ButtonC클래스가 존재하며 각기 다른 타입의 listener를 사용할 경우 즉 자신만이 사용하는 타입의 인터페이스를 선언할 경우 외부가 아니라, 위 처럼 자신 내부에 중첩인터페이스로 선언하여 인터페이스의 외부적변경을 경계할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//내부인터페이스 구현 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerA</span> <span class="keyword">implements</span> <span class="title">ButtonA</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"난 ButtonA를 위해서만 일한다."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 내부 인터페이스를 구현 할 수 있다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2017/09/18/java-nested-class/">중첩클래스</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nested class </tag>
            
            <tag> 중첩클래스 </tag>
            
            <tag> nested interface </tag>
            
            <tag> 중첩인터페이스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java nested class(중첩클래스)</title>
      <link href="/2017/09/18/java-20170918-java-nested-class/"/>
      <url>/2017/09/18/java-20170918-java-nested-class/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/inner_classes_java.jpg" alt></p><h4 id="중첩클래스란-Nested-Class"><a href="#중첩클래스란-Nested-Class" class="headerlink" title="중첩클래스란(Nested Class)?"></a>중첩클래스란(Nested Class)?</h4><p>클래스 내부에 선언한 클래스를 말한다. 인터넷을 찾아보니, 중첩클래스(Nested Class)와 내부클래스(Inner Class) 이름을 혼용해서 사용 하는듯 하다. 본 글에서는 중첩클래스(Nested Class)로 표기한다.<br>중첩클래스는 크게 중첩클래스와 중첩인터페이스 크게 두개로 나뉜다. 이번글은 중접클래스만 다루도록 하겠다.<br>중첩클래스(Nested Class)를 사용하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다는 장점과 외부에서 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.</p><h4 id="중첩클래스-Nested-Class-의-활용에-대한-개인적-고민"><a href="#중첩클래스-Nested-Class-의-활용에-대한-개인적-고민" class="headerlink" title="중첩클래스(Nested Class)의 활용에 대한 개인적 고민"></a>중첩클래스(Nested Class)의 활용에 대한 개인적 고민</h4><p>처음 중첩클래스(Nested Class)를 접했을 때, 대체 이것을 어디에 써먹을 수 있을까 고민을 했었다.<br>당시 고민을 하다가 애라 모르겠다 하고 그냥 책의 페이지를 넘긴 기억이 난다. 그 고민을 지금 다시 정리해 본다. (개인적인 생각 정리라 참고만 하길…)</p><p>자바라는 언어는 객체지향 언어이고 클래스 단위로 프로그래밍을 해야 한다. 내가 만약 어떤 프로그래밍 소스가 필요하다면 그것을 클래스로 만들고 그걸 구현해야 한다. </p><p>로직 -&gt; 클래스 선언(클래스 파일생성) -&gt; 클래스를 객체화</p><p>자바에서는 소스코드의 단위를 클래스 단위로 강제하고 있다. 이로 인해 클래스의 다양한 장점을 이용해서 코딩을 할 수있다. 다들 들어본 재사용성, 다형성, 캡슐화등이 그 대표적인 것들이다.<br>하지만 <strong>만약 재사용이 필요하지 않고 일회성 소스코드를 만들어 사용할 경우에 그 것들을 클래스 파일로 만들어서 사용해야 할까? 재사용이 필요하지 않는 클래스파일의 생성은 소스코드관리의 관점에서 좋지 못한 선택이다.</strong>  </p><p>중첩클래스(Nested Class)는 이런 문제를 해소하기 위해 사용되는 것이라고 생각된다.<br>물론 익명클래스도(anonymouse class) 같은 고민을 해결해 준다. 중첩클래스(Nested Class)와 익명클래스는 둘 다 일회성 코드를 만드는 방법이지만 재사용성 노출범위에서, 그 정도에 차이가 있어보인다.<br>중첩클래스는 클래스를 파일 단위로 만들지는 않지만, 협소하게 재사용이 가능하게 클래스 선언을 한다. 따라서 그만큼 더 클래스의 장점을 사용 할 수 있다. 그에 반해 익명클래스는 클래스를 선언조차 하지 않는다.</p><p>중첩클래스와 익명클래스는 코딩시에 상황과 필요에 따라 선택되어 사용될 뿐이다.</p><p>참고로 디폴트클래스(defualt class)도 하나의 방법이 되겠지만, 디폴트클래스(defualt class)는 프로그래밍의 구조를 너무 느슨하게 만드는 단점을 가지기 때문에 <strong>개인적</strong>으로 지양한다. 따라서 굳이 언급하지 않았다.</p><h4 id="중첩클래스의-종류"><a href="#중첩클래스의-종류" class="headerlink" title="중첩클래스의 종류"></a>중첩클래스의 종류</h4><p><strong>인스턴스 멤버클래스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특징 : 외부 클래스 A의 인스턴스 영역에 선언된 중첩클래스를 인스턴스 멤버클래스 라고 부른다. 인스턴스 멤버클래스(B)에서는 정적필드, 정적메소드를 선언할수 없으며, 외부 A클래스의 객체를 통해 내부 중첩클래스B에 접근하여 B의 구현객체를 생성할 수 있다. B로 구현된 객체는 외부객체의 인스턴스 필드와 외부객체의 클래스의 static영역에 접근 할 수 있다.</p><p><strong>정적 멤버클래스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특징 : 인스턴스 멤버클래스와 다르게 static(정적)으로 선언된 정적 멤버클래스는 모든 종류의 필드, 메소드를 선언 할 수 있으며, 바깥 A클래스를 통해 내부클래스 B에 접근하여 객체를 생성 할 수 있다.<br>당연히 내부클래스의 객체는 외부클래스로 구현된 객체의 인스턴스 영역에는 접근 할수 없으며 외부 클래스 A의 static(정적)영역에만 접근 할 수있다.</p><p><strong>로컬클래스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; ... &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특징 :  method1가 실행할 때만 B중첩클래스 사용가능 하다. 외부 클래스의 모든 영역에 접근 가능하다. 심지어 method1의 메개변수와 로컬변수에도 접근이 가능한데, method1함수가 종료된 이후에도 로컬클래스의 객체는 힙 메모리에 존재해서 계속 사용 될 수 있다. </p><p>본래 매개변수나 로컬변수는 메소드실행이 종료되면 메모리에서 제거되어야 할 대상이다. 하지만 그 매개변수와 로컬변수를 로컬클래스로 생성된 객체가 참조한 경우가 문제가 될 수 있다.<br>자바는 이런 겅우를 위해 컴파일 시 로컬클래스에서 사용하는 매개변수나 로컬변수의 기억장소를 로컬클래스 내부에 복사해 두고 사용한다. <em>(자바스크립트의 클로저를 연상시킨다.)</em><br>중요한 점은 참조만 가능하다는 것이다, <strong>로컬클래스에서 자신을 감싸고 있는 함수의 매개변수와 로컬변수를 접근해서 수정을 할 수 없다. 아니 없어야 한다.</strong> <em>(자바스크립트와는 다르다.)</em><br>따라서 컴파일러는 로컬클레스애서 자신을 감싸고 있는 외부함수의 로컬변수, 매개변수를 수정할 수 없게 강제한다.<br>java7 버전에서는 로컬클래스에서 참조하는 함수의 매개변수와 로컬변수는 반드시 명시적으로 final 선언 했어야 했다.<br>java8에서는 자동으로 final키워드를 내부적으로 붙여준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">  <span class="comment">//자바7 이전</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodJava7</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> localVariable = <span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = arg + localVariable;</span><br><span class="line">        System.out.println(<span class="string">"java7 로컬클래스:"</span> + result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="comment">// Inner</span></span><br><span class="line">    </span><br><span class="line">    Inner java7Inner = <span class="keyword">new</span> Inner();</span><br><span class="line">    java7Inner.method();</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="comment">//methodJava7</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//자바8 이후</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodJava8</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> localVariable = <span class="number">2</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = arg + localVariable;</span><br><span class="line">        System.out.println(<span class="string">"java8 로컬클래스:"</span> + result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="comment">// Inner</span></span><br><span class="line">    </span><br><span class="line">    Inner java8Inner = <span class="keyword">new</span> Inner();</span><br><span class="line">    java8Inner.method();</span><br><span class="line">  &#125;<span class="comment">//methodJava8</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">    Outter o1 = <span class="keyword">new</span> Outter();</span><br><span class="line">    o1.methodJava7(<span class="number">7</span>);</span><br><span class="line">    o1.methodJava8(<span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">"----"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java7 로컬클래스:8</span><br><span class="line">java8 로컬클래스:10</span><br><span class="line">----</span><br></pre></td></tr></table></figure><p>이 중첩클래스라는 것을 잘 쓸지 안쓸지는 모르겠으나, 문법적 구조는 눈에 익혀둘 필요가 있어보여 정리해본다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2017/09/15/java-Anonymouse-class/">익명클래스</a><br><a href="/2017/09/23/java-nested-interface/">중첩인터페이스</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nested class </tag>
            
            <tag> inner class </tag>
            
            <tag> 중첩클래스 </tag>
            
            <tag> 내부클래스 </tag>
            
            <tag> 로컬클래스 </tag>
            
            <tag> 인스턴스 멤버클래스 </tag>
            
            <tag> 정적 멤버클래스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 interface의 변화(default method, static method)</title>
      <link href="/2017/09/16/java-20170916-java8-interface/"/>
      <url>/2017/09/16/java-20170916-java8-interface/</url>
      
        <content type="html"><![CDATA[<p>java8에서 interface의 문법이 약간 변경되어 그 내용을 정리하고자 한다.<br>java7 까지는 인터페이스에 상수, 실행블록이 없는 추상 메소드 선언만 가능했다. 하지만 <strong>java8부터 인터페이스에 디폴트메소드와 정적메소드도 추가로 선언이 가능하다. 이로인해 java의 인터페이스는 더욱 유연해진 코딩을 할 수 있다.</strong></p><h4 id="java8의-인터페이스-형태"><a href="#java8의-인터페이스-형태" class="headerlink" title="java8의 인터페이스 형태"></a>java8의 인터페이스 형태</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 인터페이스명</span>&#123;</span><br><span class="line">  <span class="comment">//상수</span></span><br><span class="line">  타입 상수명 = 값;</span><br><span class="line">  <span class="comment">//추상 메소드</span></span><br><span class="line">  타입 메소드명(매개변수, ...);</span><br><span class="line">  <span class="comment">//디폴트 메소드</span></span><br><span class="line">  <span class="keyword">default</span> 타입 메소드명(매개변수, ...)&#123; ... &#125;</span><br><span class="line">  <span class="comment">//정적 메소드</span></span><br><span class="line">  <span class="keyword">static</span> 타입 메소드명(매개변수)&#123; ...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>자바8에서 인터페이스의 디폴트메소드와 추상메소드가 추가된 이유가 있다.</strong><br>어떤 프로그램에서 인터페이스 A가 있고 이 인터페이스를 구현한 A1, A2, A3…, A10 총 10개의 구현 클래스가 있다고 가정하자. 5년정도 사융하다가 인터페이스 A에 추가기능이 필요해서 추상메소드를 한개 추가하고 새로이 B1이라는 클래스로 인터페이스 A를 구현하게 된다. 문제는 기존에 사용하던 A1 ~ A10의 구현객체에서 B1클래스를 위해 추가된 추상메소드를 추가로 구현해야 한다는 점이다.<br>java8에서는 인터페이스의 디폴트 메소드와, 정적메소드를 추가하여 프로그래밍의 유연성을 높여주고 있다.</p><hr><h4 id="인터페이스의-디폴트메소드-default-method"><a href="#인터페이스의-디폴트메소드-default-method" class="headerlink" title="인터페이스의 디폴트메소드(default method)"></a>인터페이스의 디폴트메소드(default method)</h4><p>디폴트 메소드는 인터페이스에 선언되지만 사실은 객체(구현객체)가 가지고 있는 인스턴스 메소드라고 생각해야 된다. 따라서 <strong>인터페이스를 구현한 객체를 통해서 호출 해야만 한다.</strong> 자바8에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다. 만약 구현객체에서 인터페이스의 디폴트메소드가 적절하지 못하다면, 오버라이딩 하여 수정해서 사용하면 된다.</p><p><strong>형태 : [public] default 리턴타입 메소드명(매개변수, …){ … }</strong></p><h4 id="인터페이스의-정적메소드-static-method"><a href="#인터페이스의-정적메소드-static-method" class="headerlink" title="인터페이스의 정적메소드(static method)"></a>인터페이스의 정적메소드(static method)</h4><p>정적 메소드도 역시 자바8 부터 작성할 수 있는데, 디폴트 메소드와는 달리 객체가 없어도 인터페이스만으로 호출이 가능하다.</p><p><strong>형태 : [public] static 리턴타입 메소드명(매개변수, …){ … }</strong></p><h4 id="java8의-인터페이스의-디폴트메소드-추상메소드-예제"><a href="#java8의-인터페이스의-디폴트메소드-추상메소드-예제" class="headerlink" title="java8의 인터페이스의 디폴트메소드, 추상메소드 예제"></a>java8의 인터페이스의 디폴트메소드, 추상메소드 예제</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Java8InterfaceTest</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> talkCnt = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//디폴트 메소드</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(msg != <span class="keyword">null</span> &amp;&amp; msg.equals(<span class="string">""</span>))&#123;</span><br><span class="line">      System.out.println(msg);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"난 디폴트 메소드다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="comment">// talk</span></span><br><span class="line">  <span class="comment">//정적 메소드</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">talk2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(msg != <span class="keyword">null</span> &amp;&amp; msg.equals(<span class="string">""</span>))&#123;</span><br><span class="line">      System.out.println(msg);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"난 정적 메소드다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="comment">// talk2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Java8InterfaceTest.talk2(<span class="keyword">null</span>); <span class="comment">// 정적메소드 호출</span></span><br><span class="line">    </span><br><span class="line">    Java8InterfaceTest test1 = <span class="keyword">new</span> Java8InterfaceTest()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"달려라!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    test1.run();</span><br><span class="line">    test1.talk(<span class="keyword">null</span>); <span class="comment">// 디폴트 메소드 호출</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="실행결과"><a href="#실행결과" class="headerlink" title="실행결과"></a>실행결과</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">난 정적 메소드다!</span><br><span class="line">달려라!</span><br><span class="line">난 디폴트 메소드다!</span><br></pre></td></tr></table></figure><hr><h4 id="인터페이스의-상속에서-디폴트메소드의-변화"><a href="#인터페이스의-상속에서-디폴트메소드의-변화" class="headerlink" title="인터페이스의 상속에서 디폴트메소드의 변화"></a>인터페이스의 상속에서 디폴트메소드의 변화</h4><p>인터페이스는 인터페이스를 상속 할 수 있다. 자식 인터페이스에서 부모의 인터페이스를 상속할 때, 부모의 디폴트 메소드를 어떻게 할지 선택 할 수있다.</p><ol><li><p>부모 인터페이스의 디폴트 메소드를 그냥 상속한다.</p></li><li><p>부모 인터페이스의 디폴트 메소드를 재정의(Override)한다.</p></li><li><p><strong>부모 인터페이스의 디폴트 메소드를 추상메소드로 재 선언한다.</strong></p></li></ol><p>인터페이스의 디폴트메소드는 인터페이스의 강제성을 조금 유연하게 해주는 기능이다. 하지만 좋게 말하면 유연이고 나쁘게 말한다면 느슨한 것이다. <strong>만약 이 느슨한것을 다시 엄격하게 수정할 필요가 있다면 인터페이스를 상속하여 다시 추상메소드로 재 선언 하는것도 방법이다.</strong><br><em>개인적으로 java8의 인터페이스의 변화는 개발자의 자유도를 높여주는 기능처럼 보이며, 상당히 마음에 든다.</em></p><hr><h4 id="인터페이스-상수-선언-public-static-final-할-때-주의할점"><a href="#인터페이스-상수-선언-public-static-final-할-때-주의할점" class="headerlink" title="인터페이스 상수 선언(public static final)할 때 주의할점"></a>인터페이스 상수 선언(public static final)할 때 주의할점</h4><p>java8의 특징은 아니지만, 자주 햇갈리는 부분이라 추가로 기록한다.<br>일반적인 클래스에서 상수(static final)의 초기화는 선언과 동시 그리고 정적영역(static block) 두 곳 모두에서 가능하다. 하지만 <strong>인터페이스의 상수는 정적영역(static block)에서 초기화 할수 없기 때문에 반드시 선언과 동시에 초기화 해야 한다.</strong> </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> interface </tag>
            
            <tag> 디폴트메소드 </tag>
            
            <tag> 정적메소드 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java Anonymouse class(익명구현객체)</title>
      <link href="/2017/09/15/java-20170915-java-Anonymouse-class/"/>
      <url>/2017/09/15/java-20170915-java-Anonymouse-class/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170915-java-Anonymouse-class.jpg" alt><br>익명구현객체(Anonymouse class)란 말 그래도 이름이 없는 객체이다.일반적으로 인터페이스를 사용하기 위해서는 해당 인터페이스를 구현한 클래스를 만들어야 한다. 예를 들어 하나의 인터페이스를 구현하는 클래스 3개를 만든다면, 3개의 java파일을 미리 만들어야 한다. 하지만 만약 재사용이 불필요한 구현클래스가 필요할땐 어떻게 해야 할까? 한번만 사용할 소스코드를 XXX.java 라는 파일로 만들고 그 것을 파일로 관리 해야만 할까? 프로그래밍에서 관리의 대상이 많아지는 것은 그 만큼 유지보수의 비용이 증가한다는 의미이다.</p><p>이렇게 <strong>일회성이며, 재사용할 필요 없고 파일단위의 관리 대상이 아닌 객체를 만들때</strong> 이 익명구현객체라는 것을 활용 할 수 있다. 문법 형태는 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">인터페이스명 변수 = <span class="keyword">new</span> 인터페이스명()&#123;</span><br><span class="line">  <span class="comment">//인터페이스에 선언된 추상메소드의 구현 메소드</span></span><br><span class="line">  <span class="comment">//해당 인터페이스에 선언된 모든 추상메소드를 구현해야 한다. 없을시 컴파일 에러 발생 </span></span><br><span class="line">  <span class="comment">//추가적으로 필드와 메소드를 선언 할 수 있지만, 익명객체 안에서만 사용할수있다. </span></span><br><span class="line">  <span class="comment">//익명구현객체도 컴파일시 클래스파일이 만들어 지긴한다. 인터페이스명$1(순번) </span></span><br><span class="line">&#125;;  <span class="comment">//익명 클래스의 선언은 하나의 실행문이므로 끝에 세미콜론(;)이 무조건 붙는다.</span></span><br></pre></td></tr></table></figure><h4 id="간단한-예제"><a href="#간단한-예제" class="headerlink" title="간단한 예제"></a>간단한 예제</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//구현할 인터페이스</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymouseTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//익명구현 객체 fooCar</span></span><br><span class="line">    Car fooCar = <span class="keyword">new</span> Car()&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"달려라!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"머.. 멈춰!!!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    fooCar.run();</span><br><span class="line">    fooCar.stop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="실행결과"><a href="#실행결과" class="headerlink" title="실행결과"></a>실행결과</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">달려라!</span><br><span class="line">머.. 멈춰!!!</span><br></pre></td></tr></table></figure><p>즉 <strong>한번 쓰고 버릴 객체가 필요할때 이 익명구현객체란 것을 이용할 수 있다.</strong><br>익명구현객체는 java8의 람다식이나 UI 프로그래밍에서 이벤트의 처리용으로 많이 사용되기 때문에 그 형태를 알아둘 필요가 있다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="/2018/01/02/java-A-illusion-of-anonymous-inner-class/">Java에서 익명클래스에 대한 착각(a illusion of anonymous inner class)</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Anonymouse class </tag>
            
            <tag> 익명객체 </tag>
            
            <tag> 익명구현객체 </tag>
            
            <tag> 무명객체 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java Annotation(어노테이션)이란?</title>
      <link href="/2017/09/15/java-20170915-java-Annotation/"/>
      <url>/2017/09/15/java-20170915-java-Annotation/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170915-java-Annotation.png" alt="override annotation"><br>java5부터 어노테이션이라는 문법이 제공된다. 어노테이션이란 java의 소스코드를 설명하는 <strong>메타데이터</strong>다. 형태는 <strong>@어노테이션명</strong> 이다. 즉 소스코드의 특정부분(클래스, 인터페이스, 메소드, 필드 …)에 <strong>@어쩌구저쩌구</strong>를 붙여서 이 소스코드를 설명한다는 것인데… 누구에게 무엇을 설명한다는 것일까?</p><blockquote><ol><li>컴파일러에게 코드 문법 에러를 체크하도록 정보를 제공</li><li>소프트웨어 개발 툴이 빌드나 배치 시 코드를 자동으로 생성할 수 있도록 정보를 제공</li><li>실행 시(런타임 시) 특정 기능을 실행하도록 정보를제공</li></ol></blockquote><hr><h4 id="컴파일러"><a href="#컴파일러" class="headerlink" title="컴파일러"></a>컴파일러</h4><p>어노테이션의 설명의 대상 중 하나는 컴파일러다. 컴파일러에게 이 소스코드를 어떻게 처리해야 되는 것인지 표시를 해준다. 예를들어 내장 어노테이션인 <strong>@override</strong>경우 해당 메소드가 부모클래스를 오버라이딩 한 메소드라고 컴파일러에게 미리 일러주는 것이다. 따라서 컴파일러는 런타임 이전에 이 메소드가 문제없이 오버라이딩 되었는지 검사한다.<br>개발툴, 빌드툴 등도 이 컴파일러와 비슷한 맥락으로 어노테이션을 사용한다고 생각된다.</p><hr><h4 id="개발자"><a href="#개발자" class="headerlink" title="개발자"></a>개발자</h4><p>어노테이션이 만들어진 목적은 프로그래밍에서 사용하던 xml 파일들을 줄이기 위해서라고 한다. 즉 프로그램에서 사용하는 xml 형태의 다양한 설정정보들, 특히 소스코드를 설명하는 내용의 설정 파일들을 대체하기 위해서이다. 예를 들어 n개의 클래스와 그 n개의 클래스의 설정정보가 xml로 되어있다면 관리의 대상이 두배가 된다.<br>어노테이션은 이런 xml들을 대신 설명이 필요한 대상과 그 설명을 합치게 되었고, 그 결과 어노테이션이란 것이 만들어 졌다.</p><p>예를들어 개발자는 소스코드에 있는 @overide를 보고, <em>해당 메소드는 상속 받은 것</em> 임을 확인할수 있다.</p><hr><h4 id="컨테이너"><a href="#컨테이너" class="headerlink" title="컨테이너"></a>컨테이너</h4><p>어노테이션의 설명의 대상 세번째는 컨테이너 이다.<br>스프링 프레임워크를 만져본 개발자라면 수많은 스프링 어노테이션을 본적이 있을 것이다.<br>프리임워크는 자신 스스로 자바의 클래스를 객체화 하고 조립하고 사용한다. 즉 자신이 주체가 되어 자바 인스턴스의 라이프사이클을 관리한다. 이때 이 어린아이와 같은 프레임워크가 가지고 놀 클래스에 어노테이션으로 라벨을 붙여, 이 부품(클래스)는 용도가 무엇이고 어떻게 사용하고, 문제가 있을시에 어떻게 해야 하며, 테스트는 어떻게 하는지 기타 등등의 정보를 알려줄수 있다. </p><hr><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>자바책에서 어노테이션을 설명하면서, 커스텀어노테이션도 설명 한다. 하지만 공부를 하면서 <strong>내가 이 어노테이션을 공부해서 어디에 활용 할 수 있지?</strong> 라는 고민이 들었다.<br><strong>어노테이션은 메타데이터이다. 즉 프로그램 그 자체에서 동작하는 코드가 아니다.</strong><br>만약 컴파일러, 개발툴, 빌드툴, 테스트툴 또는 스프링프레임워크와 같은 컨테이너를 개발하지 않는 이상 직접 어노테이션을 만들어서 사용해 볼 일이 거의 없을 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 어노테이션 </tag>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 정적 필드 초기화(static initialization)</title>
      <link href="/2017/09/13/java-20170913-java-static-initialization/"/>
      <url>/2017/09/13/java-20170913-java-static-initialization/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170913-java-static-initialization.png" alt><br>java의 정적필드는 클래스로더에 의해 메소드영역에 로드가 된다.정적 필드는 객체생성 이전 클래스가 메모리에 올라가는 시점부터 사용이 가능하다. 따라서 클래스의 생성자는 정적필드의 초기화 위치로 적합하지 못하다. 그렇다면 정적필드는 어떻게 초기화 해야 할까?</p><h3 id="정적필드-초기화-1-선언과-동시에-초기화-하기"><a href="#정적필드-초기화-1-선언과-동시에-초기화-하기" class="headerlink" title="정적필드 초기화 1 : 선언과 동시에 초기화 하기"></a>정적필드 초기화 1 : 선언과 동시에 초기화 하기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>일반적으로 정적필드는 위와 같이 선언과 동시에 초기화 한다. 하지만 외부환경의 영향이나 로직을 통해 정적필드를 초기화 하고 싶을 경우도 있을 것이다.</p><h3 id="정적필드-초기화-2-정적영역-static-block-사용"><a href="#정적필드-초기화-2-정적영역-static-block-사용" class="headerlink" title="정적필드 초기화 2 : 정적영역(static block) 사용"></a>정적필드 초기화 2 : 정적영역(static block) 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> pi;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">  클래스명.pi = <span class="number">3.14</span>;</span><br><span class="line">  System.out.println(<span class="string">"정적영역 초기화 완료..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static { … } 형태의 정적영역을 사용하여 정적필드를 초기화 할 수 있다. 정적영역 역시 클래스가 메모리에 로드되면서 동작한다. </p><h4 id="정적영역-사용시-주의점-1-정적영역에서-인스턴스-멤버에-접근-할-수-없다"><a href="#정적영역-사용시-주의점-1-정적영역에서-인스턴스-멤버에-접근-할-수-없다" class="headerlink" title="정적영역 사용시 주의점 1 : 정적영역에서 인스턴스 멤버에 접근 할 수 없다."></a>정적영역 사용시 주의점 1 : 정적영역에서 인스턴스 멤버에 접근 할 수 없다.</h4><p>정적영역은 클래스 단위의 영역이다. 모든 인스턴스는 자신의 클래스의 정적필드에 접근이 가능하지만, 그 반대로 정적영역에서 인스턴스의 필드에 접근 할 수 없다. 당연한 말일 것이다. 정적영역에서는 접근할 인스턴스를 구별할 수 없기 때문이다. </p><h4 id="정적영역-사용시-주의점-2-static-final도-정적영역에서도-초기화-할-수-있다"><a href="#정적영역-사용시-주의점-2-static-final도-정적영역에서도-초기화-할-수-있다" class="headerlink" title="정적영역 사용시 주의점 2 : static final도 정적영역에서도 초기화 할 수 있다."></a>정적영역 사용시 주의점 2 : static final도 정적영역에서도 초기화 할 수 있다.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI;  <span class="comment">//관용적으로 상수인경우 상수명을 대문자 사용</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  클래스명.PI = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java에서 일반적인 인스턴스 단위의 final 필드을 초기화 하는 방법은 필드 선언과 동시 또는 생성자에서 초기화 해야 한다.</strong>다른 방법은 존재하지 않는다.<br>static final 필드는 final이전에 static영역, 즉 클래스 단위의 필드이기 때문에 일반적인 static 필드 처럼 선언시와 정적영역(static block)에서 초기화 할 수 있다.</p><h4 id="정적영역-사용시-주의점-3-interface의-상수는-정적영역에서-초기화-할-수-없다"><a href="#정적영역-사용시-주의점-3-interface의-상수는-정적영역에서-초기화-할-수-없다" class="headerlink" title="정적영역 사용시 주의점 3 : interface의 상수는 정적영역에서 초기화 할 수 없다."></a>정적영역 사용시 주의점 3 : interface의 상수는 정적영역에서 초기화 할 수 없다.</h4><p>인터페이스의 멤버변수는 모두 상수(public static final)이다. 하지만 이 상수는 정적영역에서 초기화 할 수 없으며, 반드시 선언과 동시에 초기화 해야 한다. (20170917 추가)</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static </tag>
            
            <tag> 초기화 </tag>
            
            <tag> 정적영역 </tag>
            
            <tag> static block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java arbitrary number of arguments(...함수매개변수)</title>
      <link href="/2017/09/10/java-20170910-java-arbitrary-number-of-arguments/"/>
      <url>/2017/09/10/java-20170910-java-arbitrary-number-of-arguments/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170910-java-arbitrary-number-of-arguments.jpg" alt="tips"><br>java의 함수에는 일반적으로 동일한 자료형의 여러개 데이터를 인자로 받을 때, 배열을 인자로 사용 할 수 있다. 하지만 arbitrary number of arguments(… 함수인자)를 사용할 경우 함수는 배열보다도 유연하게 인자를 받을 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... values)</span></span>&#123;...&#125;;</span><br></pre></td></tr></table></figure><p>위와 같은 <strong>자료형 … 매개변수명</strong> 형태로 함수의 인자를 선언 할 수 있다. 예제를 보면 쉽게 이해가 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int형의 파라미터가 몇개가 넘어올지 모를 경우, 대응 할 수 있는 ... 확장된 배열형태의 매개변수 형태</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... values)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//배열로 인자에 접근 할 수 있다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">      total += values[i];</span><br><span class="line">    &#125;<span class="comment">// for</span></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">  &#125;<span class="comment">// sum</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//인자를 아예 안받을 수도 있다.</span></span><br><span class="line">    System.out.println(sum());     <span class="comment">// 결과: 0 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//인자를 하나만 받을 수 있다.</span></span><br><span class="line">    System.out.println(sum(<span class="number">1</span>));     <span class="comment">// 결과: 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//물론 3개도 된다.</span></span><br><span class="line">    System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 결과: 6</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//배열로도 받을 수 있다.</span></span><br><span class="line">    System.out.println(sum(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)); <span class="comment">// 결과: 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] values = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(sum(values)); <span class="comment">// 결과: 15</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>함수를 선언 할때 *<em>동일한 형태의 자료형의 인자가 0개 또는 n가 예상 되거나, 또는 배열형태의 인자가 예상될 경우 *</em>함수 오버로딩을 대신하여 위의 arbitrary number of arguments 사용하면 편 할 것 같다. </p><p>다만 주의 할 점은 <strong>arbitrary number of arguments(… 함수인자)를 사용한 경우 해당 함수는 다른 인자는 갖을 수 없다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... values, <span class="keyword">int</span> b)</span></span>&#123;...&#125;;  <span class="comment">// 컴파일 오류</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... values, String b)</span></span>&#123;...&#125;; <span class="comment">// 컴파일 오류</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> arbitrary number of arguments </tag>
            
            <tag> 함수 </tag>
            
            <tag> 매개변수 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java this() 생성자</title>
      <link href="/2017/09/10/java-20170910-java-this-constructor/"/>
      <url>/2017/09/10/java-20170910-java-this-constructor/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170910-java-this-constructor.png" alt><br>이번에 기록할 내용은 this생성자 이다. (this 키워드가 아니다.)<br>java의 클래스 생성자도 역시 오버로딩이 가능하다. 함수 오버로딩은 훌륭한 기능이다. 다만 일반 함수의 오버로딩이 아니라 생성자의 오버로딩일 경우 객체의 멤버변수를 셋팅하는 경우가 많기 때문에 중복된 소스가 자주 발생한다. </p><p>this() 생성자란 클래스의 생성자 오버로딩시 반복되는 소스를 줄여주는 훌륭한 방법이다.<br>생성자 내부의 코드 블록 첫줄에 this()를 호출함으로 자신의 다른 생성자를 호출 할 수 있다. <strong>주의할 점은 생성자 코드블록 내부의 this() 위에 다른 소스코드가 존재해서는 안된다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">  <span class="comment">//this.name = name;  // this()생성자 위에 있는 코드에는 컴파일 오류가 발생한다.</span></span><br><span class="line"> <span class="keyword">this</span>(name, <span class="number">12</span>);  <span class="comment">//자동으로 해당 파라미터에 적합한 자신의 생성자를 호출한다.</span></span><br><span class="line"> System.out.println(<span class="string">"this생성자 아래에는 다른 코드가 존재 할 수 있다."</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"> <span class="comment">//this.name = name;  // this()생성자 위에 있는 코드에는 컴파일 오류가 발생한다.</span></span><br><span class="line"> <span class="comment">//this.age = age;    // this()생성자 위에 있는 코드에는 컴파일 오류가 발생한다.</span></span><br><span class="line"> <span class="keyword">this</span>(name, age, <span class="string">"Man"</span>);  <span class="comment">//자동으로 해당 파라미터에 적합한 자신의 생성자를 호출한다.</span></span><br><span class="line"> System.out.println(<span class="string">"this생성자 아래에는 다른 코드가 존재 할 수 있다."</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"> <span class="keyword">this</span>.age = age;</span><br><span class="line"> <span class="keyword">this</span>.sex = sex;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예제소스를 보면 쉽게 이해가 될것이다. 편리한 기능이라 생각되어 이렇게 기록해 놓는다. </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> this() </tag>
            
            <tag> this 생성자 </tag>
            
            <tag> 생성자 오버로딩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 고통의 NaN Infinity</title>
      <link href="/2017/09/08/java-20170908-java-NaN-Infinity/"/>
      <url>/2017/09/08/java-20170908-java-NaN-Infinity/</url>
      
        <content type="html"><![CDATA[<p>Java에서 / 또는 % 연산자를 사용할 때, 제수가 정수 0인 경우 RuntimeException 중 하나인 ArithmeticException 발생한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> z = x / y;</span><br><span class="line">  <span class="keyword">int</span> z = x % y;</span><br><span class="line">  System.out.println(<span class="string">"z:"</span> + z);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">  e.printStackTrace();  <span class="comment">// 다음과 같은 예외 발생: java.lang.ArithmeticException: / by zero</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문제는 / 또는 % 연산자를 사용할 때, 제수가 정수 0이 아닌 <strong>실수 0.0 또는 0.0f인</strong> 경우이다. 이때는 ArithmeticException이 발생하는 것이 아니라, <strong>Infinity(무한)</strong>, <strong>NaN(Not a Number)</strong>라는 값이 발생한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">3</span> / <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">5</span> % <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a);   <span class="comment">// 결과 : Infinity</span></span><br><span class="line">System.out.println(b);   <span class="comment">// 결과 : NaN</span></span><br><span class="line"></span><br><span class="line">System.out.println(a + <span class="number">12</span>); <span class="comment">// 결과 : Infinity</span></span><br><span class="line">System.out.println(b * <span class="number">6</span>);  <span class="comment">// 결과 : NaN</span></span><br></pre></td></tr></table></figure><p>수학적으로 오류가 발생해야 하는 것임에도 ArithmeticException가 발생하지 않는다. 거기다 a, b변수는 double의 자료형임에도 Infinity, NaN 이라는 문자열 형태 데이터가 출력된다.(잘은 모르겠으나, Double wrapper 클래스가 개입하는 것이라고 개인적으로 추측해본다.)<br>거기다 이 Infinity, NaN는 오라클의 null 값과 비슷 한 특성을 가지고 있다. 오라클의 null에 어떤 연산을 가하면 미지의 쓰레기 값이 발생하는데, 이 java에서의 Infinity, NaN에 어떤 추가적 산술연산을 할경우 Infinity는 계속 Infinity가 되며 NaN도 계속 NaN이 된다.</p><p>Double.isInfinite(a)와 Double.isNaN(b)를 이용하여 Infinity와 NaN를 값을 확인 할 수 있다. 따라서 다음과 같이 Infinity, NaN을 방어하는 코드를 만들수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Double.isInfinite(a) || Double.isNaN(a))&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 애시당초 0.0 또는 0.0f와 같은 값들을 정수 0로 치환하여 / 또는 % 연산시 자동으로 ArithmeticException가 발생하게 하는 편이 더 편할 것 같다.</p><p>마지막으로 Infinity, NaN에 관련하여 생각해야할 문제점이 있다. 그것은 Double.valueOf(x)의 멍청함이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> val = Double.valueOf(<span class="string">"NaN"</span>);    <span class="comment">// 오류가 나지 않고 NaN값이 저장된다.</span></span><br><span class="line"><span class="keyword">double</span> val2 = Double.valueOf(<span class="string">"Infinity"</span>);  <span class="comment">// 오류가 나지 않고 Infinity값이 저장된다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> foo1 = <span class="number">1000.0</span>;</span><br><span class="line"><span class="keyword">double</span> foo2 = <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">foo1 += val;</span><br><span class="line">foo2 += val2;</span><br><span class="line"></span><br><span class="line">System.out.println(foo1);  <span class="comment">// 결과 NaN</span></span><br><span class="line">System.out.println(foo2);  <span class="comment">// 결과 Infinity</span></span><br></pre></td></tr></table></figure><p>위 예제를 보면 Double.valueOf의 인자로 <strong>문자열 NaN, Infinity</strong>를 받는다. 하지만 코드를 실행시 어떠한 오류없이 동작하며 콘솔에는 NaN, Infinity가 출력된다. 재앙이 아닐 수 없다.</p><p><img src="/images/20170908-java-NaN-Infinity.jpg" alt></p><p>정리하자면<br><strong>java의 산술식에서 0.0또는 0.0f같은 값은 정수 0으로 치환하는 편이 좋아보이며, Double.valueOf함수를 사용시 반드시 Double.isInfinite, Double.isNaN를 통하여 후처리를 해줘야 할 것 같다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> NaN </tag>
            
            <tag> Infinity </tag>
            
            <tag> Double.isInfinite </tag>
            
            <tag> Double.isNaN </tag>
            
            <tag> Double.valueOf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java floating point issue(부동소수점 산술 시 문제점)</title>
      <link href="/2017/09/08/java-20170908-java-floating-point-issue/"/>
      <url>/2017/09/08/java-20170908-java-floating-point-issue/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170908-java-floating-point-issue.jpg" alt="부동소수점"></p><h3 id="부동소수점"><a href="#부동소수점" class="headerlink" title="부동소수점"></a>부동소수점</h3><p>코딩을 공부하다보면, 누구나 마주해야할 최악의 적! floating point! 이것은 자바언어의 문제가 아니라 컴퓨터의 자체적인 문제로 실수의 표현 및 계산 시 오차의 원인이 되는 이유이다.<br>간단히 말해 자바는 실수표현을 부동소수점을 이용하기 때문에 정확한 실수를 저장 할 수 없으며, 최대한 완벽에 가깝기를 바라는 근사치 값을 저장한다.</p><p><a href="https://ko.wikipedia.org/wiki/%EB%B6%80%EB%8F%99%EC%86%8C%EC%88%98%EC%A0%90#.EC.A0.95.ED.99.95.EB.8F.84_.EB.AC.B8.EC.A0.9C" target="_blank" rel="external nofollow noopener noreferrer">부동소수점의 정확도 문제(위키)</a></p><hr><h4 id="부동소수점-산술시-문제"><a href="#부동소수점-산술시-문제" class="headerlink" title="부동소수점 산술시 문제"></a>부동소수점 산술시 문제</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//예제1: 부동소수점 산술시 문제점</span></span><br><span class="line"><span class="keyword">int</span> apple = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> piceUnit = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> result = apple - number * piceUnit;  <span class="comment">// 원하는 계산:  1 - 7 * 0.1 = 0.3</span></span><br><span class="line">System.out.println(result); <span class="comment">// 결과 : 0.29999999999999993</span></span><br></pre></td></tr></table></figure><p>1 - 7 * 0.1 산술식의 정확한 계산은 0.3이다. 하지만 결과는 0.29999999999999993 이다. 원인은 double이라는 실수형 자료형이 0.1을 정확히 표현하지 못하기 때문이다. 정말 성가신 녀셕이 아닐 수 없다.</p><p>따라서 실수의 정확한 계산을 위한 한가지 방법으로는 정수형태로 계산을 한 뒤, 소수점을 나중에 반영하는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//예제2: 부동소수점 산술시 문제점 해결방법</span></span><br><span class="line"><span class="keyword">int</span> apple = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> totalPieces = apple * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> temp = totalPieces - number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> result = temp / <span class="number">10.0</span>;   <span class="comment">// 이런식으로 나중에 소수점 만큼의 계산 결과에 나눠준다.</span></span><br><span class="line">System.out.println(result);  <span class="comment">// 결과 : 0.3</span></span><br></pre></td></tr></table></figure><p>만약 자바를 이용해서 계산기 같은 것을 만든다면, 위와 같은 부동수수점 산술시에 실수들을 정수형태로 변형해서 계산하는 것을 고려해볼 필요가 있다.</p><hr><h4 id="double과-float의-비교연산시-문제"><a href="#double과-float의-비교연산시-문제" class="headerlink" title="double과 float의 비교연산시 문제"></a>double과 float의 비교연산시 문제</h4><p>float는 4바이트 실수, double은 8바이트 실수 값을 저장 할 수 있다. 부동소수점으로 실수를 표현하기 때문에 double은 float보다 상대적으로 보다 더 정확한 실수를 표현 할 수 있다.<br>문제는 1미만의 값을 갖는 double과 float간의 정확도 차이이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1.0</span> == <span class="number">1.0f</span>);  <span class="comment">// 결과 : true</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> == <span class="number">1.1f</span>);  <span class="comment">// 결과 : false</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> == <span class="number">0.1f</span>);  <span class="comment">// 결과 : false</span></span><br><span class="line">System.out.println(<span class="number">0.9</span> == <span class="number">0.9f</span>);  <span class="comment">// 결과 : false</span></span><br><span class="line">System.out.println(<span class="number">0.01</span> == <span class="number">0.01f</span>);  <span class="comment">// 결과 : false</span></span><br></pre></td></tr></table></figure><p>위 예제를 눈으로면 보면 다 true일 것이라 착각 하기 쉽다. 하지만 주석처럼 맨 윗줄만 제외하고 다 false를 출력한다. 이유는 눈에 보이지는 않지만 float와 double자료형의 실수 표현의 정밀도의 차이가 발생하기 때문이다. 따라서 <strong>double과 float값을 비교 할때에는 모두 float로 형변환 하거나 정수로 변환하여 비교해야 한다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="keyword">float</span>)<span class="number">1.1</span> == <span class="number">1.1f</span>);  <span class="comment">// 결과 : true</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> == (<span class="keyword">double</span>)<span class="number">0.1f</span>);  <span class="comment">// 결과 : false</span></span><br><span class="line">System.out.println(<span class="number">0.1f</span> == (<span class="keyword">double</span>)<span class="number">0.1f</span>);  <span class="comment">// 결과 : true</span></span><br></pre></td></tr></table></figure><p>주의 할 점은 0.1f를 double로 형변환 하여 비교해도 될 거라 생각 할 수 있는데, (double)0.1f는 double의 공간에 float의 정밀도를 갖는 값이 저장될 뿐이다. 따라서 double형의 0.1과 비교해도 결과가 true로 나올 수 없다. </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> floating point </tag>
            
            <tag> 부동소수점 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java datatype overflow(데이터 오버플로어)</title>
      <link href="/2017/09/08/java-20170908-java-datatype-orverlow/"/>
      <url>/2017/09/08/java-20170908-java-datatype-orverlow/</url>
      
        <content type="html"><![CDATA[<p>java언어에서는 datatype(자료형)이라는 것이 존재한다.<br>자료형이란 변수에 저장 될 데이터의 형태를 지정하는 용도로 사용되며, 정수 실수 문자 논리 등등 다양한 형태로 존재한다. datatype overflow란 이 java에서 산술연산을 할 경우 해당 변수의 자료형의 표현 범위를 초과할 경우 쓰레기값이 발생되는 경우를 말한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//예제1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> c = a * b;</span><br><span class="line">System.out.println(c);  <span class="comment">// 결과 : -727379968</span></span><br></pre></td></tr></table></figure><p>정수형 int 변수 c에는 1000000000000 이라는 값이 저장되는 것이 아니라, -727379968라는 예상치 못한 값이 저장된다.<br>그 이유는 int가 표현할수 있는 정수값의 범위에 1000000000000 와 같이 큰 정수값이 저장될수 없기 때문이다.<br>java의 자료형 범위는 다음과 같다.</p><p><img src="/images/20170908-java-datatype-overflow.png" alt="data overflow"></p><p>따라서 예제1의 경우 int보다 큰 long자료형을 사용하여 해결 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//예제2</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">long</span> c = a * b;  </span><br><span class="line">System.out.println(c);  <span class="comment">// 결과 : -727379968</span></span><br></pre></td></tr></table></figure><p>최종으로 연산된 값이 저장될 c변수의 자료형을 int보다 큰 long으로 변경 했음에도 여전히 값은 -727379968라는 쓰래기 값이 저장된다. 실수하기 쉬운 부분인데 c는 long 타입이지만 c에 피연자인 a, b는 여전히 int이므로 결과적으로 c에는 예제1과 마찬가지로 쓰레기 값이 저장된다.<br>따라서 산술식의 피연산자중 최소 한개는 long 타입이어야 올바른 계산이 된다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//예제3</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">long</span> c = (<span class="keyword">long</span>)a * b;  </span><br><span class="line">System.out.println(c);  <span class="comment">// 결과 : 1000000000000</span></span><br></pre></td></tr></table></figure><p>산술로직을 사용할 경우 위와 같은 문제를 방어하기 위한 전용 산술 함수를 사용하는 편이 코딩에 효과 적일 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> datatype </tag>
            
            <tag> overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>마크다운(markdown)</title>
      <link href="/2017/09/07/web-20170907-markdown1/"/>
      <url>/2017/09/07/web-20170907-markdown1/</url>
      
        <content type="html"><![CDATA[<h3 id="마크다운이란"><a href="#마크다운이란" class="headerlink" title="마크다운이란"></a>마크다운이란</h3><p>간단히 말해서 웹 문서 전용 글쓰기 마크업 언어이다. 웹에서 보여질 심플한 문서(대표적으로 HTML)를 간편하고 쉽게 작성하기 위해 만들어진 마크업 언어이다. 일반적으로 웹 페이지를 만들기 위해서는 HTML언어를 사용해야 한다.</p><p>코딩 할 때 개인적으로 순수 HTML의 명료성을 좋아하지만, 단순한 글을 쓰기위한 목적으로 쓰기에는 너무 많은 수고가 발생한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>간단한 문서<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">H1</span>&gt;</span>간단한 문서를 써보자<span class="tag">&lt;/<span class="name">H1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">아이고 몇줄 쓰는데 온 갖 태그를 타이핑 해야 된다. 힘들당<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span>WYSIWYG에디터라도 있었으면...<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>마크다운은 몇 개의 특수문자를 이용한 간단한 문법을 이용하여, html로 변환할 수 있는 문서를 작성할 수 있다. 물론 html도 간단한 문법을 가지고 있지만, 마크다운에 비할바는 아니다. 마크다운을 한번 써보면 누구나 느낄 것이다. 사람 손으로 키보드에서 타이핑 하기가 정말 편하다. 물론 간단한 문법이기 때문에 HTML의 일부분 기능만 사용 할 수 있다. 하지만 내가 원하는 간단한 글쓰기 용으로는 부족해 보이지 않는다.</p><p><strong>마크다운 문서 -&gt; 마크다운 변환기 -&gt; HTML 문서</strong></p><p>내가 이 마크다운을 접하게 된 계기는 Jekyll, hexo등의 정적 블로그 프레임워크를 만들면서였다. 블로그에서 간단한 문서를 작성하는 방법으로 jekyll, hexo, ghost 등의 블로그 프레임워크에서 마크다운을 지원하고 있다.</p><p>네이버블로그, 티스토리등에서 지원하는 WYSIWYG에디터는 웹에서 간편하게 글을 쓸수 있지만, 그 것으로 작성되어 변환된 HTML은 지옥의 죄수들을 갈아놓은 스프와 같아보였다. 거기다 WYSIWYG에디터에서 소스코드등을 삽입하기 위해서는 플러그인또는 js를 건드려야 한다.</p><p>반면 마크다운으로 작성된 문서의 HTML은 상대적으로 심플하며, 자체적으로 제공하는 심플한 문법으로 소스코드 삽입이 아주 편하다. Typora라는 마크다운 에디터를 사용하면, 마크다운의 문법의 러닝커브도 상당히 줄어든다.</p><hr><h3 id="마크다운-에디터-Typora"><a href="#마크다운-에디터-Typora" class="headerlink" title="마크다운 에디터(Typora)"></a>마크다운 에디터(Typora)</h3><p>마크다운문서도 문서의 종류일 뿐이다. 메모장으로 작성해도 되지만, 요즘 세상에 편리한 툴을 두고 고생을 하는 것는 인생을 낭비하기에 딱 좋은 방법일 뿐 이다.</p><p>마크다운문서는 html로 변환되어야 할 기초 문서이다. 따라서 현재 내가 적성하고 있는 마크다운 문서를 html로 변환하고 또는 실시간으로 그 변화된 모습을 보여주는 기능이 있는 에디터가 필요했다.</p><p><img src="/images/20170907-markdown1.png" alt="아톰에디터 마크다운 작성화면"></p><p>위 화면은 아톰에디터에서 마크다운 플러그인을 설치하여 마크다운을 작성하는 화면이다. 아톰도 나름 쓸만했지만, 낮은 신뢰도와 너무 무거웠다. 그리고 한 화면에 마크업문서와 변환문서가 같이 보이므로 화면이 너무 좁아져서 불편한 감이 있었다.</p><p>그러다 찾게 된 마크다운 에디터는 Typora였다. Typora의 가장 큰 장점은 마크다운 문서를 작성하는 동시에 HTML로 변환된다는 것이다. <strong>한 화면에서!</strong> 거기다 간한단 단축키, 단축메뉴에서 마크다운 문법을 UI에서 지원하므로 나처럼 마크다운 문법이 생소한 경우 손쉽게 문서를 작성할 수 있다.</p><p>개인적으로 <strong>Typora = markdown계의 WYSIWYG에디터</strong> 이런 느낌이다. Windows, Mac, Linux모두 지원하므로 만약 마크다운을 입문하는 사람들에게는 Typora에디터를 추천한다.<br><a href="https://typora.io/" target="_blank" rel="external nofollow noopener noreferrer" title="Typora">Typora홈페이지</a></p><hr><h3 id="마크다운-기본문법"><a href="#마크다운-기본문법" class="headerlink" title="마크다운 기본문법"></a>마크다운 기본문법</h3><p><a href="https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4" target="_blank" rel="external nofollow noopener noreferrer" title="마크다운 위키">마크다운 위키</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 마크다운 </tag>
            
            <tag> markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache웹서버 윈도우에 설치하기</title>
      <link href="/2017/08/31/apache-20170831-apache-install-windows/"/>
      <url>/2017/08/31/apache-20170831-apache-install-windows/</url>
      
        <content type="html"><![CDATA[<h3 id="아파치-Apache-웹서버-윈도우10-환경에-설치"><a href="#아파치-Apache-웹서버-윈도우10-환경에-설치" class="headerlink" title="아파치(Apache) 웹서버 윈도우10 환경에  설치"></a>아파치(Apache) 웹서버 윈도우10 환경에  설치</h3><p>windows10 64bit 운영체제에 아파치 웹서버를 설치하는 방법을 설명하겠다.</p><br>1. 웹 브라우저를 통해 https://www.apachelounge.com/download/ 로 이동>![](/images/2017-06-11-apache설치_1.png)원하는 아파치 웹서버 버전을 선택후 64bit zip 파일을 클릭하여 다운받는다.>![](/images/2017-06-11-apache설치_2.png)<ol start="2"><li>해당 파일을 C:\ 경로로 이동후 압축을 푼다.<blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_3.png" alt><br>폴더 내부로 이동하여 Apache24 폴더를 잘라내기 한 후 다시 C:\ 경로로 이동하여 붙여넣기 한다.</p></blockquote></li></ol><p>최종적으로 아래와 같이 폴더 구성이 되면 된다.</p><blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_4.png" alt></p></blockquote><ol start="3"><li>아파치 웹서버 설치전 환경 설정<blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_5.png" alt></p></blockquote></li></ol><p>C:\Apache24\conf 경로로 이동하여 httpd.conf 파일을 수정해야 한다.<br>파일을 메모장으로 연뒤 원하는 항목을 수정하면 되는데 여러 항목중에 다음 항목들이 중요하다.</p><blockquote><p>기본셋팅<br>ServerRoot “c:/Apache24”<br>Listen 80<br>DocumentRoot “c:/Apache24/htdocs”</p></blockquote><p>ServerRoot 항목은 기본적으로 “c:/Apache24” (경로 구분을 역슬래시로 해야 한다.) 되어 있다. 이 디폴트 셋팅을 그대로 사용하기 위해서 2번처럼 폴더 경로를 지정한 것이다. 만약 위 설명과 다른 폴더경로에 웹서버 폴더를 셋팅 했다면 ServerRoot 항목의 셋팅을 알맞게 수정해 주면 된다.</p><p>Listen 항목은 웹서버의 포트(port)설정이다. 웹서버는 기본적으로 80포트이다.(디폴트라 생략이 가능하다. <a href="http://www.naver.com" target="_blank" rel="external nofollow noopener noreferrer">www.naver.com</a> 와 <a href="http://www.naver.com:80" target="_blank" rel="external nofollow noopener noreferrer">www.naver.com:80</a> 은 같다)<br>원하는 포트가 있다면 역시 수정하라. (필자는 8080으로 수정하였다. )</p><p>DocumentRoot 항목은 웹서버에서 실행할 웹사이트 root 폴더를 지정해야 한다. ServerRoot처럼 디폴트로 “c:/Apache24/htdocs”로 셋팅 되어 있다.<br>원하는 경로가 있다면 수정하라.<br>부연설명으로 웹서버 기본 url(현재는 <a href="http://localhost:80" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:80</a>) 접근시 웹서버는 DocumentRoot 에 설정된 폴더 내부의 index.html 를 디폴트로 리다이렉트 한다.</p><ol start="4"><li>설치<br>관리자 모드로 cmd(명령 프롬프트) 창을 연다.<br>키보드의 윈도우 버튼을 누른뒤 cmd라고 검색하면 나온다.<br>명령 프롬프트 항목에 마우스 우클릭 한 뒤 “관리자 권한으로 실행”을 선택한다.<blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_6.png" alt></p></blockquote></li></ol><p>cmd 창이 열리면 cd C:\Apache243\bin 을 입력하여 경로를 이동한다.</p><p>이동한뒤 아래 명령어를 입력하여 아파치 서버를 설치한다.<br>httpd.exe -k install</p><p>뭔가 error라고 나오긴 하는데 무시해도 지장 없다.(도메인 관련 error 인것 같다)</p><p>만약 설치한 아파치 서버를 삭제 하고 싶다면 아래 명령어를 입력하면 된다.<br>httpd.exe -k uninstall</p><ol start="5"><li>httpd.exe -k install  명령어 입력 후<blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_7.png" alt></p></blockquote></li></ol><p>윈도우 탐색기에서 C:\Apache24\bin 경로로 이동후 AapcheMonitor 응용 프로그램을 실행한다.</p><p>윈도우의 오른쪽 하단 작업 표시줄을 보면 ApacheMonitor가 실핼된 것을 확인 할수 있다.</p><blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_8.png" alt></p></blockquote><p>해당 아이콘을 우클릭후 Apache2.4 &gt; Start 를 클릭하면 웹서버가 동작한다.<br>반대로 웹서버를 종료하고 싶다면 Stop 을 클릭하면 된다.</p><ol start="6"><li>웹서버 동작 확인</li></ol><p>웹서버를 start 한뒤에 인터넷 브라우저 창을 열고 주소창에</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:설정한포트번호</span><br></pre></td></tr></table></figure><p>또는 </p><pre><code>http://127.0.0.1:설정한포트번호 </code></pre><p>를 입력한다.</p><p>필자는 http.conf 파일에서 포트를 8080 으로 수정하였으므로</p><p><a href="http://localhost:8080" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080</a> 을 입력하겠다.</p><blockquote><p><img src="/images/2017-06-11-apache%EC%84%A4%EC%B9%98_9.png" alt></p></blockquote><p>위처럼 DocumentRoot 경로의 index.html 브라우저창에 열리는 것을 확인할 수 있다.<br>윈도우 관리도구등 기타 설명은 상단의 유투브 영상을 참고하길 바란다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
      
      
      <categories>
          
          <category> apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> windows </tag>
            
            <tag> hanumoka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST의 정의</title>
      <link href="/2017/08/31/web-20170831-REST/"/>
      <url>/2017/08/31/web-20170831-REST/</url>
      
        <content type="html"><![CDATA[<p><strong>REST(REpresentational State Transfer: 표현 상태 전송)는 웹 아키텍처 스타일이다.</strong></p><p>HTTP 스펙 설계에 참여했던 로이필딩이라는 사람이 2000년대 발표한 네트워크(웹) 아키텍처 스타일이다.<br>여기서 네트워크 아키텍처 스타일이란 한가지의 웹 아키텍쳐 가 아니라 여러 가지 복수의 아키텍쳐의 공통된 성질, 양식 규정 혹은 독특항 방식의 집합을 네트워크 아키텍쳐 스타일이라고 한다.<br>REST를 네트워크 아키텍쳐 스타일이라고 하지만, 사실 HTTP 기반위에 존재하는 아키텍쳐 스타일이므로 웹 아키텍처 스타일이라고 부르는 것도 틀린 표현은 아닌 것 같다.</p><p>RESTful은 어떤 대상이 REST 의 제약에 따르고 있고, 그래서 상당히 REST스럽다? REST답다 라는 형용사적 의미이다.</p><p>예를 들어 어떤 서버 A가 존재 한다고 하자. 이 A서버는 REST라는 아키텍츠 스타일의 제약을 충실히 따르고 있다면, 이 A 서버를 RESTful 한 서버라 부를 수 있다.</p><blockquote><p><img src="/images/20170831-REST%EB%9E%80_1.png" alt></p></blockquote><p><strong>REST의 의미</strong></p><blockquote><p>REST는 수많은 아키텍처 스타일 중에서도, 특히 네트워크 시스템의 아키텍처 스타일 이다.<br>그리고 REST는 웹의 대표적인 아키택처 스타일인 클라이언트/서버를 기반으로 하는 복합 아키텍처 스타일이다.<br>, 즉 로이필딩은 REST 기반으로 네트워크를 설계하면 효과적이라고 생각했다.</p></blockquote><p><strong>REST = 클라이언트/서버 + 스테이트리스 서버(Stateless Server) + 캐시(cache) + 유니폼 인터페이스(uniform Interface) + 계층화 시스템 + 코드 온 디맨</strong></p><p><strong>클라이언트/서버</strong><br>말그대로 클라이언트 와 서버로 구성되어 있으며 클라이언트에서 request하면 서버에서 response한다.</p><p><strong>스테이트리스 서버</strong><br>클라이언트의 어플리케이션 상태를 서버에서 관리하지 않는다는 의미이다. 서버가 어플리케이션의 상태를 가지지 않게되면, 그만큼 서버 측의 구현이 갈결해지는 장점이 있다.<br>하지만 현실적으로 스테이트리스가 아닌 웹 서비스와 웹 API가 많이 사용된다. 특히 HTTP를 스테이트풀 하게 만드는 대표적인 것은 Cookie를 사용한 세션관리이다.<br>REST의 관점에서 본다면, Cookie를 사용한 세션관리는 HTTP의 잘못된 확장이다. 다만 REST의 기준으로 잘못되었다고 해서, Cookie를 사용한 폼 인증을 그만둘 수 없는 것도 현실이다. Cookie는 스테이트리스 서버의 이점을 버린다는 것을 이해한 후 최소한으로 이용 해야 한다.</p><p><strong>캐시</strong><br>리소스의 신선도에 기초해, 한번 가져온 리소스를 클라이언트 쪽에서 돌려쓰는 방식.</p><p><strong>유니폼 인터페이스 (리소스, http 메소드, 메세지)</strong><br>URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일을 말한다.<br>예를 들어 HTTP1.1 에서 GET, POST등 8개의 메소드만 정의되어 있고, 보통은 이 이상 늘어나지 않는다. 어떻게 보면 확장성이 떨어진다고 보여지지만 이런 제약이 현재 웹의 통일된 인터페이스를 만들어 낸 것이다.</p><p>REST에서는 모든 것을 명사형 리소스로 표현하며, 의미가 명확한 한정된 HTTP 메소드를 사요하고, 메세지를 담아서 통신한다.<br>아래는 대표적으로 사용하는 메소드 4개이다.</p><table><tr><td>메소드명</td><td>기능</td></tr><tr><td>get</td><td>search</td></tr><tr><td>post</td><td>create</td></tr><tr><td>put</td><td>update</td></tr><tr><td>delete</td><td>delete</td></tr></table><p>아래는 실제 REST 메세지의 표현 형테이다.<br><a href="http://somthingweb/user/" target="_blank" rel="external nofollow noopener noreferrer">http://somthingweb/user/</a> 주소(리소스 url)에 POST(CREATE)해라 rocky라는 이름으 user를 이라는 의미를 갖는 메세지이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP POST , http:&#x2F;&#x2F;somthingweb&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;user&quot;:&#123;</span><br><span class="line">       &quot;name&quot;:&quot;rocky&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>계층화 시스템</strong></p><p>유니폼 인터페이스로 인해 발생되는 이점중 하나이다. 통일된 인터페이스로 인해 시스템 전체를 계층화 하기 쉽다. 프록시 서버, 로드벨런서 등등을 http 인터페이스로 통일하여 계층화 하여 사용 할수 있다.</p><p><strong>코드 온 디맨드(code on demand)</strong></p><p>프로그램 코드를 서버에서 다운 받아 클라이언트에서 실행하는 아키텍처 스타일이다.<br>처음에 이 개념은 서버에서 발생하는 부하를 클라이언트쪽으로 부담시켜 서버의 부하를 낮추것이 목적이었다.</p><p>예를 들어 javascript나 flash, java 애플릿 등이 여기에 해당한다.<br>반대로 jsp, asp 같이 백엔드에서 페이지를 렌더링해서 클라이언트에 보내는 경우, 수많은 화면 페이지들은  *.jsp 또는 *.asp 이런 확장자를 가지게 된다. 이는 화면단 소스가 백엔드 기술에 종속된다는 것을 의미한다.<br>jsp, asp 이런 기술들은 백엔드에 프론트엔드가 기술적으로 종속된다는 단점이 있지만, 이런 단점을 무색하게 할 정도로 강력한 기능을 제공해 왔다.</p><p>하지만 근래 javascript의 눈부신 발달, jquery, ajax 기타 수많은 블라블라.js 등으로 인해 이런 백엔드 서버페이지 기술, jsp, asp이런 것들이 제공하는 기술들을 대체하는 시대가 되었다. 본래의 서버의 부하를 낮추는 기능 뿐만 아니라 프론트 엔드가 서버에 독립적으로 동작할수 있는 특성이 생겨버렸다.</p><p>요즘의 REST, RESTful 하다라는 말이 유행하게 된 가장 큰 이유는 발전된 javascript, jquery, ajax를 통해 백엔드에 독립적인 프론트엔드 개발이 가능한 환경 즉 코드 온 디멘드가 가능한 환경이 되었기 때문이라고 생각된다.<br>특히 ajax통신은 http + xml or json 형태의 통신형태로 인해 REST가 지향하는 유니폼 인터페이스를 구현하는 기반이 되었다고 생각된다.</p><p>jquery, ajax를 이용하여 프론트엔드는 백엔드에 종속되지 않고 백엔드 시스템과 통신할수 있다.<br>이런 시점에서 적절한 웹 아키텍처가 필요했고 로이필딩이 2000년대 논문을 통해 발표한 REST라는 웹 아키텍처 스타일이 트랜드상 선호되는것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> REST </tag>
            
            <tag> RESTFul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 클로저(closure)사용시 주의사항(3편)</title>
      <link href="/2017/08/31/javascript-20170831-javascript-closure-3/"/>
      <url>/2017/08/31/javascript-20170831-javascript-closure-3/</url>
      
        <content type="html"><![CDATA[<h2 id="클로저-closure-의-사용시-주의사항"><a href="#클로저-closure-의-사용시-주의사항" class="headerlink" title="클로저(closure)의 사용시 주의사항"></a>클로저(closure)의 사용시 주의사항</h2><p>클로저는 그 기묘한 특성?상 다양한 활용이 가능하지만, 무분별하게 사용시 성능문제나 코드의 난독화가 발생한다고 한다.<br>이번글에서는 클로저 사용시 결과 예측을 실수 할수있는 ,즉 헷갈리는 클로저 예제 소스를 통해서 주의할 점을 알아보도록 하겠다.</p><p>1.클로저를 선언하는 외부함수의 유효범위 스코프는 클로저에 의해 변경이 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunc</span>(<span class="params">argNum</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = argNum;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">num += x;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num:'</span> + num);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exam = outerFunc(<span class="number">40</span>);</span><br><span class="line">exam(<span class="number">5</span>);</span><br><span class="line">exam(<span class="number">-10</span>);</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><blockquote><ul><li>num:45</li><li>num:35</li></ul></blockquote><p>사실 주의할 점 까지는 아니지만, 클로저의 가장 중요한 개념이다.<br>클로저를 처음 접할때 가장 햇갈리는 부분이 이부분일 것이다.</p><p>클로저는 살아있다(alive)! 이 말이 무엇이냐면, outerFunc(40); 로 외부함수는 호출되고 종료되었지만, exam 이라는 변수에 클로저가 생성되고 할당 되었다.<br>이 클로저 exam 이 존재 하기 때문에 자바스크립트 엔진은 exam 이 생성될 때, 접근할 수 있는 영역에 대한 부분을 메모리에서 지우지 않고 보존하고 있다. 즉 exam 은 자신을 생성한 outerFunc의 살아있는 유효범위 스코프에 접근하여 값 접근 및 할당이 가능하다.</p><ol start="2"><li>하나의 클로저가 여러 함수 객체의 스코프 체인에 들어가 있는 경우도 있다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">func1 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(++x); &#125;,</span><br><span class="line">func2 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(-x); &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exam = func();</span><br><span class="line">exam.func1();</span><br><span class="line">exam.func2();</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><blockquote><ul><li>2</li><li>-2</li></ul></blockquote><p>이 예제도 그렇게 어려운 예제는 아닐 것이다.<br>func()함수가 호출되며 하나의 객체를 리턴하고 그 객체는 func1, func2 두개의 메소드를 가지고 있다.<br>여기서 헷갈릴 가능성이 있는 부분은 리턴한 객체 exam 의 func1과 func2이 각각 다른 x에 접근 할 것이라 생각 할 수도 있다.<br>결과를 확인하면 exam.func1, 과 exam.func2과 동일한 x를 접근 하는 것을 확인 할 수 있다.</p><p>func1과 func2는 [동일한 함수 호출]에 의해 만들어 졌기 때문에 같은 x[동일한 함수 호출의 유효범위 스코프]에 접근 하는 것이다.</p><p>2번 예제를 통해 한가지 더 모호한 점은 클로저라는 어떤 대상의 구분이다.</p><p><img src="/images/2017-06-11-javascript7_1.png" alt></p><p>한개의 클로저의 범위를 정의 한다면, 한개의 외부함수의 유효범위 스코프와 그 유효범위 스코프를 공유하는 내부함수(1개 이상)라고 볼 수 있을것 같다.</p><p>3.클로저를 정의하는 함수 내에서 루프를 이용하는 경우</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constfuncs</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">funcs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> funcs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcs = constfuncs();</span><br><span class="line">funcs[<span class="number">0</span>]();</span><br><span class="line">funcs[<span class="number">4</span>]();</span><br><span class="line">funcs[<span class="number">9</span>]();</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><blockquote><ul><li>10</li><li>10</li><li>10</li></ul></blockquote><p>결과를 0, 4, 9 가 리턴 될 것이라 예측 할 수도 있다. (필자 역시…)<br>여기서 중요한 점은 클로저와 연관된 유효범위 체인이 ‘살아있다’라는 것이다.<br>중첩함수의 유효범위에 대한 내부 사본이나 변수 바인딩의 스냅샷은 만들어지지 않는다.<br>이미 funcs<a href>0</a> 이 호출되는 시점에는 자신을 생성할 때 호출된 constFuncs 함수의 var i 는 for문이 완벽하게 동작하고 종료되었기 때문에 10인 것이다.</p><ol start="4"><li>this와 arguments 사용시 주의점</li></ol><p>이 부분은 클로저 사용시 주의사항이라기 보다는 내부함수(중첩함수) 사용시 공통적으로 주의해야 할 부분이다.</p><p>모든 함수 호출에는 this값이 있고, 외부 함수가 this 값을 별도로 변수로 저장하지 않으면 클로저는 외부 함수의 this값에 접근 할 수 없다.<br>arguments는 키워드는 아니지만, 모든 함수 호출에 자동으로 선언된다. 클로저 함수는 자신만의 arguments를 가지고 있기 때문에, 외부 함수가 argumengs을 다른 이름의 변수에 저장하지 않는 한, 클로저는 외부 함수의 arguments에 접근 할 수없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunc1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;    <span class="comment">// this가 Window 전역객체로 할당 되는것을 강제로 막았다.</span></span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">arguments</span> );</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = outerFunc1(<span class="number">111</span>, <span class="string">'가나다'</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript7_3.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1();</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript7_4.png" alt></p><p>리턴된 클로저를 호출시 this 는 undefined(use strict를 통해 강제로 막았기 때문에) 그리고 arguments객체는 존재는 하지만 클로저 자신이 호출될때 생성된 arguments이기 때문에 외부함수 outerFunc1의 arguments에는 접근 할 수 없다.</p><p>해결방법 외부함수의 this와 arguments 객체를 외부함수 지역변수에 할당하자!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunc2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> outThis = <span class="keyword">this</span>;       <span class="comment">// this를 클로저가 접근할 수 있도록 지역변수에 할당한다.</span></span><br><span class="line"><span class="keyword">var</span> outArgu = <span class="built_in">arguments</span>;  <span class="comment">// arguments를 클로저가 접근할 수 있도록 지역변수에 할당한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">console</span>.dir(outThis);</span><br><span class="line">   <span class="built_in">console</span>.dir(outArgu );</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test2 = outerFunc2(<span class="number">222</span>, <span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript7_5.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test2();</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript7_6.png" alt></p><p>외부함수의 this 와 arguments 를 지역변수에 할당하여 클로저가 접근할 수 있도록 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> 클로저 </tag>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 클로저(closure)의 활용(2편)</title>
      <link href="/2017/08/31/javascript-20170831-javascript-closure-2/"/>
      <url>/2017/08/31/javascript-20170831-javascript-closure-2/</url>
      
        <content type="html"><![CDATA[<h2 id="클로저-closure-의-활용"><a href="#클로저-closure-의-활용" class="headerlink" title="클로저(closure)의 활용"></a>클로저(closure)의 활용</h2><p>본 글은 독자가 자바스크립트 클로저의 개념에 대한 이해를 전제하에 작성된 글이다.</p><p>자바스크립트의 클로저의 개념에 대해서는 공부를 했지만, 막상 이 클로저라는 것을 활용해 보려니 도통 감이 오질 않는다.<br>클로저를 활용한다는 말인 즉, 클로저를 통해서 어떤 프로그래밍 적 효과를 발생시키고 그 효과를 활용 한다는 말일 것이다.</p><p>그렇다면 간단한 예제를 통해 그 효과와 그 효과를 활용하는 방법을 알아보자.<br>(클로저는 성능적인 면과 자원적인 면에서 약간 손해를 볼수 있으므로 무차별적으로 사용해서는 안된다고 한다.)</p><h3 id="활용1-함수-캡슐화"><a href="#활용1-함수-캡슐화" class="headerlink" title="활용1 - 함수 캡슐화"></a>활용1 - 함수 캡슐화</h3><p>설명 할 클로저는 함수형 프로그래밍 기법이지만, 캡슐화를 구현할 수 있다.<br>캡슐화란 객체지향 프로그래밍의 하나의 개념 중 하나이다.<br>객체지향 프로그래밍의 캡슐화란 다음과 같다.</p><p>캡슐화란?</p><blockquote><p>객체의 속성(data fileds)과 행위(메소드, methods)를 하나도 묶는다.<br>실제 구현 내용 일부를 외부에 감추어 은닉한다.</p></blockquote><p>하지만 자바스크립트에서 기본적인 객체선언은 캡슐화의 두번째 측면인 실제 구현내용을 외부에 감추어 은닉할수가 없다.<br>간단한 객체 리터럴 예제로 확인해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countObj1 = &#123;</span><br><span class="line">n : <span class="number">0</span>,</span><br><span class="line">count : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.n++;&#125;,</span><br><span class="line">        reset : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.n = <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>countObj1객체의 의도는 메소드 count를 이용해서 n을 1씩 증가시키는 것이다.<br>그리고 reset 메소드를 이용하여 n을 0로 초기화 시킨다.</p><p><img src="/images/2017-06-11-javascript6_1.png" alt></p><p>그리고 위처럼 사용 할수 있다. 하지만 객체의 내부 프로퍼티인 n을 다른 방식으로 접근하여 호출 또는 재정의 할 수 있다.</p><p><img src="/images/2017-06-11-javascript6_2.png" alt></p><p>위처럼 내부 객체의 내부 프로퍼티에 직접 접근하여 재 할당 될 수 있다.<br>만약 악의적인 코드 또는 실수로 인해 외부에서 직접 n을 접근 할 경우 의도치 않은 동작을 할 수도 있다.</p><p>이렇게 외부에서 임의로 데이터를 접근 또는 훼손하는 것을 막는 기법이 캡슐화의 데이터 은닉이다.<br>하지만 안타깝게도 자바스크립트에서는 문법적으로 캡슐화의 데이터 은닉를 지원하지 않는다.  (java, c++에서는 문법적으로 지원한다.)</p><p>이 캡슐화의 데이터 은닉을 자바스크립트에서는 함수형 프로그래밍 기법인 클로저를 이용해 구현 할 수 있다.</p><p>1번 예제에 클로저를 적용하여 내부 변수 n을 외부에서 접근 못하게 해보자.(캡슐화의 데이터은닉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">count: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> n++; &#125;,</span><br><span class="line">                reset: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; n = <span class="number">0</span>; &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countA = counter();</span><br><span class="line"><span class="keyword">var</span> countB = counter();</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript6_3.png" alt></p><p>위 소스코드에서는 counter 함수가 리턴하는 객체의 메소드 count()와 reset()가 클로저가 된다. (이부분이 이해가 안간다면 클로저의 개념과 대해 다시 공부해야 한다.)</p><p>2번 예제는 1번예제와 객체 생성방법이 다르지만, 만들어진 객체의 사용은 동일하다.<br>count 메소드를 이용하여 n에 1을 더하고 , reset 메소드를 이용하여 n을 0으로 초기화 하고 있다.</p><p>그렇다면 2번예제에서도 1번예제처럼 직접 객체에 접근하여 n을 수정해 보자.</p><p><img src="/images/2017-06-11-javascript6_4.png" alt></p><p>countA.n = 100; 을 통해 n이라는 객체에 새로운 변수를 추가 할 수 있다.<br>하지만 countA의 메소드(클로저)는 이 countA의 멤버변수 n을 사용하는 것이 아니라 자기 자신의 외부함수 counter의 지역변수 n을 사용하기 때문에 객체의 메소드를 호출시 계획한 대로 결과가 나오는 것을 확인 할수있다.<br>이것은 클로저를 통해 변수 n이 은닉되어 있기때문에 가능한 결과이다.</p><p>2번 예제를 이용해 클로저에 대한 부연설명을 조금 더 해보자면,<br>countA.count()와 countA.reset() 메소드는 하나의 n을 공유한다.<br>하지만 countA 와 countB는 n을 공유하지 않고 각각의 n을 사용한다.<br>counter함수가 호출되어 새로운 객체를 리턴 할 때마다 새로운 유효범위 체인과 새로운 내부변수(n)이 생성되기 때문이다.<br>여기서 이 counter의 내부변수 n이 캡슐화된 외부로부터 은닉된 실제 구현내용이 된다.<br>이런 캡슐화를 통해서 내부변수 n이 외부로 부터 오염되는 것을 막을수 있다.</p><h3 id="활용2-함수의-호출방법의-가공"><a href="#활용2-함수의-호출방법의-가공" class="headerlink" title="활용2 - 함수의 호출방법의 가공"></a>활용2 - 함수의 호출방법의 가공</h3><p>setTimeout  함수는 첫번째 인자로 받는 함수 참조값을 특정시간(두번째 인자) 이후에 실행시키는 내장함수이다.<br>문제는 첫번째 인자로 넘기는 함수에 매개변수를 전달 할 수 없다는 것이다.<br>하지만 클로저를 이용해 전달할 함수를 클로저로 변환하여 호출하는 방법을 가공 할수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%d + %d = %d"</span>, a, b, a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callLater</span>(<span class="params">func, a, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tempFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func(a, b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tempFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = callLater(sum, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">setTimeout(func, <span class="number">8000</span>);</span><br></pre></td></tr></table></figure><p>간단한 예제이다. callLater 함수를 이용해 setTimeout에게 전달할 함수의 호출환경을 미리 설정해 놓고 그것을 클로저(tempFn)로 만들어 func 변수에 할당했다.<br>func 클로저는 인자가 필요 없으므로 setTimeout에 첫번째 인자로 전달할 수 있다.</p><p>자바스크립트에서는 함수도 일급객체이므로 변수처럼 다른 함수의 인자로 전달하여 실행시키는 경우가 많은데, 전달할 인자 함수에 매개변수를 클로저를 통해 미리 조립하여 전달하는 방식으로 클로저를 사용 할 수 있다.</p><p>클로저의 활용 방법을 간단한  2가지 예로 설명했는데, 사실 더 다양한 방법이 있을 것이다.<br>스스로 더 공부하고 코딩하면서 클로저의 다양한 활용방법을 찾아보길 바란다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> 클로저 </tag>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 클로저(closure)란(1편)?</title>
      <link href="/2017/08/31/javascript-20170831-javascript-closure-1/"/>
      <url>/2017/08/31/javascript-20170831-javascript-closure-1/</url>
      
        <content type="html"><![CDATA[<h2 id="클로저-closure-란"><a href="#클로저-closure-란" class="headerlink" title="클로저(closure)란?"></a>클로저(closure)란?</h2><p>클로저의 사전적 의미를 오렐리의 코뿔소책에서 발췌해왔다.</p><blockquote><p>함수객체와, 함수의 변수가 해석되는 유효범위(변수바인딩의 집합)을 아울러 컴퓨터 과학 문언에서는 클로저(closure)라고 일컫는다.<br>기술적으로 모든 자바스크립트 함수는 클로저인데, 함수는 객체이고 함수 자신과 관련된 유효범위 체인을 가지고 있기 때문이다.</p></blockquote><p>대충 보니 자바스크립트에서 함수객체 본인과, 그 함수객체가 접근할수 있는 유효범위를 포괄적으로 클로저라고 한다는것 같다.<br>하지만 위 글로는 야구의 마무리투수와 클로저의 차이를 구별하긴 어렵다. 역시 소스코드로 클로저를 이해해보자.</p><h3 id="1번-예제"><a href="#1번-예제" class="headerlink" title="1번 예제"></a>1번 예제</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testVal = <span class="string">'나는 전역변수이다.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> testVal = <span class="string">'나는 지역변수이다.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerF</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> testVal;</span><br><span class="line">&#125;<span class="comment">//innerF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> innerF();</span><br><span class="line">&#125;<span class="comment">//test</span></span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>1번 예제를 보자, 내부 함수를 선언하고 실행해서 리턴하는 간단한 예제이다.<br>여기서 마지막 test();의 결과를 보자.</p><p><img src="/images/2017-06-11-javascript5_1.png" alt></p><p>전역변수가 아닌 test함수의 지역변수가 선택되어 console.log함수에 의하여 호출되는 것을 확인 할 수 있다.<br>음 innerF함수가 test함수 내부에서 실행되고 그 값이 리턴된 것이니 당연한 결과라 생각이 된다.</p><p>그렇다면 다음 예제를 보도록 하자.</p><h3 id="2번-예제"><a href="#2번-예제" class="headerlink" title="2번 예제"></a>2번 예제</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testVal = <span class="string">'나는 전역변수이다.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> testVal = <span class="string">'나는 지역변수이다.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerF</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> testVal;</span><br><span class="line">&#125;<span class="comment">//innerF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> innerF;</span><br><span class="line">&#125;<span class="comment">//test</span></span><br><span class="line"></span><br><span class="line">test()();</span><br></pre></td></tr></table></figure><p>1번예제와 거의 같지만, 다른점은 innerF 내부함수는 test함수 내부에서 실행되지 않고 그냥 리턴이 되어버린다. 그리고 전역 영역에서 innerF함수를 실행한다.<br>test()();의 결과를 한번 보자.</p><p><img src="/images/2017-06-11-javascript5_2.png" alt></p><p>클로저를 모르는 분들이라면 이 결과에 이상함 또는 충격과 공포를 느낄 것이다.  innerF 함수는 전역영역에서 실행이 되었다. 따라서 전역에 있는 testVal을 사용할것이라고 쉽게 예상한다. 하지만 그 결과는 여전이 test함수의 지역변수를 사용한다는 것을 알수 있다.</p><p>보통 여기서 1차 멘붕이 온다.(필자가 그랬으니 당신들도 그러해야한 합니다. 나만 바보일순 없으니…)<br>왜???? test()(); 동작결과가 지역변수를 호출하는 거지????<br>분명 innerF함수는 전역영역에서 실행되었는데????<br>전역영역의 testVal을 가져와서 “저의 선택은 나는 전역변수이다. 입니다.” 이렇게 나와야 되는데????</p><p>그리고 C와 같은 저수준 프로그래밍 언어를 공부한 사람들은 곧 2차 멘붕이 온다. (역시 당신들도 그러해야한 합니다….)<br>부모함수 test함수는 호출이 이미 끝났잖아????<br>리턴된 함수는 이미 실행이 종료(close)된 test함수의 내부 변수에 어떻게 접근할수 있는 거지?????<br>test함수가 실행이 끝나지 않은 것인가???? (참고로 test함수는 종료된것이 맞다.)</p><p>예제2번의 결과가 나오는 이유는 바로</p><p>자바스크립트의 함수가 동작할때 사용하는 유효범위는 함수를 호출하는 시점에서의 변수 유효범위가 아니라, 함수가 정의된 시점의 변수 유효범위 체인를 사용하여 함수가 실행되기 때문이다.<br>다시 강조를 하면 호출하는 시점이 아니라! 정의되는 시점!!!<br>이런 특징을 어휘적 유효범위(lexical scoping)이라고 부른다고 한다.<br>이것이 굉장히 중요하다. 자바스크립트는 이런 어휘적 유효범위 때문에 클로저라는 것을 구현할수 있는 것이다.<br>test함수가 실행이 종료된 뒤에도 여전히 innerF함수가 test함수의 지역변수를 사용할수 있는 이유는 innerF함수는 자신의 정의된 시점에 자신이 접근하여 사용할수 있는 유효범위 체인 정보를 별도의영역(내부적으로…)에 저장하고 관리하고 있기 때문이다.</p><p>즉 2번 예제의, innerF함수는 전역영역에서 실행되었지만, innerF함수가 선언된 그 시점의 유효범위를 가지고 동작하기 때문에 선언된 시점의 test()함수 내부의 지역변수를 사용하게 된 것이다.</p><p>그리고 이번에 공부하고 있는 클로저라는 녀석은 저 test()함수 객체를 말한다. 2번 예제에서는 리턴된 함수를 변수에 안담아서 보기가 좀 그렇지만 var a = test(); a(); 이 a를 클로저라고 부른다.<br>글 맨위에서 사전적 의미의 클로저(함수의 유효범위와 함수객체)가 있지만 실질적으로 어떤 함수 내부에서 정의되고 외부로 리턴된 함수를 클로저라고 말한다.</p><p>클로저(closure)라는 말은 어원은 함수의 지역변수가 유효범위 체인에 바인딩 되어 있고, 따라서 그 함수는 함수의 변수에 ‘따라 닫힌다’는 뜻에서 유래한 용어라고 하는데, 이름을 잘못 지은것 같다. 오히려 개인적으로 이 이름때문에 이해하기 힘든 부분이 있었던것 같다.(마무리 투수만 생각 나더라…)</p><h3 id="누군가-당신에게-자바스크립트-클로저-closure-를-물어본다면"><a href="#누군가-당신에게-자바스크립트-클로저-closure-를-물어본다면" class="headerlink" title="누군가 당신에게 자바스크립트 클로저(closure)를 물어본다면?"></a>누군가 당신에게 자바스크립트 클로저(closure)를 물어본다면?</h3><h4 id="귀찮을-때"><a href="#귀찮을-때" class="headerlink" title="귀찮을 때"></a>귀찮을 때</h4><blockquote><p>함수다.</p></blockquote><h4 id="진지할-때"><a href="#진지할-때" class="headerlink" title="진지할 때"></a>진지할 때</h4><blockquote><p>함수객체와 그 함수객체가 선언된 시점의 유효범위 체인을 통틀어서 클로저라고 부를수 있다.<br>더 구체적으로 클로저를 지칭 하자면 자신(함수)을 정의한 바깥쪽 함수에 바인딩된 지역변수(그리고 전달인자)를 포착할수 있는 함수객체이다.</p></blockquote><p>이 클로저라는 녀석을 이용해서 다양한 코딩 기법(자바의 private 멤버변수 같은)이 있는데, 그건 아직 공부를 안해서 나중에 시간이 난다면 끄적여 보도록 하겠다. 이만 뿅!.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> 클로저 </tag>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 객체(Object) 생성방법</title>
      <link href="/2017/08/31/javascript-20170831-javascript-Object-2/"/>
      <url>/2017/08/31/javascript-20170831-javascript-Object-2/</url>
      
        <content type="html"><![CDATA[<h2 id="자바스크립트의-객체-생성방법-3가지"><a href="#자바스크립트의-객체-생성방법-3가지" class="headerlink" title="자바스크립트의 객체 생성방법 3가지"></a>자바스크립트의 객체 생성방법 3가지</h2><p>1.객체 리터럴을 이용한 객체 생성 방식</p><p>리터럴 방식 객체생성은 하나의 객체를 그 즉시 생성한다.<br>거두절미하고 소스와 주석으로 객체 리터럴을 설명하겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filmograyphyList = [<span class="string">'도날드덕'</span>, <span class="string">'환타지아'</span>]; <span class="comment">// 배열 객체를 선언한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = &#123;&#125;; <span class="comment">// 비어있는 프로퍼티가 없는 리터럴로 man 이라는 객체를 생성</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//duck 이라는 이름의 객체를 객체리터럴을 통해 생성한다.</span></span><br><span class="line"><span class="keyword">var</span> duck = &#123;</span><br><span class="line"><span class="comment">//객체 내부에는 그 객체의 특징(element)이 되는 프로퍼티를 여러개 갖을수 있으며</span></span><br><span class="line"><span class="comment">//이 프로퍼티에는 자바스크립트에 존재하는 모든 것을 담을수 있다.(원시값을 포함해 함수, 배열 ...)</span></span><br><span class="line">name: <span class="string">'도날드 덕'</span>,</span><br><span class="line">age: <span class="number">82</span>,</span><br><span class="line">sex : man,        <span class="comment">// 프로퍼티에 객체가 할당된다.</span></span><br><span class="line">별명 : <span class="string">'도날드 트럼프'</span>,    <span class="comment">// 자바스크립트 프로퍼티명은 영어가 아닌 한글도 가능하다.</span></span><br><span class="line"></span><br><span class="line">filmograyphy : filmograyphyList,   <span class="comment">// 프로퍼티에 객체배열을 할당한다.</span></span><br><span class="line"></span><br><span class="line"><span class="string">'home adress'</span> : <span class="string">'디지니 랜드'</span>,   <span class="comment">// 일반적으로 프로퍼티 명을 뛰어 쓰기로 사용할수 없으나</span></span><br><span class="line">                                        <span class="comment">//예외적으로 싱글쿼티션(') 또는 더블쿼티션("")으로 감싼 프로퍼티명은 사용이 가능하다.</span></span><br><span class="line">                                <span class="comment">// 프로퍼티 네이밍은 일반적으로 자바스크립트 변수 네이밍</span></span><br><span class="line">                                        <span class="comment">//규칙을 따른다.(ex:숫자로 시작하는 변수명은 사용할수 없다.)</span></span><br><span class="line"><span class="comment">// 하지만 싱글쿼티션(') 또는 더블쿼티션("")으로 감싼 프로퍼티명은 이런 자바스크립트의                                                       //변수명 작성 규칙 제한을 받지 않는다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> : <span class="string">'test2222'</span>,                   <span class="comment">// for, if 등 시스템 예약어는 변수명으로는 사용할수 없다 하지만 자바스크립트</span></span><br><span class="line">                                            <span class="comment">//객체프로퍼티명으론 사용할수 있다.</span></span><br><span class="line"><span class="string">'if'</span> : <span class="string">'test111'</span>,                   <span class="comment">// 하지만 이런 예약어들의 사용을 권장하지 않으며, 만약 불가피 하다면 문자열로</span></span><br><span class="line">                                            <span class="comment">//감싸 사용하길 권장한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//프로퍼티에는 함수또한 담길수 있으며, 특이하게 객체의 프로퍼티중 함수를 담고 있는 프로퍼티는 메소드라고 부른다.</span></span><br><span class="line">    say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'꽥 꽥'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>리터럴이라는 말을 위키피디아에서 찾아보니 컴퓨터 과학분야에서, 소스코드의 고정된 값을 대표하는 용어라고한다.( 즉 객체 리터럴 방식은 객체를 생성하는 표기법 정도로 이해하고 넘어가자. 리터널에 대해서는 인터넷에 한번 찾아보길 바란다.)</p><p>위 소스는 obj1이라는 이름의 객체를 리터럴 방식으로 생성한 것이다.<br>객체 리터럴은 중괄호 { } 를 이용하여 프로퍼티명과 프로퍼티의 값을 감싼 형태로 생성 된다.<br>{ ‘프로퍼티이름’ : ‘프로퍼티값’ }</p><p>더 자세한 내용은 위의 동영상을 참고하길 바란다.</p><p>2.생성자를 이용한 객체 생성</p><p>생성자 함수를 이용해 반복적으로 동일한 형태(프로퍼티를 갖는)객체를 생성하는 일반적인 방법.</p><p>일단 자바스크립트의 생성자란 객체를 반복적으로 생성할수 있는 함수이다.<br>대중적인 객체지향 언어인 java, c++ 같은 언어에서는 class라는 객체의 설계도 내부의 생성자라는 함수를 가지고 있는데, 자바스크립트에서는 클래스라는 객체의 설계서가 따로 존재하지 않으며 이 생성자 내부에서 객체의 설계내용을 작성한다.</p><p>그리고 자바스크립트에서는 기본적인 함수와 생성자간의 문법적 구별이 없다. A라는 함수가 있다면 이것을 그냥 함수처럼 호출할수도 있고, new라는 키워드로 생성자로 호출할수도 있다.</p><p>역시 거두절미하고 소스를 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();        <span class="comment">// 자바스크립트에 내장된 기본 Object 생성자를 이용해 빈 객체를 생성.</span></span><br><span class="line"><span class="keyword">var</span> arrayObj1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);  <span class="comment">// 자바스크립트에 내장된 기본 Array 생성자를 이용해 빈 배열 객체를 생성.</span></span><br><span class="line"><span class="keyword">var</span> dateObj1 = <span class="keyword">new</span> <span class="built_in">Date</span>();      <span class="comment">// 자바스크립트에 내장된 기본 Date 생성자를 이용해 날짜 정보를 담은 Date 객체를 생성.</span></span><br><span class="line">                                <span class="comment">// Object, Array, Date 뿐만아니라 여러 다른 기본 내장 객체 생성자가 존재한다.</span></span><br></pre></td></tr></table></figure><p>위처럼 내장된 생성자 객체들을 이용하여 객체를 생성할수 있다.<br>이런 내장된 생성자 말고 프로그래머가 직접 원하는 객체를 생성할수 있도록 생성자를 만들수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Duck이라는 생성자를 만든다. 자바스크립트에서는 일반 함수와 생성자의 문법적 차이가 없다.(개인적으로 불만이다.)</span></span><br><span class="line"><span class="comment">//생성자와 함수를 구별하기 위해 보통 생성자의 이름은 대문자로 선언한다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Duck</span>(<span class="params">dName, dAge</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//생성자 함수의 내부에 있는 this라는 키워드는 이 함수가 new로 호출되었을때 생성해서 리턴하는 객체를 가리키며</span></span><br><span class="line"><span class="comment">//this.name은 그 생성될 객체의 프로퍼티를 생성하겠다라는 의미이다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = dName;  <span class="comment">// 생성자 함수를 호출시 전달받는 전달인자를 name이라는 프로퍼티에 할당한다.</span></span><br><span class="line"><span class="keyword">this</span>.age = dAge;    <span class="comment">// 생성자 함수를 호출시 전달받는 전달인자를 age이라는 프로퍼티에 할당한다.</span></span><br><span class="line"><span class="keyword">this</span>.종 = <span class="string">'오리'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//객체 리터럴과 다르게 아래처럼은 객체 프로퍼티의 프로퍼티명을 문자열로 만들수 없다.</span></span><br><span class="line"><span class="comment">//this."home adress" = '디지니 랜드';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//하지만 이런식으로 객체가 유사배열인 것을 이용하여, 배열 형태로 프로퍼티를 생성할 시 문자열로 프로퍼티명을 생성할수 있다.</span></span><br><span class="line"><span class="keyword">this</span>[<span class="string">"home adress"</span>] = <span class="string">'디지니 랜드'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.for = <span class="string">'하하하?'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'꽥 꽥'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// Duck end</span></span><br></pre></td></tr></table></figure><p>자 위 소스로 객채를 생성할수 있는 함수 즉 생성자를 선언했다.<br>이제 위 생성자를 통해 객체를 생성해 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new 라는 키워드의 의미는 new 다음에 올 함수를 생성자로서 호출하겠다는 의미이다.</span></span><br><span class="line"><span class="comment">//여기서 중요한 것은 new로 호출된 모든 함수는 객체를 반드시 생성해서 리턴하게 된다.</span></span><br><span class="line"><span class="comment">//생성자는 어떤 형태의 객체를 만들 목적으로 만들어 진 것일뿐 일반함수와 같다.</span></span><br><span class="line"><span class="keyword">var</span> duck1 = <span class="keyword">new</span> Duck(<span class="string">'도날드 덕'</span>, <span class="number">82</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(duck1);</span><br></pre></td></tr></table></figure><p><img src="/images/2017-06-11-javascript4_1.png" alt></p><p>생성된 객체를 console.dir로 열어보면 Duck생성자로 생성된 객체의 프로퍼티를 확인 할 수 있다.</p><p>일단 생성자를 하나 만들었다면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> duck2 = <span class="keyword">new</span> Duck(<span class="string">'레임 덕'</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> duck2 = <span class="keyword">new</span> Duck(<span class="string">'베이징 덕'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>이처럼 반복적으로 객체를 생성하는 것이 가능하다.</p><p>지금 설명하는 생성자를 사용하여 객체를 생성하는 이유는 동일 형태의 객체를 반복적으로 생성할 수 있기 때문이다.<br>(물론 필요에 따라 객체리터럴로 객체를 생성해도 된다. 뭐가 좋고 나쁘다는 말이 아니다.)</p><p>자바스크립트에서 생성자가 다른 객체지향 언어와 개념적 차이가 있는데, 일반적인 객체지향언어에서 클래스라는 개념이 있다.<br>이 클래스라는 개념은 객체의 설계도 역할을 한다. 예를 들어 객체가 가져야 할 프로퍼티들을 정의 하는데, 자바스크립트에서는 이 클래스라는 개념이 없으며,그 대신 자바스크립트에서 생성자에서 this.프로퍼티명 을 이용하여 이 클래스의 설계도와 같은 기능을 포함하고 있다.</p><ol start="3"><li>Object.create 매소드를 이용해한 객체 생성</li></ol><p>자바스크립트의 객체의 상속을 따라가다보면 최상위 객체가 존재하신다.(필자는 god object라고 장난스래 부른다)<br>그리고 이 최상위 객체를 이용하여 자바스크립트에서 객체를 생산하시는 성모마리아님 같은 최상위 생성자(자바스크립트 내장 상성자)가 역시 존재하는데, 그 분이 Object()생성자 이시다.<br>이 Object생성자 객체의 create 메소드를 이용하면, 객체 생성과 동시 객체 상속을 조금더 손쉽게 할수 있다.<br>이 기능은 ecma5(이끄마파이브) 부터 지원하며, 자세한 내용은 아래 MDN을 참고!</p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create</a></p><p>절대 귀찮아서 Object.create 설명은 글로 안쓴것이 아니다. 솔직히 나도 잘 모ㄹ…. 콜록콜록</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 객체(Object)란?</title>
      <link href="/2017/08/31/javascript-20170831-javascript-Object-1/"/>
      <url>/2017/08/31/javascript-20170831-javascript-Object-1/</url>
      
        <content type="html"><![CDATA[<h2 id="자바스크립트에서-객체란"><a href="#자바스크립트에서-객체란" class="headerlink" title="자바스크립트에서 객체란?"></a>자바스크립트에서 객체란?</h2><p>일단 자바스크립트는 객체지향 언어이고, 객체란 일종의 숫자, 문자열과 같은 데이터 형태 중 하나이다.</p><p>자바스크립트의 객체를 설명하기 앞서 객체(Object:오브젝트)라는 말을 간단히 설명하고 가겠다. (이미 안다면 그냥 넘어가시길…)<br>프로그래밍 영역에서 객체(Object:오브젝트) 어떤 의미일까?<br>영어로는 물건, 물체등으로 해석된다.<br>컴퓨터 용어의 Object도 영어의 그것과 크게 다르지 않다.</p><p>사람은 어떤 물건, 예를들어 자동차와 같은 물체를 인식(or이해)할 수 있다.<br>예를 들어 아래의 자동차를 차에대해 전혀 모르는 친구에게 설명해본다고 하자.</p><br>>![](/images/2017-06-11-javascript3_1.JPG)<blockquote><p>이 차의 회사는 쉐보레이고, 차종은 카마로 범블비 에디션이고, 색상은 노란색이며, 바퀴는 4개 달려있다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var car1 &#x3D; &#123;</span><br><span class="line">                     company: &#39;쉐보레&#39;,</span><br><span class="line">                     wheels: 4,</span><br><span class="line">                     color: &#39;#FFE400&#39;,   &#x2F;&#x2F;노란색 RGB 색상표</span><br><span class="line">                     name : &#39;카마로 범블비 에디션&#39;,</span><br><span class="line">                     &#39;배기량&#39; : &#39;5000&#39;,</span><br><span class="line">                     transform : function()&#123;</span><br><span class="line">                                 console.log(&#39;범블비로 변신&#39;);</span><br><span class="line">                     &#125;,</span><br><span class="line">                     run : function()&#123;</span><br><span class="line">                                 console.log(&quot;범블비 달린다!&quot;);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;;</span><br><span class="line"></span><br><span class="line">function do_something(car1);  &#x2F;&#x2F; 이차로 무언가 해봐!, 분해를 하던, 폐차를 하던</span><br></pre></td></tr></table></figure><p>당신이 자바스크립트에서 변수라는 것을 알고 있다면 car1 이라는 것이 카마로라는 자동차의 설명 정보를 담고 있다는 것을 어렴풋이 느낄수 있을것이다. 그리고 do_something 이라는 함수에 car1 을 전달인자로 넘겨 버렸다.<br>위 소스의 car1이 자바스크립트에서 객체이다.</p><p>쉽게 말해서 프로그래밍 영역에서 객체란 어떤 대상의 복합적인 데이터를 담고 있는 데이터이다.<br>당신이 알고 있는 어떤 무언가(대상)를 다른 사람에게 설명하듯이 컴퓨터에게 그것들을 인식시키기 위해 그 대상의 특징(element)를 만들고 그 특징에 대한 설명정보를 담고 있는 것, 그것을 객체라고 부른다.<br>그리고 보통 이 객체라는 단위의 자료형(type)을 가지고 있는 프로그래밍 언어를 객체지향언어(객체라는 개념과 객체지향 프로그래밍을 지원)라고 부른다.<br>그리고 자바스크립트는 객체를 지원하는 객체지향 언어이다.</p><h3 id="자바스크립트의-객체의-특징"><a href="#자바스크립트의-객체의-특징" class="headerlink" title="자바스크립트의 객체의 특징"></a>자바스크립트의 객체의 특징</h3><ul><li>자바스크립트 객체는 프로퍼티를 갖는다. 그리고 프로퍼티는 데이터프로퍼티와 접근자프로퍼티 두 종류가 있다.</li><li>자바스크립트 객체는 메소드를 갖는다.</li><li>숫자, 문자열, 불린값, null, undefined 같은 기본 타입을 제외한 모든 값은 객체다. (함수, 배열, 정규표현식 등)</li><li>클래스라는 개념이 없다.(java, c++와의 객체와 약간 생성, 사용방법이 다르다.)</li><li>자바스크립트 객체는 참조타입이다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 함수호이스팅(hoisting)</title>
      <link href="/2017/08/31/javascript-20170831-javascript-hoisting/"/>
      <url>/2017/08/31/javascript-20170831-javascript-hoisting/</url>
      
        <content type="html"><![CDATA[<h2 id="함수호이스팅-Function-Hoisting"><a href="#함수호이스팅-Function-Hoisting" class="headerlink" title="함수호이스팅(Function Hoisting)"></a>함수호이스팅(Function Hoisting)</h2><p> 자바스크립트 영역에서 유명한 더글라스 클락포드는 함수를 생성할 때 선언식보다는 함수 표현식만을 사용할 것을 권고 하고 있다.<br>그 이유가 이 함수호이스팅 때문이라고 설명하는데, 대체 함수호이스팅 이란 무엇일까?</p><blockquote><p><strong>함수호이스팅의 = 함수 선언문으로 생성된 함수가 해당 소스코드의 유효범위의 맨 위로 끌어올려진다.</strong></p></blockquote><p>일단 소스코드를 보자</p><h3 id="예제1-함수-선언문"><a href="#예제1-함수-선언문" class="headerlink" title="예제1(함수 선언문)"></a>예제1(함수 선언문)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn_test(1); &#x2F;&#x2F;a호출:함수 선언문 이전에 호출</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;함수 선언문</span><br><span class="line">function fn_test(temp)&#123;</span><br><span class="line">console.log(&#39;fn_test run... temp:&#39;+ temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn_test(2); &#x2F;&#x2F;b호출:함수 선언문 이후에 호출</span><br></pre></td></tr></table></figure><h3 id="예제1-결과"><a href="#예제1-결과" class="headerlink" title="예제1 결과"></a>예제1 결과</h3><p><img src="/images/2017-05-29-javascript2_1.png" alt></p><p>만약 자바스크립트의 함수호이스팅을 모른다면 예제1의 결과를 의아하게 볼 수 있다.<br>a호출에서 아직 선언되지 않은 시점에서 fn_test함수를 호출 한 결과 오류가 발생하기는 커녕 정상적으로 함수가 호출되어 동작 했다.</p><p>이런 동작의 이유가 함수 호이스팅이다.<br>비록 함수선언문으로 생성된 함수 fn_test는 자동으로 소스코드 최상단으로 끌어올려진다.(a호출 보다 위로)</p><h3 id="예제1의-함수호이스팅-동작의-상상"><a href="#예제1의-함수호이스팅-동작의-상상" class="headerlink" title="예제1의 함수호이스팅 동작의 상상"></a>예제1의 함수호이스팅 동작의 상상</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;함수 선언문, 소스코드 최상단으로 끌어 올려짐</span><br><span class="line">function fn_test(temp)&#123;</span><br><span class="line">console.log(&#39;fn_test run... temp:&#39;+ temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn_test(1); &#x2F;&#x2F;a호출:함수 선언문 이전에 호출</span><br><span class="line"></span><br><span class="line">fn_test(2); &#x2F;&#x2F;b호출:함수 선언문 이후에 호출</span><br></pre></td></tr></table></figure><p>즉 예제1은 위 소스와 같은 동작을 한다는 것이다.<br>함수 선언문은 함수 호이스팅에의해 항상 소스의 최초시점에 호출 되기때문에 호출a에서 fn_test가 정상 동작 한 것이다.</p><p>얼핏 보면 함수호이스팅은 편리한 기능처럼 보이기도 하다.<br><strong>“어쨋든 오류는 없이, 소스코드가 동작하는데 편리한 기능 아닌가?”</strong>라고 생각 할 수도 있다.</p><p>마이클 더글락스는 함수 선언문은 소스코드를 엉성하게 만들어, 코더의 의도하지 않는 소스의 동작을 야기하기 때문에 지양해야 한다고 한다.<br>그리고 <strong>함수 선언문 대신 함수호이스팅이 발생 하지 않는, 함수 표현식</strong>으로 함수를 생성해서 사용 할 것을 권고 한다.</p><h3 id="예제2-함수-표현식"><a href="#예제2-함수-표현식" class="headerlink" title="예제2(함수 표현식)"></a>예제2(함수 표현식)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn_test(1);  &#x2F;&#x2F; a 호출: 함수 표현식 이전 호출</span><br><span class="line"></span><br><span class="line">var fn_test &#x3D; function(temp)&#123;</span><br><span class="line">console.log(&#39;fn_test start… temp:&#39; + temp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn_test(2); &#x2F;&#x2F; b 호출: 함수 표현식 이후 호출</span><br></pre></td></tr></table></figure><h3 id="예제2-결과"><a href="#예제2-결과" class="headerlink" title="예제2 결과"></a>예제2 결과</h3><p><img src="/images/2017-05-29-javascript2_2.png" alt></p><p>예제1 함수 선언식과 다르게 함수 표현식으로 선언된 함수는 함수호이스팅이 발생하지 않으므로, 함수 생성 이전에 호출 할 경우 아직 존재하지 않는 함수를 호출게 되므로 오류가 발생한다.</p><p>개인적으로 화면 단 에서 간단한 DOM제어용 함수는 선언문으로 사용해도 상관 없지만, nodeJS나 Angular등 복잡하고 많은 분량의 자바스크립트 코드 개발시에는 더글라스 말대로 함수 표현식을 사용 하는것이 적당한 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 함수호이스팅 </tag>
            
            <tag> hoisting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 일급객체, 일급함수</title>
      <link href="/2017/08/31/javascript-20170831-javascript-first-object/"/>
      <url>/2017/08/31/javascript-20170831-javascript-first-object/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20170831-javascript-%EC%9D%BC%EA%B8%89%EA%B0%9D%EC%B2%B4-%EC%9D%BC%EA%B8%89%ED%95%A8%EC%88%98.jpg" alt></p><p>자바스크립트 책을 보다보면, <strong>입급객체, 일급함수</strong>이런 말들이 나온다.</p><blockquote><p>자바스크립트의 객체는 일급객체이다.<br>자바스크립트의 함수는 일금함수이다.</p></blockquote><p>이게 대체 무슨 말일까?<br>어려워 할 것 없다. 이미 아는 것이지만, 단어가 생소해서 혼동이 올 뿐이다.</p><h2 id="1급시민-일급시민-first-class-citizen"><a href="#1급시민-일급시민-first-class-citizen" class="headerlink" title="1급시민(일급시민:first class citizen)"></a>1급시민(일급시민:first class citizen)</h2><p>:  일급객체, 일금함수 이런 말 이전에 일급시민이라는 말 부터 정리해 보도록 하자. 그 이유는 일급객체는 일급시민인 객체를 말하며, 일급함수는 일급시민인 함수를 말하기 때문이다.</p><p>일급시민을 간단히 말하자면 차별받지 않고 시민으로서 누릴수 있는 권한을 모두 누릴수 있는 사람을 일급시민이라고 한다.</p><blockquote><ul><li>1급 시민은 투표권이 있다.</li><li>1급 시민은 군인이 될 수 있다.</li><li>1급 시민은 정치에 참여 할 수 있다.</li></ul></blockquote><p>1800년데 영국에서는 1급시민, 2급시민이 존재 했으며 성인 남성의 경우 1급시민으로서 정치참여가 가능한데 반해, 2급시민인 여성은 정치 참여를 할 수 없었다고 한다.</p><p>1급시민 이라는 말은 권한을 많이 누리는 대상이라고 볼 수 있다.</p><h2 id="프로그래밍-영역에서-1급시민이란"><a href="#프로그래밍-영역에서-1급시민이란" class="headerlink" title="프로그래밍 영역에서 1급시민이란?"></a>프로그래밍 영역에서 1급시민이란?</h2><p>: 일단 프로그래밍 영역에서 1급시민을 정의하려면 1급시민이는 것들이 누려야할 권한이 뭔저 정의가 되어 있어야 한다.(실제 투표권 같은 권한 말이다.)</p><blockquote><ul><li>1급 시민은 함수의 인자가 될 수 있다.</li><li>1급 시민은 함수의 리턴이 될 수 있다.</li><li>1급 시민은 변수에 할당 될 수 있다.</li></ul></blockquote><p>프로그래밍 영역에서 위와 같은 권한을 누리는 것들을 보통 일급시민이라 여긴다. 즉 자바스크립트에서 원시값(일반 자료형)은 1급 시민이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var temp_int &#x3D; 1; &#x2F;&#x2F; 숫자는 변수에 담긴다.</span><br><span class="line">function fn_test_int(a)&#123;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ret_int &#x3D; fn_test_int(3);  &#x2F;&#x2F; 숫자는 함수의 인자가 된다.</span><br><span class="line">console.log(ret_int);   &#x2F;&#x2F; 숫자는 함수의 리턴이 된다.</span><br></pre></td></tr></table></figure><h2 id="1급객체-일급객체-first-class-object"><a href="#1급객체-일급객체-first-class-object" class="headerlink" title="1급객체(일급객체:first class object)"></a>1급객체(일급객체:first class object)</h2><blockquote><p><em>자바스크립트의 객체는 1급객체이다.</em></p></blockquote><p>라는 말은 자바스크립트에서 객체는 1급시민이 누리는 권한을 모두 가지고 있다는 말이다.<br>따라서 자바스크립트의 객체도 원시값 처럼 다음과 같다.</p><blockquote><ul><li>자바스크립트의 개체는 함수의 인자가 될 수 있다.</li><li>자바스크립트의 객체는 함수의 리턴이 될 수 있다.</li><li>자바스크립트의 객체는 변수에 할당 될 수 있다.</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var temp_obj &#x3D; &#123; name :&#39;first class object1&#39;&#125;;   &#x2F;&#x2F; 객체는 변수에 담긴다.</span><br><span class="line"></span><br><span class="line">function fn_test_obj(obj)&#123;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ret_obj &#x3D; fn_test_obj(temp_obj);   &#x2F;&#x2F; 객체는 함수의 인자가 된다.</span><br><span class="line">console.dir(ret_obj);  &#x2F;&#x2F; 객체는 함수의 리턴이 된다.</span><br></pre></td></tr></table></figure><h2 id="1급함수-일급함수-first-class-function"><a href="#1급함수-일급함수-first-class-function" class="headerlink" title="1급함수(일급함수:first class function)"></a>1급함수(일급함수:first class function)</h2><blockquote><p><em>자바스크립트의 함수는 1급함수이다.</em></p></blockquote><p>라는 말은 자바스크립트에서 함수역시 1급시민이 누리는 권한을 모두 가지고 있다는 말이다.따라서 자바스크립트의 함수도 원시값 처럼 다음과 같다.</p><blockquote><ul><li>자바스크립트의 함수는 함수의 인자가 될 수 있다.</li><li>자바스크립트의 함수는 함수의 리턴이 될 수 있다.</li><li>자바스크립트의 함수는 변수에 할당 될 수 있다.</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fn_outer &#x3D; function()&#123;</span><br><span class="line">  console.log(&#39;fn_outer 함수 동작...&#39;);</span><br><span class="line">  return function()&#123;</span><br><span class="line">  console.log(&#39;리턴되는 함수가 동작...&#39;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var ret_fn &#x3D; fn_outer();</span><br><span class="line">ret_fn();    &#x2F;&#x2F; fn_outer함수의 리턴된 함수가 실행된다. 즉 함수는 함수의 리턴이 될수있다.</span><br><span class="line">ret_fn();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> javascript </tag>
            
            <tag> 일급객체 </tag>
            
            <tag> 일급함수 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java7 Exception</title>
      <link href="/2017/08/31/java-20170831-java7-Exception/"/>
      <url>/2017/08/31/java-20170831-java7-Exception/</url>
      
        <content type="html"><![CDATA[<blockquote><p><img src="/images/20170831-java7-Exception.jpg" alt></p></blockquote><p>java의 예외처리 내용이 햇갈려서 간만에 java책을 들여다보니 내가 몰랏던 기능들이 있어서 정리해 본다.</p><h3 id="1-멀티-catch-구문-a-하나의-catch-블록에서-여러개의-Exception을-잡아서-처리하는-구문이다"><a href="#1-멀티-catch-구문-a-하나의-catch-블록에서-여러개의-Exception을-잡아서-처리하는-구문이다" class="headerlink" title="1.멀티 catch 구문 a.하나의 catch 블록에서 여러개의 Exception을 잡아서 처리하는 구문이다."></a>1.멀티 catch 구문 a.하나의 catch 블록에서 여러개의 Exception을 잡아서 처리하는 구문이다.</h3><p>예제1-a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;catch(AException a | BException b)&#123;</span><br><span class="line"> &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자바 7부터 추가된 기능이라고 한다.</p><h4 id="자동리소스-닫기-try-with-resources"><a href="#자동리소스-닫기-try-with-resources" class="headerlink" title="자동리소스 닫기(try-with-resources)"></a>자동리소스 닫기(try-with-resources)</h4><p>a.기존의 try-catch-finally 로 처리하던 관용적인 리소스(db 커넥션, 소켓 등등) 반납 로직을 간편하게 처리하기 위해 나온듯 하다.</p><p>b.자동리소스 닫기(try-with-resources)는 코드의 예외 발생 여부와 상관 없이 사용중인 리소스 (각종 입출력 스트림, 서버소켓, 소켓, 각종 채널)의 close() 메소드를 자동으로 호출하여 안전하게 리소스를 반납해준다.</p><p>예제 2-b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try(AStream as &#x3D; new AStream())&#123;</span><br><span class="line">&#x2F;&#x2F; 한개의 리소스 사용시</span><br><span class="line">&#125;catch(IOException e)&#123;</span><br><span class="line">           &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try(AStream as &#x3D; new AStream(); BStream as &#x3D; new BStream();)&#123;</span><br><span class="line">&#x2F;&#x2F; 복수 개의 리소스 사용시</span><br><span class="line">&#125;catch(IOException e)&#123;</span><br><span class="line">&#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존의 finally를 이용하여 리소스를 클로즈 하는 행위를 자동으로 처리해주는 편리하느 기능이라고 생각 된다.</p><p>c. 자동리소스 닫기(try-with-resources)를 사용하기 위해서는 조건이 있다. AutoCloseable이라는 인터페이스를 구현한 리소스객체만 자동리소스 닫기(try-with-resources)를 적용 할 수 있다</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hanumoka </tag>
            
            <tag> java </tag>
            
            <tag> exception </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
